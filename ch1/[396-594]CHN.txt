【396】 有些时候 bash 的调试也是有技巧的

一般来讲，调试的时候我们直觉会时不时地失效

就像我们之前看到的 `foo` 命令不存在

因此我们在讲义里有一个很高效的工具

这个工具叫做 shellcheck ，链接已经放在讲义里了

它能给出 warning 和语法错误

【406】 还能指出哪些地方你没正确引用

或者是哪些地方你的空格打错了

举个很简单的例子

 `mcd.sh` 这个文件，我们得到了一些错误提示

这些提示说：“嗨！我们惊奇地发现漏掉了一些东西”

这可能导致 `mcd.sh` 在别的系统无法解译成功

并且， `cd` 后面有一个指令，可能不会被正确执行 #REVIEW

【416】 所以这里你可能想用 `cd ... || exit` 之类的东西来代替它

回到这行命令

如果 `cd` 命令没有正确结束，你就不能进入那个文件夹

因为要么你没有权限，要么文件夹不存在

之后程序会给你一个非零的错误码

然后你就会执行 `exit` 命令，停止脚本的运行

【426】 而不是像脚本在一个不存在的路径继续执行

实际上我还没测试，但是我想我们可以试一下 `example.sh`

这里它告诉我们我们应该用另外一种方法检查 `exit code`

因为这可能不能很好地达到目的

最后一点，我想说的是

当你在写实现这些的 bash 脚本或者函数的时候

【436】 写你要运行的 bash 脚本和写要载入 shell 的东西

这两者是有区别的

我们将会在命令行环境那一讲里了解这些差别

同时那一讲会用到 bashrc 和 sshrc 这两种工具

但是，总的来说，如果你做了一些改动，比如你的路径

比方说你 cd 到了一个 bash 脚本，并且你要直接运行它

【446】 它就不会 cd 到你当前的 shell 环境

但是如果你直接通过 shell 加载 bash 代码

比如你的函数，然后你运行这些函数

这样操作就会有些副作用

在 shell 中定义变量也是一样

现在我会讲一些和 shell 搭配干活不累的工具

第一个昨天已经着重讲过了

【456】 我们才能怎么知道 flag (标志)和 command (命令)具体代表什么

就像我现在知道 `ls -l` 会用列表的形式列出文件

或者我运行 `mv -i` 它会给我提示

你现在能用的就是 man 命令

man 命令会给出很多关于命令的信息

比如说在这解释了 `-i` 的作用，这些就是你能做的全部操作

【466】 不仅对于系统内封装的简单的命令来说很方便

对于一些你从网上下载的工具也很方便

例如，如果安装完一些工具

那么 man 相关的包也安装好了

比如我们要运行这个叫 ripgrep 的工具

它可以被 rg 调用

系统里并没有自带这个工具，但是它安装了自己的 man 文档

