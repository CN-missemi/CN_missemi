好的，欢迎回来

今天我们要分别谈谈与 Shell 有关的两个主题

首先，我们要谈谈 Shell 脚本，其中主要是 bash

这将会是你们大多数人一开始使用的 Shell

在 macOS，或者像是在大多数的 Linux 系统中

bash 是默认的 Shell

并且其他 Shell ，像是 zsh

对其有良好的向后兼容，这非常棒 [*]
*译者注：ZShell 具有的其实是对 Bourne Shell （亦被称为 `sh`）的兼容性，bash 则是对其具有兼容性的 Shell（Bourne-Again SHell）；同时，自从 macOS 10.15 Catalina (2019) 后，zsh 取代 bash 成为 macOS 的默认 Shell；macOS 的 bash 停留在 3.x
# FIXME - 副字幕长度约在 35 字以内，请删改

然后我们要谈谈真正方便的其他 Shell 工具

所以你们将可以避免执行重复的任务

像是寻找一段代码

或者一些犄角旮旯的文件

这里已经有着许多很棒的内置命令，他们可以帮助你做这些事情

昨天我们已经向你介绍了 Shell 和他们的一些怪癖

就像您开始执行命令的方式一样

重定向他们

今天我们将更多地谈一谈变量的语法，控制流以及 Shell 的函数

例如，一旦你接触 Shell，说你想要定义一个变量

那是你学习编程语言第一个接触的事情[*]
*译者注：其实也要看编程语言类型

你可以执行像是 `foo=bar`

并且我们可以通过 `$foo` 操作 `foo` 的值

它是 `bar`，完美

你需要注意的一个怪癖是当你面对 bash 的时候

空格至关重要[*]
*译者注：同样的，在 sh、zsh 中也是如此

主要是因为保留了空格，并且空格会被用来分隔参数

例如，一些像是 `foo = bar` 的操作无法正常工作

Shell 会告诉你它为什么无法工作

这是因为 `foo` 命令不能正常工作，比如说 `foo` 不存在

实际发生的是我们没有将 `bar` 赋给 `foo`

而是使用 `=` 和 `bar` 作为参数调用了 `foo` 程序

通常，你需要特别关注这类问题，比如说一些带有空格的文件名

你需要小心地把他们用引号引起来

让我们更深入些，探讨一下在 bash 中如何处理字符串

我们有两种定义字符串的方法：

可以用双引号定义字符串 # REVIEW - 看原视频（已校）

或者可以用单……

呃，对不起

使用单引号（定义）

虽然对于纯文本字符串，这两种方式是等价的

但是对于其余的字符串，则不相同

例如,我们执行 `echo "Value is $foo"，` # REVIEW - 此处是根据视频内容做出微调（已校）

其中 `$foo` 将被展开为字符串，并且替换掉 Shell 中 `foo` 变量的值

如果我们用单引号来重复实验

我们仅仅会得到原样的 `$foo`，单引号中的变量将不会被替换

再说一遍，编写脚本真的很容易，假如这有点像 Python      # REVIEW

您可能会对它更熟悉并且全然没有意识到

这就是给变量赋值的方式

我们稍后还会看到 bash 也有控制流技术

像是「for 循环」、「while 循环」

另一个主要的事情是我们可以定义函数

我们可以访问我在此处定义的函数

这里我们已经定义了 `mcd` 函数

到目前为止，我们已经了解了如何通过管道执行几个命令

就像昨天看到的那样

但是很多时候你想先做一件事，然后另一件事

这有点像我们在这里进行的的顺序执行

看这里，例如，我们可以调用 `mcd` 函数

首先我们调用 `mkdir` 命令，这个命令将会创建一个目录

在这里，`$1` 就像是一个特殊变量

这就是 bash 运作的方式

类似于其他脚本语言的 `argv`

数组 `argv` 的第一项将包含参数

在 bash 中同样的东西是 `$1`

并且一般的，在 bash 中的许多东西都是被保留的 `$` 开头的某些东西[*] # REVIEW - 不通顺
*译者注：此处的「被保留」指被保留用作特定用途

我们之后将看到更多的例子

并且，一旦我们创建了文件夹，我们就 `cd` 进入文件夹中

这将会是你普遍看到的模式

实际上，我们将直接将其键入到我们的 Shell 中

它将起作用并且将会定义此函数 # REVIEW

但是有时最好将它们写入文件之中

我们可以 `source` 这个文件。这将在 Shell 中加载脚本并执行

虽然现在看起来什么都没发生


但是现在我们的 Shell 中已经定义了 `mcd` 函数

因此，我们现在可以执行 `mcd test`

现在从 `tool` 目录移至 `test` 目录

我们创建了文件夹并且进入其中

还有什么。结果是...

我们可以通过 `$1` 访问第一个参数

这里有许多被保留的命令

例如 `$0` 将会是脚本的名字

`$2` 到 `$9` 将会是 bash 脚本的第二个到第九个参数

有一些保留字可以直接在 Shell 中使用

例如，`$?` 将获取上一条命令的错误代码（返回值）

我将会简要解释这些

再比如，`$_` 将会获取上一条命令的最后一个参数

因此，我们可以做的另一种方式是

我们可以执行 `mkdir test`，而不是重写一遍 `test`

我们可以使用 `$_` 将最后一个参数作为（上一个命令）的一部分来访问

它将被 `test` 替换

现在我们进行进入了 `test` 目录

像这样的例子很多，你应当熟悉他们

另一个我们经常使用的叫做 `bang bang`（`!!`）

例如，每当您尝试创建某些东西而您没有足够的权限时

就会遇到这个东西的用武之处 # REVIEW - 不通顺

然后，你可以执行 `sudo !!`，然后 `!!` 将会被你刚刚尝试的命令取代

现在，你可以尝试一下

现在，它会提示您输入密码，因为您具有 sudo 权限。




# FIXME
代码部分，举例而言，比如原字幕内容是 foo equals bar，而此时视频内容为代码 `foo = bar` 时
中文字幕酌情调整，尽量调整为代码内容（即 `foo = bar`，也即将标点符号由文字叙述改为符号叙述）
还有就是读下 spec.md
#
