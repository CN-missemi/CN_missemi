{41}{78}好的，欢迎回来[*]
{103}{227}今天我们要分别谈谈与 Shell 有关的两个话题
{234}{344}首先我们要讲 Shell 脚本，这主要和 bash 有关
{345}{482}这将会是你们大多数人一开始在 macOS
{483}{535}或者大多数 Linux 里接触的 Shell
{536}{565}bash 是它们默认的 Shell
{577}{621}并且其他 Shell ，像是 zsh
{622}{683}对其有良好的向后兼容，这非常棒 [*]
{684}{796}然后我们要谈谈特别方便的其他 Shell 工具
{797}{883}你们可以用它避免重复执行任务
{884}{947}像是寻找一段代码
{948}{1027}或者一些犄角旮旯的文件
{1028}{1101}bash 里也有许多很棒的内置命令
{1102}{1202}它们可以帮你做这些事情
{1257}{1338}昨天我们已经介绍了 Shell 
{1339}{1399}和它的一些特性 # REVIEW
{1400}{1478}就比如说你怎样执行一个命令
{1479}{1517}或者重定向它们（的输入输出）
{1518}{1569}今天我们将多讲一些 Shell 脚本中的
{1570}{1718}操纵变量的语法，控制流以及函数
{1738}{1840}例如，一旦你接触 Shell
{1859}{1916}说你想要定义一个变量
{1917}{2076}那是你学习编程语言第一个接触的事情[*]
{2081}{2188}你可以执行像是 `foo=bar`
{2209}{2341}并且我们可以通过 `$foo` 操作 `foo` 的值
{2365}{2430}它是 `bar`，完美~
{2455}{2533}你需要多加注意的一点是
{2534}{2601}当你面对着 bash 的时候[*]
{2602}{2647}空格至关重要[*]
{2648}{2735}主要是因为空格是个保留字
{2736}{2809}它的用途是分隔参数
{2810}{2926}例如，一些像是 `foo = bar` 的操作不管用
{2939}{3065}Shell 会告诉你它为什么无法生效 # REVIEW
{3066}{3118}这是它说因为 `foo` 命令无法生效
{3127}{3188}比如这里提示 `foo` 不存在
{3189}{3284}实际发生的是，我们没有将 `bar` 赋给 `foo`
{3309}{3495}而是用 `=` 和 `bar` 作为参数调用了 `foo` 程序
{3537}{3649}通常，你需要特别关注这类问题
{3657}{3718}比如说一些带有空格的文件名
{3719}{3919}你需要小心地把他们用引号引起来
{3920}{4036}让我们更深入些，探讨一下怎样在 bash 中处理字符串
{4037}{4095}我们有两种定义字符串的方法：
{4096}{4221}可以用双引号定义字符串
{4222}{4345}或者可以用单……
{4346}{4372}呃，对不起
{4402}{4440}使用单引号（定义）
{4507}{4591}虽然对于纯文本字符串，这两种方式是等价的
{4592}{4669}但是对于其余的字符串，则不相同
{4670}{4899}例如,我们执行 `echo "Value is $foo"`
{4920}{5034}其中 `$foo` 将被展开为字符串
{5035}{5131}并且替换掉 Shell 中 `foo` 变量的值
{5140}{5297}如果我们用单引号来重复实验
{5298}{5368}我们仅仅会得到原样的 `$foo`
{5381}{5456}单引号中的变量将不会被替换
{5460}{5534}脚本真的十分易于编写
{5543}{5646}这个就好比…它有点像你更熟悉的 Python # REVIEW
{5658}{5722}你可能没意识到这点
{5738}{5832}这就是给变量赋值的方式
