【595】然后，如果要更新它的话

用这个 `updatedb` 命令

它就会借助 cron 去更新数据库。[*] # REVIEW 
*cron 是 UNIX 下一个基于时间的任务管理系统，可以运行定期任务。

另外，查找文件是很有门道的

实际上，有时你不关心文件本身

而是文件的内容

这方面可以用前面见过的 `grep` 命令

比如 `grep foobar mcd.sh`

找到了

【603】如果你还是想递归当前目录结构

去查找更多的文件该怎么办

你不会愿意亲手干苦活的

我们可以用 `find` 命令结合 `-exec`

但 `grep` 有一个大写 `-R` 的 flag

是可以找遍整个目录的

啊，应该是这样儿

它告诉我们，噢

`example.sh` 中有包含 `foobar` 的行

在这三个行的位置都有

并且这两个位置也有 `foobar`

【612】这个挺省事的

主要是当你记得你用一些程序语言

写了一些代码的时候

你知道它就在你文件系统的某处躺着

但你就是想不起来

用这招就可以快速搜索

比如我可以快速搜索草稿文件夹里

所有我用了 `request` 库的 Python 代码

【621】如果我执行命令

就能查到这些文件，精确到匹配的行

比起用 `grep`，虽然它挺好

你也可以……我用了 `ripgrep`

原理是一样的，但是它也是

加了亿点点细节

比如代码彩色和文件处理啥的

也有 Unicode 支持

【629】而且跑的还快

所以它没为了这些花招拖慢速度

还有很多有用的 flag

比如说你想，哦，我想要点上下文

这样就是结果附近的五行

你就能知道那个 `import` 大概在哪

它周围都是什么代码

【635】这里找这个 `import` 不怎么实用

但是比如，你要查你在哪调用了函数

它就很给力

我们也可以搜索，比如说

一个更高级的用法

解释一下，`-u` 是不忽略隐藏文件[*]
*神奇的双重否定？？

有时候你想忽略隐藏文件

但如果你想查找配置（config）文件

【643】它们大多是默认隐藏的，这样子

然后，这里不是打印匹配内容

而我们要求它，呃，这大概是

我觉得 `grep` 做不到的

就是，我要你打印出所有

不匹配这个模式的内容

【648】这么做可能挺奇怪的

接着往下看……

这里这个模式（pattern）是一个

小巧的正则表达式[*]
*英文为 regex（regular expression），是一种匹配字符串的模式

意思是，匹配行首有 `#!` 的内容

这是个 `shebang`[*]
*是 Linux/UNIX 系统里的一种「魔法行」，具体移步搜索

也就是说我们在搜索没有 shebang 的文件

【655】这里还给了一个 `-t sh` 是说

只搜索 `.sh` （后缀名）的文件

因为实际来讲 Python 或者文本文件

少了 shebang 也没问题

这里它告诉我们

「哦，`mcd.sh` 明显少了个 shebang」

【660】我们还可以……它有一些好用的 flag

比如加入这个 `--stats` flag

还是会得到这些结果

不过它也会告诉我们 # REVIEW

比如成功匹配了多少行

查找了多少行多少文件

打印了多少 byte，等等

类似 `fd` 这种，有时候单会一个工具

其实不是很好

【669】实际上有很多类似 `ripgrep` 的工具

比如 `ack`，也是 `grep` 一个替代

还有 `ag`，那个银子搜索器[*] # REVIEW
*这个工具的标语就是「The Silver Searcher」，疑似借梗漫威快银

这些基本都是可替换的

有可能你用某个操作系统

发现它有某一个，没有另一个

只要知道你可以用这些工具就行

最后我想讲讲，怎么去做一些

不是去找文件或者代码

【680】而是找一些已经运行过的命令 # REVIEW

首先，显然可以用上箭头

慢慢儿翻你的历史记录

你可能也觉得，这不是很有效率

所以 bash 有一些更简单的方法

有个 `history` 命令

它会打印出你的命令历史记录

这里我用的 zsh，所以只会打印一部分

如果我想从开头全打印出来

这就不管是啥，都给打印出来了

因为这记录挺多的

【690】比如我只关心用了 `convert` 的命令

它把某种类型的文件转到另一种

呃 抱歉，是图片类型（而非所有文件）

这里就是所有的结果

所有匹配上这个子字符串的

更进一步，基本上所有 Shell 

默认都会把 `Ctrl`+`R` 这个组合键

设成后向搜索（backward search） # REVIEW

这里我们打开后向搜索

然后输入 `convert` 

就会找到与之匹配的命令

如果我们接着按 `Ctrl`+`R`

就会倒着往前搜索匹配的命令

也可以重新执行命令

另一个相关的是

【705】你可以用这个叫 `fzf` 的高级货

它就是一个模糊搜索工具

像是一个交互式的 `grep`

举个栗子，先 `cat` 一下我们这个

`example.sh`

就会打印到标准输出

然后我们用管道连到 `fzf` 上

先是显示出所有行

然后可以实时地输入要找的字符串

`fzf` 有一个好，就是

如果你打开默认绑定，它会绑定到

【716】Shell 的 `Ctrl`+`R` 执行上

然后你就可以动态的查看

历史记录里转换 `favicon` 的命令

它还是模糊匹配的

比起在 `grep` 里默认你得

写正则表达式才能搞定这种情况

这里就只打 `convert` 和 `favicon`

它就能尝试最优的扫描策略

在给定的行里匹配出来

最后就是这个工具

你们已经看到了我一直用的

【726】免去打那些又臭又长的命令

就是这个历史记录子串查找[*]
*查找历史记录中，当前输入是其子串的命令

当我在 Shell 里输入的时候

（呃，这个忘记介绍了）

（就是 fish，我以为我提到过的）[*]
*fish 和 zsh 也是一种 Shell

fish 和 zsh 都有很好的实现

它们可以，当你打字的时候

动态搜索你的历史记录

找到前缀相符的一个命令

如果匹配的那条不相符了也会变化

【738】如果你按一下右箭头

就能选中这个命令，就可以重新执行

我们已经见识了一大堆东西了

我觉得我还剩下几分钟

我打算讲几个工具

可以快速列出目录和定位目录的

确实可以用 `-R` 递归列出目录结构

但是这样不是很好受

呃 我轻易读不懂这一堆鬼玩意

有个叫 `tree` 的工具可以

用比较友好的格式打印这些东西

它也会用彩色文本，基于……

【746】就比如说 `foo` 是蓝的

代表是个目录

这个是红的，因为有执行权限

我们还可以再深入些

有些好用的，比如最近有个

`broot`，也是做差不多的事情

但是比起列出所有文件

比如说在 `bar` 里我们有

【752】`a` 一直到 `j` 这些文件

它会提示「还有更多文件，未列出」

我还可以开始输入，它也会

模糊匹配这些文件

我可以快速的选择和定位

所以还是说

知道有这些东西挺好

你就不会浪费太多时间

【760】还有就是，我记得我装了

也是一个，你可能觉得操作系统该带的 # REVIEW

比如 Nautilus 或者 mac 的访达[*]
*前者是 GNOME 的文件管理器，后者是 macOS 的

有一个交互式的界面

你可以用箭头定向，浏览

这也许有点过犹不及了

但如果在里面走一圈 # REVIEW

你能够很快速地理解目录结构

而且基本所有这些工具

去看看选项列表

它都可以让你编辑和复制文件什么的

最后附加一项就是你怎么

去到一个位置

【769】我们有 `cd`，挺好用的

可以让你进入很多地方

但是如果你能快速去到

你最近访问的，或者经常访问的地方

还是挺美妙的

这个有挺多实现方式的

你可以考虑，哦，我可以做标签

我可以在 Shell 里设置别名

这个挑时间会讲

【778】还有符号链接……

不过当前来说

写了这些工具的程序员们

他们搞出了一个特别好的方式

有一个是用叫「自动跳转」的…… # REVIEW

……也许我这里没有……？

呃啊。没事儿，我会在讲到

命令行环境的时候再讲

我觉得大概是我禁用了 `Ctrl`+`R`

影响到了脚本的其他部分

我认为现在如果任何人

【787】有相关问题的话

如果有东西我没讲清楚的话

我非常乐于解答

没有的话，我们搞了一堆习题

差不多都是这些主题的

我们鼓励你去做一下

以及办公时间来找我们

我们可以帮你搞明白习题

或者没说清楚的一些 bash 的细节