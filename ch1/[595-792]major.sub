{64877}{64977}然后，如果要更新它的话
{64978}{65080}用这个 `updatedb` 命令
{65081}{65265}通常由 cron 定期执行来更新数据库。[*] # REVIEW 
{65310}{65384}另外，查找文件是很有门道的
{65385}{65510}实际上，有时你不关心文件本身
{65511}{65573}而是文件的内容
{65604}{65576}这方面可以用前面见过的 `grep` 命令
{65577}{65919}比如 `grep foobar mcd.sh`
{65920}{65945}找到了
{65964}{66132}如果你还是想递归当前目录结构
{66133}{66177}去查找更多的文件该怎么办
{66178}{66271}你不会愿意亲手干苦活的
{66274}{66331}我们可以用 `find` 命令结合 `-exec`
{66340}{66444}但 `grep` 有一个大写 `-R` 的 flag
{66445}{66604}是可以找遍整个目录的
{66605}{66665}啊，应该是这样儿
{66688}{66723}它告诉我们，噢
{66724}{66830}`example.sh` 中有包含 `foobar` 的行
{66831}{66884}在这三个行的位置都有
{66885}{66948}并且这两个位置也有 `foobar`
{67031}{67078}这个挺省事的
{67079}{67213}主要是当你记得你用一些程序语言
{67214}{67282}写了一些代码的时候
{67283}{67366}你知道它就在你文件系统的某处躺着
{67367}{67410}但你就是想不起来
{67411}{67477}用这招就可以快速搜索
{67486}{67598}比如我可以快速搜索草稿文件夹里
{67674}{67969}所有我用了 `request` 库的 Python 代码
{67981}{68009}如果我执行命令
{68010}{68200}就能查到这些文件，精确到匹配的行
{68201}{68293}比起用 `grep`，虽然它挺好
{68294}{68388}你也可以……我用了 `ripgrep`
{68396}{68527}原理是一样的，但是它也是
{68528}{68583}加了亿点点细节
{68584}{68788}比如代码彩色和文件处理啥的
{68789}{68855}也有 Unicode 支持
{68864}{68914}而且跑的还快
{68915}{69037}所以它没为了这些花招拖慢速度
{69100}{69159}还有很多有用的 flag
{69160}{69318}比如说你想，哦，我想要点上下文
{69395}{69513}这样就是结果附近的五行
{69521}{69623}你就能知道那个 `import` 大概在哪
{69624}{69692}它周围都是什么代码
{69696}{69735}这里找这个 `import` 不怎么实用
{69736}{69825}但是比如，你要查你在哪调用了函数
{69826}{69932}它就很给力
{69963}{70175}我们也可以搜索，比如说
{70176}{70277}一个更高级的用法
{70278}{70484}解释一下，`-u` 是不忽略隐藏文件[*]
{70485}{70673}有时候你想忽略隐藏文件
{70674}{70794}但如果你想查找配置（config）文件
{70795}{70841}它们大多是默认隐藏的，这样子
{70842}{70948}然后，这里不是打印匹配内容
{70961}{71026}而我们要求它，呃，这大概是
{71027}{71129}我觉得 `grep` 做不到的
{71130}{71231}就是，我要你打印出所有
{71232}{71320}不匹配这个模式的内容
{71336}{71408}这么做可能挺奇怪的
{71409}{71452}接着往下看……
{71453}{71496}这里这个模式（pattern）是一个
{71510}{71554}小巧的正则表达式[*]
{71563}{71697}意思是，匹配行首有 `#!` 的内容
{71721}{71743}这是个 `shebang`[*]
{71744}{71912}也就是说我们在搜索没有 shebang 的文件
{71923}{72039}这里还给了一个 `-t sh` 是说
{72040}{72106}只搜索 `.sh` （后缀名）的文件
{72107}{72233}因为实际来讲 Python 或者文本文件
{72234}{72267}少了 shebang 也没问题
{72281}{72305}这里它告诉我们
{72306}{72377}「哦，`mcd.sh` 明显少了个 shebang」
{72448}{72553}我们还可以……它有一些好用的 flag
{72554}{72633}比如加上这个 `--stats` flag
{72871}{72945}它也会得到这些结果
{72946}{73054}不过它还会告诉我们 # REVIEW
{73055}{73148}比如成功匹配了多少行
{73149}{73231}查找了多少行多少文件
{73232}{73277}打印了多少 byte，等等
{73323}{73422}类似 `fd` 这种，有时候单会一个工具
{73465}{73522}其实不是很好
{73523}{73628}实际上有很多类似 `ripgrep` 的工具
{73629}{73751}比如 `ack`，也是 `grep` 一个替代
{73764}{73893}还有 `ag`，那个“银子”搜索器[*] # REVIEW
{73894}{73973}这些基本都是可替换的
{73974}{74026}有可能你用某个操作系统
{74027}{74064}发现它有某一个，没有另一个
{74065}{74201}只要知道你可以用这些工具就行
{74243}{74325}最后我想讲讲，怎么去做一些
{74326}{74381}不是去找文件或者代码
{74382}{74528}而是找一些已经执行过的命令 # REVIEW
{74606}{74717}首先，显然可以用上箭头
{74734}{74847}慢慢儿翻你的历史记录
{74848}{74927}你可能也觉得，这不是很有效率
{74928}{75091}所以 bash 有一些更简单的方法
{75101}{75137}有个 `history` 命令
{75138}{75172}它会打印出你的命令历史记录
{75181}{75277}这里我用的 zsh，所以只会打印一部分
{75278}{75407}如果我想从开头全打印出来
{75415}{75550}这就不管是啥，都给打印出来了
{75552}{75622}因为这记录挺多的
{75623}{75745}比如我只关心用了 `convert` 的命令
{75746}{75867}它把某种类型的文件转到另一种
{75868}{75939}呃 抱歉，是图片类型（而非所有文件）
{75940}{76052}这里就是所有的结果
{76053}{76142}所有匹配上这个子字符串的
{76239}{76344}更进一步，基本上所有 Shell 
{76345}{76423}默认都会把 `Ctrl`+`R` 这个组合键
{76424}{76486}设成（按执行时间）倒序搜索（backward search） # REVIEW
{76487}{76537}这里我们打开倒序搜索
{76538}{76594}然后输入 `convert` 
{76595}{76684}就会找到与之匹配的命令
{76685}{76752}如果我们接着按 `Ctrl`+`R`
{76753}{76839}就会倒着往前搜索匹配的命令
{76840}{76954}也可以重新执行命令
{76978}{77116}另一个相关的是
{77117}{77198}你可以用这个叫 `fzf` 的高级货
{77199}{77279}它就是一个模糊搜索工具
{77280}{77410}像是一个交互式的 `grep`
{77464}{77587}举个栗子，先 `cat` 一下我们这个
{77588}{77677}`example.sh`
{77689}{77745}就会打印到标准输出
{77746}{77805}然后我们用管道连到 `fzf` 上
{77806}{77860}先是显示出所有行
{77861}{77998}然后可以实时地输入要找的字符串
{78030}{78111}`fzf` 有一个好，就是
{78112}{78199}如果你打开默认绑定，它会绑定到
{78200}{78410}Shell 的 `Ctrl`+`R` 执行上
{78411}{78557}然后你就可以动态的查看
{78558}{78645}历史记录里转换 `favicon` 的命令
{78668}{78746}它还是模糊匹配的
{78747}{78806}比起在 `grep` 里默认你得
{78807}{78970}写正则表达式才能搞定这种情况
{78907}{79046}这里就只打 `convert` 和 `favicon`
{79047}{79129}它就能尝试最优的扫描策略
{79130}{79194}在给定的行里匹配出来
{79266}{79343}最后就是这个工具
{79344}{79407}你们已经看到了我一直用的
{79408}{79480}免去打那些又臭又长的命令
{79481}{79575}就是这个历史记录子串查找[*]
{79576}{79677}当我在 Shell 里输入的时候
{79678}{79784}（呃，这个忘记介绍了）
{79785}{79881}（就是 fish，我以为我提到过的）[*]
{79882}{79951}fish 和 zsh 都有很好的实现
{79986}{80060}它们可以，当你打字的时候
{80061}{80157}动态搜索你的历史记录
{80158}{80232}找到前缀相符的一个命令
{80270}{80502}如果匹配的那条不相符了也会变化
{80503}{80560}如果你按一下右箭头
{80561}{80667}就能选中这个命令，就可以重新执行
{81209}{81268}我们已经见识了一大堆东西了
{81269}{81346}我觉得我还剩下几分钟
{81347}{81470}我打算讲几个工具
{81471}{81599}可以快速列出目录和定位目录的
{81600}{81911}确实可以用 `-R` 递归列出目录结构
{81912}{81983}但是这样不是很好受
{81984}{82057}呃 我轻易读不懂这一堆鬼玩意
{82104}{82203}有个叫 `tree` 的工具可以
{82204}{82373}用比较友好的格式打印这些东西
{82374}{82427}它也会用彩色文本，基于……
{82428}{82478}就比如说 `foo` 是蓝的
{82479}{82549}代表是个目录
{82550}{82646}这个是红的，因为有执行权限
{82671}{82727}我们还可以再深入些
{82728}{82856}有些好用的，比如最近有个
{82857}{82933}`broot`，也是做差不多的事情
{82934}{83051}但是比起列出所有文件
{83052}{83097}比如说在 `bar` 里我们有
{83098}{83152}`a` 一直到 `j` 这些文件
{83153}{83230}它会提示「还有更多文件，未列出」
{83264}{83346}我还可以开始输入，它也会
{83347}{83451}模糊匹配这些文件
{83452}{83542}我可以快速的选择和定位
{83563}{83610}所以还是说
{83611}{83711}知道有这些东西挺好
{83712}{83880}你就不会浪费太多时间
{83947}{84013}还有就是，我记得我装了
{84014}{84150}也是一个，你可能希望你的操作系统该带的 # REVIEW
{84151}{84255}比如 Nautilus 或者 mac 的访达[*]
{84256}{84443}有一个交互式的界面
{84444}{84574}你可以用箭头定向，浏览
{84602}{84633}这也许有点过犹不及了
{84634}{84723}但如果在里面走一圈 # REVIEW
{84724}{84835}你能够很快速地理解目录结构
{84844}{84899}而且基本所有这些工具
{84900}{84989}去看看选项列表
{84990}{85071}它都可以让你编辑和复制文件什么的
{85137}{85194}最后附加一项就是你怎么
{85195}{85239}去到一个位置
{85240}{85290}我们有 `cd`，挺好用的
{85291}{85445}可以让你进入很多地方
{85446}{85506}但是如果你能快速去到
{85507}{85706}你最近访问的，或者经常访问的地方
{85707}{85748}还是挺美妙的
{85764}{85864}这个有挺多实现方式的
{85865}{85926}你可以考虑，哦，我可以做标签
{85927}{86004}我可以在 Shell 里设置别名
{86005}{86071}这个挑时间会讲
{86072}{86112}还有符号链接……
{86140}{86191}不过当前来说
{86192}{86264}写了这些工具的程序员们
{86265}{86379}他们搞出了一个特别好的方式
{86416}{86506}有一个是用叫「autojump」的项目…… # REVIEW
{86507}{86570}……也许我这里没有……？
{86848}{86930}呃啊。没事儿，我会在讲到
{86931}{86974}命令行环境的时候再讲
{87064}{87170}我觉得大概是我禁用了 `Ctrl`+`R`
{87171}{87271}影响到了脚本的其他部分
{87285}{87347}我认为现在如果任何人
{87348}{87422}有相关问题的话
{87423}{87478}如果有东西我没讲清楚的话
{87479}{87537}我非常乐于解答
{87538}{87688}没有的话，我们搞了一堆习题
{87689}{87749}差不多都是这些主题的
{87750}{87801}我们鼓励你去做一下
{87802}{87878}以及办公时间来找我们
{87879}{87944}我们可以帮你搞明白习题
{87945}{88023}或者没说清楚的一些 bash 的细节