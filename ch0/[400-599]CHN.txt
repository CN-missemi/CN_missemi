【400】或者如果你想

你可以给程序一个绝对路径

因为如果你给了一个相对路径

会导致我在我的目录里运行

你在你其它的目录下运行

我可能可以正常运行但是你运行不了

【405】um，总的来说，我们运行程序的时候

程序会默认在当前目录运行

除非我们再给程序一个参数

其实运行在默认目录是相当方便的

因为这意味着我们不必给出复杂的完整路径

用到的只是文件名或者是当前目录

搞清楚我们当前目录里有啥很关键

【416】然后我们可以发现

`PWD` 命令能输出我们当前所在的目录

有个叫 `ls` 的命令能列出当前目录下的文件

如果我在这打上 `ls`

这就是当前目录下所有的文件，对吧

这是种方便在文件系统中快速查找的方法

你可以看到，如果我输入 `cd ..`

然后执行 `ls` 指令

会输出上一级目录下的文件

【426】我也可以 `ls` 一个 `..` 的参数

就像我给它一个路径一样

然后他就会 `ls` 上一级目录

而不是当前我所处的目录

或者直接 `ls` 上一级目录

如果我直接返回到根目录

你会发现根目录里有不同的路径

在这你可能不知道一个便捷的小技巧

你可以用两个特殊符号做点别的事

第一个，`~`

【436】`~` 可以把你带回用户目录

所以说 `~` 总是指向用户目录

你可以通过它到达用户目录相关的目录

所以我可以输入 `cd ~/dev/pdos/classes/missing-semester`

现在我就在这个目录里了

因为 `~` 在这代表 `/home/jon`

尤其在 `cd` 命令中还有一个很方便的参数 `-`

如果你运行 `cd -`

他会将当前目录跳转到你所处的上一个目录

所以如果我运行 `cd -`

【446】我就回到了根目录

如果我再执行一遍 `cd -`

我就回到了 `missing-semester` 这个文件夹

由此可见

这让你很方便的在两个不同文件夹之间切换

关于 `ls` 或者 `cd` 命令

还有一些你可能不知道的参数

目前为止

我们除了给出路径以外啥都没做

但是如果你想自己探索的话

【456】 你可以首先考虑 `ls` 一个路径

大多数程序采用一些 `flag`（标志）

和 `option`（选项）等作为参数

这些一般都以半角字符 `-` 开头

其中大多数程序都涵盖了 `--help` 这个函数

举个例子

如果你执行 `ls --help`

它会很贴心地输出一大堆关于 `ls` 指令的帮助信息

【466】 这些信息阐述了 `ls` 的用途

并且你可以给出的一堆 `option`

和一堆文件

阅读用法的时候

`...` 代表不填或一个或更多

`[]` 代表可 `option`

所以现在这里给出了一些 `option`

和一些可选的文档

显然它在告诉你这个程序会做什么

【476】并且特指了一些 `flag` 和 `option`

通常把一个 `-` 加上一个字母叫做一个 `flag`（选项）

或者把后面不跟没有数值的叫做 `flag`

而后面跟有一个值的叫做一个 `option`

举个例子，`-a` 和 `--all` 都叫 `flag`

而 `-C` 或 `--color` 都是 `option`

如果你向下翻得够远

你能发现一个 `-L` 的 `flag`

啊，翻车了

这个 `-L` 的 `flag` 是采用长列表格式[*]
*通常来说，这种说法意味着输出更多信息

【486】通常来说，这很方便

我们来看看它到底能做什么

如果我执行 `ls -L`

它仍然会输出当前路径下的一长串文件

但是给出了关于这些文件更多的信息

你会发现你以后会经常用到这个 `flag`

【496】因为它多给你的信息能提供很大的便利

让我们看看多出来的信息都有什么

首先，前面带 `d` 的这些条目

代表这里面还有些东西

举个例子，这个 `_data` 的条目就是一个目录

但 `404.html` 不是个目录，而是一个文件

【506】后面的字符代表文件被授予的权限

这就像我们之前看到的，我并不能 `cd` 一个指定的文件

或者我 `cd` 不了一个目录

这都是由特定文件或目录的权限决定的

阅读这一串字母的方法如下

把后面的 9 个字母分成三组

第一组代表权限被授予给了文件的所有者

你可以看到这些文件的所有者都是我

【516】第二组的三个字母代表给拥有这些文件的用户组的权限

也就是 `jon` 这个用户组

最后的一组字符是给非所有者的其他人的权限

这个目录某种意义上来说有些“无聊”

因为这个目录的所有者是我

但是如果我们执行 `cd /` 回到根目录

然后再 `ls -L`，会发现所有文件和目录的所有者都是 `root`

我们回到什么是根用户来

【529】你能发现这里的权限有点意思

这一组中的三个字母代表读取、写入和执行

这些对于文件和目录又有什么不同呢

对于文件，这就很显而易见了

如果你有读取权限

你就可以读取文件的内容

如果你有文件的写入权限

【539】你就可以保存，写入甚至是重写一遍

如果你有一个 `x`

你就可以执行这个文件

如果我们运行 `ls -l /bin`

啊，我说我是乱打的啊，应该是 `ls -l /usr/bin`

你会发现即使不是所有者都有全部的执行权限

这是因为，举例来说

我们希望这个电脑上的所有用户都能运行显示程序

【549】没有任何理由只让某一用户能运行

对于目录来说，这些权限会显得稍有不同

所以读取权限允许你看这个文件夹里有哪些东西

你可以把读取权限当成阅读这个目录的清单

这个权限允许你列出目录里的内容

【559】目录的写入权限就是你是否能够重命名、新建或者删除里面的文件

所以这也是一种权限

但是要注意到，这意味着如果你有文件的写入权限

但是你没有这个目录的写入权限

你就不能删除这个文件

即使你清空了文件的内容，你也不能删除它

因为这样做的话需要目录的写入权限

最后，目录的执行权限困扰了很多人

目录的执行权限通常来讲就是搜索

但这并不是一个容易理解的名字

它意味着你能不能进入这个目录

如果你想找个文件

或者打开这个目录、读取这个目录还是写入这个目录

甚至基础如 `cd` 这个目录

【579】你都必须有所有父目录及其自身的执行权限

举例来说，如果我想访问 `/usr/bin` 下的文件， 例如 `echo`

我必须拥有路径上所有目录的执行权限

并且还得拥有 `bin` 这个目录的执行权限

如果我没有全部的这些执行权限，我就无法访问这个文件

因为我无法通过任何方法进入这个目录

【589】另外你可能还会遇到另外一些字节

你可能会碰到 `s` 或 `t`

在这些清单里你可能还会看见 `l`

如果你对这些感到好奇的话，我们可以在工作时间聊聊

这些大多数对你在这堂课上学的东西都不是那么重要

但是了解它们会提高你的便利程度

所以如果你们实在好奇，你们可以自己查找相关资料

或者在工作时间来问我们

了解另外一些程序也能方便你自己

【599】噢，对不起，我忘了提到一点
