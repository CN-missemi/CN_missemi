好的，感谢大家的到来。

这门课是《计算机科学教育中缺失的一课》[*]
*（The Missing Semester of Your CS Education)

至少这是我们给这门课起的名字

如果你来这儿不是上这门课的

那你走错地儿了

先说一下，我们大约得讲一个小时

我想先和你们谈一下为什么我们开这门课

这门课源于 Anish, Jose 和我在做 MIT 很多课程的 TA[*] 时
*Teaching Assistant，助教

观察到的一个现象：

【13】 基本上，我们这些计算机科学家都清楚

计算机很善于处理重复性任务，把事情自动化

但是我们常常意识不到有很多工具

可以让我们的开发过程更好

我们用起电脑来可以更有效率

因为我们可以将电脑作为手上的一个利器

而不仅仅是用于建个网站或者写个软件这类事情

这门课就是试着告诉你这点，并做点儿尝试

介绍给你一些这样的工具，你用起来之后

可以在你生活、研究和学习上发挥很大的作用

在这门课里我们不仅想教你一些你有大致了解的工具

还希望教给你一点儿你之前不知道的工具

还有如何将这些工具结合起来

制造出一些你可能都想象不到的、更强大的东西

【36】你们应该知道这门课的结构

将是一系列，总共 11 次的一小时课

每个都涉及一个特定的主题

你还可以去看看课程网站

上面列出了课程列表和每场的日期

它们大致上将互相独立

所以你可以只来听你感兴趣的那些

但是，我们会假设你一直在跟着上课

所以我们讲到后面的时候，就比如说

我就不会一遍遍地教 bash 怎么用了

【50】上课的时候，我们也会立马把讲义、课程录像发到网上

当然我们现在还没上传，显然得等到上完课之后

将由我（Jon），Anish ，他坐在那个位置，还有 Jose 来上课

Jose[*] 今天没到场，不过他会上明天的课
*西班牙口音英语警告

提醒一下，在这门仅仅 11 × 1 小时的课里

我们会试图涉及很大的范围

所以我们的节奏相对会快些

但是如果你觉得跟不上了，别介意打断我们

【65】如果你觉得有什么东西值得多花点时间讲的

也请告诉我们

有问题也请打断我们

并且每次下课之后我们都在 32 号楼 9 层有办公时间

是在计算机科学楼，也就是 Stata Center （史塔特科技中心）[*]
*那个长得特别标新立异的解构主义建筑。搜个图片欣赏下？

如果你来 Gates Tower 九楼的休息室 [*]
*这楼从 4 层以上分成两半：Gates Tower 和 Dreyfoos Tower

你可以来做做我们每节课后给的练习

或者直接问我们别的问题，有关课上讲的内容的

或者怎么高效地利用电脑

【79】因为我们只有很有限的时间

我们不可能讲到所有工具的所有细节

只聚焦有趣的工具和怎么使用它们

我们也没必要深挖那些细节

搞明白它们是怎么运行的，或者使用上的微小细节

但是如果你对这些工具有问题，请来问我们

讲到的绝大部分工具的是我们用了成年累月的东西

我们也许能给告诉你拿这些工具

能做什么额外的有趣的活计

要利用我们在这儿上实体课的优势

我不太想说「让我们开足马力冲吧」

但是这门课要讲的，今天这一讲要讲的

是很多基础的东西

我们也会假设后面的课里你们都了解了这些

【100】比如怎么用 Shell 和你的终端（Terminal）

对于不熟悉这些的，我马上会解释这些是啥

然后我们就会很快速地狂奔到更高级的工具上

讲讲怎么用它们

现在已经可以从课程讲义上看到所有要讲的主题

【107】所以我们今天的课要讲 Shell

Shell 将会是你和电脑交互的最主要方式之一

一旦你想脱离开那些可视化的界面让你做的

然后去做点别的

其实可视化界面[*]挺受限的
*这里用了 Visual Interfaces，一般也说 GUI （Graphical User Interface）

【115】因为它们只让你做一些按钮啊，

滑条啊，输入框啊能按出来，输进去的事情

但这些基于文本的工具经常是能互相耦合的

也有无数种方式能把它们结合起来

或者写个程序让它们自动化

这就是这门课介绍命令行工具

和基于文本的工具的理由

【126】Shell 则是你去做这些活计的地方

对于不熟悉 Shell 的同学们

大多数平台都会提供某种 Shell[*]
*这里的 Shell 最好理解为命令行界面（CLI, Command Line Interface）

在 Windows 上基本是 Powershell[*]
*缩写 pwsh，Windows 7 之前没有内置 pwsh。详细请参看网络资料。

而且也有其他 Shell 可以用

在 Windows 和 Linux 上你会找到成堆的终端（Terminal）

这些是能显示 Shell 的（文本）窗口

【135】你能找到很多不同种类的 Shell

其中最普遍的是 bash，或者叫 born again shell

因为它非常普遍，我们这些课里就主要用它了

如果你用 MacOS，你大概也有 bash

【142】如果你打开终端（Terminal）应用看看

也许还是个旧版本的 (‾◡◝)

如果你想用哪个平台上课，随意

不过注意，在我们教课的时候

大部分内容会是以 Linux 为中心

尽管大部分工具在所有平台上都能用

如果你想安装一个终端和 Shell，却不知道该咋办

我们很乐意在办公时间教你

或者去网上搜搜也挺容易

比如输入你的平台，加上像是终端啊，这种关键词

就能找到教程

好，当你打开一个终端的时候

你会看到一个长得像这样的东西

也就是说通常是在顶上有单单一行

这个一般就叫 Shell Prompt[*] #REVIEW
*也就是 Shell 提示（符）/ 命令提示符

【159】你可以看到我的 Shell Prompt 看起来像这样

这里是我的用户名，还有我用的机器的名字

还有我当前所在路径（path）

我们晚一会儿再说说路径（path）

然后就是这个闪烁的东西，它在要求我输点啥

这个就是 Shell Prompt，用这个告诉 Shell 你想做什么

你可以自由地自定义这个 Prompt（提示窗口）

所以当你在你机器上打开它的时候

它可能不会长得和这个一样

如果你设置了一下，那可能会是这样

【172】或者会是各种千奇百怪的样子

这节课我们不会讲太多关于自定义 Shell 的东西

我们晚些时候再说

我们只讲怎么用 Shell 去做有用的事

这是你电脑上和 Shell 交互的主要文本界面

在 Shell Prompt 上你可以写命令

【182】命令相对都是一些直白的东西

比如，通常是带着参数（argument）执行程序

大概类似这样的事情 #REVIEW

嗯，有一个我们可以运行的程序是 `date`

【187】输入 `date` 然后按一下回车

不出所料，它会告诉你日期和时间

你也可以带着参数（arguments）执行一个程序

这是一种修改程序行为的方式

比如说有一个程序叫 `echo`

`echo` 只是打印出你传给它的参数

【195】而参数呢，则是一些紧随程序名后面的

用空格分隔开的东西

我们可以打出 `Hello` 然后它就会回显 `Hello`

也许你不会觉得很惊奇

【200】但这是参数最基础的运用了

你会注意到一件事就是

我提到参数是被空格分隔的

你也许会好奇，如果我想传一个多单词的参数会怎样

你可以拿引号把东西括起来

所以你可以像这样 `echo Hello` 空格 `world` 

这样 `echo` 程序会收到一个

【208】字符串参数 `"Hello world"`，中间还有个空格

呃，你也可以用单引号做这件事情

单双引号的区别

我们等到讲 bash scripting 的时候再说

你也可以用单转义字符（Escape character）

比如这样，`Hello\ World`

这样也能正常起作用

【217】关于如何给参数、变量转义，解析和加括号

我们之后会涉及到

不过别放在心上，这都是小菜一碟

只要记好用空格分隔参数就行

【223】因此如果你想做什么事情

比如建一个叫 my photos 的目录

你不能只是输入 `mkdir my photos`

这样系统会建立两个目录

一个叫 my，一个叫 photos

显然这不是你想要的

【229】现在你也许会好奇一点

Shell 是怎么知道这些程序在哪儿的

当我输入 `date` 或者 `echo` 的时候

Shell 怎么知道这些程序要做什么

答案就是你的程序，呃

【235】就是你的电脑，有很多内置（Built-in）程序

它们是系统自带的

就比如你的机器可能内嵌了终端程序

或者比如 Windows Explorer，或者某些浏览器

也内嵌了很多围绕终端工作的程序

这些程序位于你的文件系统（File System）

而 Shell 有办法知道某个程序存放在哪

说白了就是它有一个搜索程序的方法

这借助一个叫寒境，啊，环境变量的东西完成

环境变量就类似编程语言里的变量

说白了 Shell，或者就说 bash 本身

【253】就是一种程序设计语言

你输入的提示符（Prompt）不仅能带参运行程序

你也可以写出 while 循环，for 循环，条件

等等所有这些

甚至可以定义函数，甚至变量

所有这些你能在 Shell 里做的事情

关于 Shell Scripting 的下一讲会有涉及

现在我们先关注环境变量（Environment Variable）

【265】环境变量是 Shell 本就设定好的

无论何时启动 Shell 都无须重新设置

有一堆东西会被设定好

【270】比如哪里是 home 目录，你的用户名是什么

也有一个是为了做这件事情的

那就是 `PATH` 变量