{1}{1}29.970030
{40}{137}好的，感谢大家的到来。
{138}{262}这门课是《计算机科学教育中缺失的一课》[*]
{263}{319}至少这是我们给这门课起的名字
{320}{354}如果你来这儿不是上这门课的
{355}{393}那你走错地儿了
{394}{514}先说一下，我们大约得讲一个小时
{560}{677}我想先和你们谈一下为什么我们开这门课
{678}{869}这门课源于 Anish, Jose 和我在做 MIT 很多课程的 TA[*] 时'
{870}{958}观察到的一个现象：
{959}{1050}基本上，我们这些计算机科学家都清楚
{1051}{1162}计算机很善于处理重复性任务，把事情自动化
{1163}{1265}但是我们常常意识不到有很多工具
{1266}{1357}可以让我们的开发过程更好
{1358}{1437}我们用起电脑来可以更有效率
{1446}{1548}因为我们可以将电脑作为手上的一个利器
{1549}{1673}而不仅仅是用于建个网站或者写个软件这类事情
{1674}{1805}这门课就是试着告诉你这点，并做点儿尝试
{1806}{1885}介绍给你一些这样的工具，你用起来之后
{1886}{2037}可以在你生活、研究和学习上发挥很大的作用
{2056}{2316}在这门课里我们不仅想教你一些你有大致了解的工具
{2317}{2435}还希望教给你一点儿你之前不知道的工具
{2436}{2518}还有如何将这些工具结合起来
{2519}{2675}制造出一些你可能都想象不到的、更强大的东西
{2676}{2744}你们应该知道这门课的结构
{2745}{2828}将是一系列，总共 11 次的一小时课
{2829}{2937}每个都涉及一个特定的主题
{2938}{3026}你还可以去看看课程网站
{3027}{3137}上面列出了课程列表和每场的日期
{3138}{3204}它们大致上将互相独立
{3205}{3293}所以你可以只来听你感兴趣的那些
{3294}{3385}但是，我们会假设你一直在跟着上课
{3386}{3446}所以我们讲到后面的时候，就比如说
{3447}{3540}我就不会一遍遍地教 bash 怎么用了
{3584}{3857}上课的时候，我们也会立马把讲义、课程录像发到网上
{3858}{4012}当然我们现在还没上传，显然得等到上完课之后
{4013}{4181}将由我（Jon），Anish ，他坐在那个位置，还有 Jose 来上课
{4182}{4273}Jose[*] 今天没到场，不过他会上明天的课
{4290}{4387}提醒一下，在这门仅仅 11 × 1 小时的课里
{4388}{4460}我们会试图涉及很大的范围
{4461}{4563}所以我们的节奏相对会快些
{4564}{4709}但是如果你觉得跟不上了，别介意打断我们
{4710}{4786}如果你觉得有什么东西值得多花点时间讲的
{4787}{4816}也请告诉我们
{4817}{4865}有问题也请打断我们
{4866}{5056}并且每次下课之后我们都在 32 号楼 9 层有办公时间
{5057}{5114}是在计算机科学楼，也就是 Stata Center （史塔特科技中心）[*]
{5122}{5247}如果你来 Gates Tower 九楼的休息室 [*]
{5248}{5377}你可以来做做我们每节课后给的练习
{5378}{5509}或者直接问我们别的问题，有关课上讲的内容的
{5510}{5593}或者怎么高效地利用电脑
{5650}{5763}因为我们只有很有限的时间
{5764}{5875}我们不可能讲到所有工具的所有细节
{5876}{6037}只聚焦有趣的工具和怎么使用它们
{6038}{6111}我们也没必要深挖那些细节
{6112}{6196}搞明白它们是怎么运行的，或者使用上的小细节
{6197}{6290}但是如果你对这些有问题，请来问我们
{6291}{6384}讲到的绝大部分工具的是我们用了成年累月的东西
{6385}{6442}我们也许能给告诉你拿这些工具
{6443}{6507}能做什么额外的有趣的活计
{6508}{6584}要利用我们在这儿上实体课的优势
{6615}{6739}我不太想说「让我们开足马力冲吧」
{6740}{6852}但是这门课要讲的，今天这一讲要讲的
{6853}{6910}是很多基础的东西
{6911}{6988}我们也会假设后面的课里你们都了解了这些
{6989}{7059}比如怎么用 Shell 和你的终端（Terminal）
{7060}{7137}对于不熟悉这些的，我马上会解释这些是啥
{7138}{7253}然后我们就会很快速地狂奔到更高级的工具上
{7254}{7280}讲讲怎么用它们
{7281}{7395}现在已经可以从课程讲义上看到所有要讲的主题
{7423}{7572}所以我们今天的课要讲 Shell
{7573}{7722}Shell 将会是你和电脑交互的最主要方式之一
{7723}{7856}一旦你想脱离开那些可视化的界面让你做的
{7857}{7901}然后去做点别的
{7902}{8037}其实可视化界面[*]挺受限的
{8038}{8108}因为它们只让你做一些按钮啊，
{8109}{8161}滑条啊，输入框啊能按出来，输进去的事情
{8162}{8311}但这些基于文本的工具经常是能互相耦合的
{8312}{8416}也有无数种方式能把它们结合起来
{8417}{8459}或者写个程序让它们自动化
{8460}{8566}这就是这门课介绍命令行工具
{8567}{8600}和基于文本的工具的理由
{8611}{8717}Shell 则是你去做这些活计的地方
{8718}{8797}对于不熟悉 Shell 的同学们
{8798}{8879}大多数平台都会提供某种 Shell[*]
{8880}{8955}在 Windows 上基本是 Powershell[*]
{8956}{9030}而且也有其他 Shell 可以用
{9031}{9137}在 Windows 和 Linux 上你会找到成堆的终端（Terminal）
{9138}{9219}这些是能显示 Shell 的（文本）窗口
{9220}{9298}你能找到很多不同种类的 Shell
{9299}{9412}其中最普遍的是 bash，或者叫 born again shell
{9413}{9570}因为它非常普遍，我们这些课里就主要用它了
{9578}{9662}如果你用 MacOS，你大概也有 bash
{9663}{9708}如果你打开终端（Terminal）应用看看
{9709}{9749}也许还是个旧版本的 (‾◡◝)
{9750}{9854}如果你想用哪个平台上课，随意
{9855}{9906}不过注意，在我们教课的时候
{9907}{9986}大部分内容会是以 Linux 为中心
{9987}{10061}尽管大部分工具在所有平台上都能用
{10062}{10230}如果你想安装一个终端和 Shell，却不知道该咋办
{10231}{10308}我们很乐意在办公时间教你
{10309}{10419}或者去网上搜搜也挺容易
{10420}{10523}比如输入你的平台，加上像是终端啊，这种关键词
{10524}{10559}就能找到教程
{10578}{10722}好，当你打开一个终端的时候
{10723}{10794}你会看到一个长得像这样的东西
{10795}{10904}也就是说通常是在顶上有单单一行
{10905}{10971}这个一般就叫 Shell Prompt[*]  #REVIEW
{10972}{11038}你可以看到我的 Shell Prompt 看起来像这样
{11039}{11128}这里是我的用户名，还有我用的机器的名字
{11129}{11189}还有我当前所在路径（path）
{11190}{11249}我们晚一会儿再说说路径（path）
{11250}{11369}然后就是这个闪烁的东西，它在要求我输点啥
{11370}{11484}这个就是 Shell Prompt，用这个告诉 Shell 你想做什么
{11485}{11595}你可以自由地自定义这个 Prompt（提示窗口）
{11596}{11629}所以当你在你机器上打开它的时候
{11630}{11671}它可能不会长得和这个一样
{11672}{11790}如果你设置了一下，那可能会是这样
{11791}{11862}或者会是各种千奇百怪的样子
{11885}{11984}这节课我们不会讲太多关于自定义 Shell 的东西
{11985}{11985}我们只讲怎么用 Shell 去做有用的事|这节课我们不会讲太多关于自定义 Shell 的东西
{11986}{12031}我们晚些时候再说
{12032}{12142}我们只讲怎么用 Shell 去做有用的事
{12192}{12340}这是你电脑上和 Shell 交互的主要文本界面
{12341}{12412}在 Shell Prompt 上你可以写命令
{12413}{12498}命令相对都是一些直白的东西
{12499}{12622}比如，通常是带着参数（argument）执行程序
{12625}{12656}大概类似这样的事情 #REVIEW
{12657}{12743}嗯，有一个我们可以运行的程序是 `date`
{12744}{12785}输入 `date` 然后按一下回车
{12786}{12862}不出所料，它会告诉你日期和时间
{12863}{12954}你也可以带着参数（arguments）执行一个程序
{12955}{13069}这是一种修改程序行为的方式
{13084}{13159}比如说有一个程序叫 `echo`
{13160}{13258}`echo` 只是打印出你传给它的参数
{13259}{13351}而参数呢，则是一些紧随程序名后面的
{13352}{13390}用空格分隔开的东西
{13391}{13507}我们可以打出 `Hello` 然后它就会回显 `Hello`
{13508}{13567}也许你不会觉得很惊奇
{13568}{13634}但这是参数最基础的运用了
{13645}{13697}你会注意到一件事就是
{13698}{13761}我提到参数是被空格分隔的
{13762}{13867}你也许会好奇，如果我想传一个多单词的参数会怎样
{13868}{13905}你可以拿引号把东西括起来
{13906}{14030}所以你可以像这样 `echo Hello` 空格 `world`
{14031}{14094}这样 `echo` 程序会收到一个
{14095}{14210}字符串参数 `"Hello world"`，中间还有个空格
{14229}{14291}呃，你也可以用单引号做这件事情
{14292}{14363}单双引号的区别
{14364}{14442}我们等到讲 bash scripting 的时候再说
{14475}{14542}你也可以用单转义字符（Escape character）
{14555}{14641}比如这样，`Hello\ World`
{14642}{14689}这样也能正常起作用
{14711}{14907}关于如何给参数、变量转义，解析和加括号
{14908}{14964}我们之后会涉及到
{14965}{15053}不过别放在心上，这都是小菜一碟
{15054}{15160}只要记好用空格分隔参数就行
{15161}{15208}因此如果你想做什么事情
{15209}{15272}|比如建一个叫 my photos 的目录
{15273}{15370}你不能只是输入 `mkdir my photos`
{15371}{15405}这样系统会建立两个目录
{15406}{15456}一个叫 my，一个叫 photos
{15457}{15493}显然这不是你想要的
{15556}{15669}现在你也许会好奇一点
{15670}{15737}Shell 是怎么知道这些程序在哪儿的
{15738}{15818}当我输入 `date` 或者 `echo` 的时候
{15819}{15929}Shell 怎么知道这些程序要做什么
{15937}{16004}答案就是你的程序，呃
{16005}{16064}就是你的电脑，有很多内置（Built-in）程序
{16065}{16102}它们是系统自带的
{16103}{16223}就比如你的机器可能内嵌了终端程序
{16224}{16395}或者比如 Windows Explorer，或者某些浏览器
{16396}{16491}也内嵌了很多围绕终端工作的程序
{16492}{16571}这些程序位于你的文件系统（File System）
{16572}{16741}而 Shell 有办法知道某个程序存放在哪
{16742}{16810}说白了就是它有一个搜索程序的方法
{16811}{16985}这借助一个叫寒境，啊，环境变量的东西完成
{16986}{17123}环境变量就类似编程语言里的变量
{17124}{17237}说白了 Shell，或者就说 bash 本身
{17238}{17297}就是一种程序设计语言
{17298}{17447}你输入的提示符（Prompt）不仅能带参运行程序
{17448}{17588}你也可以写出 while 循环，for 循环，条件
{17589}{17605}等等所有这些
{17606}{17668}甚至可以定义函数，甚至变量
{17669}{17715}所有这些你能在 Shell 里做的事情
{17716}{17825}关于 Shell Scripting 的下一讲会有涉及
{17861}{17981}现在我们先关注环境变量（Environment Variable）
{17982}{18028}环境变量是 Shell 本就设定好的
{18029}{18118}无论何时启动 Shell 都无须重新设置
{18119}{18170}有一堆东西会被设定好
{18171}{18302}比如哪里是 home 目录，你的用户名是什么
{18303}{18394}也有一个是为了做这件事情的
{18395}{18454}那就是 `PATH` 变量
{18458}{18528}当我输入 `$PATH`
{18529}{18638}这里会输出一些我电脑上的目录
{18639}{18738}这些目录是 Shell 寻找程序时所查找的目录
{18759}{18817}也许你会觉得
{18818}{18944}这一大行被冒号分隔的东西看起来很费眼睛
{18945}{19003}但重要的事情在于
{19004}{19083}当你输入一个程序名称的时候
{19084}{19203}你的电脑会在这个列表中的每个目录里查找
{19204}{19419}名字与你所输入指令相同的一个程序或一个文件
{19444}{19505}刚刚的例子里当我试图运行 `date` 或者 `echo` 的时候
{19506}{19568}电脑会遍历这些目录
{19569}{19666}直到它找到一个包含 `date` 或者 `echo` 的程序的目录
{19667}{19696}然后电脑就会运行找到的这个程序
{19712}{19773}如果我们想要知道电脑具体运行了哪一个目录里的程序
{19774}{19844}我们有一个叫做 `which` 的指令，它可以整这个活
{19845}{19906}所以我现在可以输入 `which echo
{19907}{19949}然后它就会告诉我|
{19950}{20025}如果我要运行一个叫 `echo` 的程序
{20026}{20063}我就会运行——这个东西
{20100}{20194}这里有必要插入讲一下什么是路径（path）
{20207}{20334}路径是用来描述你的计算机里的文件的位置的东西
{20335}{20403}在 Linux 或者 Mac OS 上
{20404}{20509}路径被用一连串的斜杠分隔
{20520}{20669}你在这里可以看到，这个路径的起点在根目录
{20670}{20733}目录的开头有斜杠来指示它开始的地方：
{20734}{20824}整个文件系统的最顶层
{20840}{20946}然后我们进到叫做 `usr` 的目录
{20961}{21026}然后进到叫做 `bin` 的目录
{21027}{21086}然后找到名叫 `echo` 的文件
{21111}{21233}在 Windows 里，这样的路径一般以反斜杠而非斜杠分隔
{21245}{21316}在 Linux 和 MacOS 上
{21317}{21383}所有东西都在一个叫根（root）的空间下面的某处
{21384}{21484}所以所有以斜杠开头的路径都是绝对路径
{21491}{21617}在 Windows 下，每一个分区都有一个根
{21618}{21754}所以你可能见过类似 `C:\` 或者 `D:\` 的东西
{21755}{21905}所以 Windows 里每一个驱动器（硬盘）下
{21906}{21973}都有独立的一套文件系统的层次结构
{21974}{22017}相比之下，在 Linux 和 MacOS 下
{22018}{22077}所有东西都在一个命名空间里
{22123}{22193}你会注意到我提到了“绝对路径”这个词
{22194}{22253}可能有人会不知道这是什么意思，解释一下：
{22254}{22464}绝对路径是可以绝对准确地确定一个文件的位置的路径
{22465}{22501}所以在屏幕上这个例子里面
{22502}{22595}这行东西唯一地指向一个叫 `echo` 的独一无二的文件
{22596}{22691}它表示了到这个文件的完整路径
{22719}{22818}但是也有一种称作“相对路径”的东西
{22828}{22963}“相对路径”是相对于你当前所在位置的路径
{22993}{23083}所以要找出我们当前的位置在哪里
{23084}{23159}我们可以输入 `pwd`，意思是
{23169}{23219}当前工作目录（present working directory）……
{23220}{23237}当前（present）？
{23253}{23284}打印工作目录（print working directory）
{23321}{23363}所以如果我输入 `pwd`
{23364}{23474}它就会输出当前我所在的目录路径
{23492}{23602}我现在的位置是 `root` 下的 `home` 文件夹
{23603}{23676}其中的 `jon` 里，其中的 `dev` 里
{23677}{23713}然后再叭啦叭啦叭啦这一串的里面
{23714}{23862}我可以选择改变我的当前工作目录
{23863}{23968}所有相对路径都是相对当前工作目录的
{23969}{24036}基本上也就是说是相对于你所在的地方
{24058}{24175}举个例子，我可以输入 `cd /home`
{24176}{24229}`cd` 是改变目录（change directory）的意思
{24230}{24321}这是改变当前工作目录的一种方法
{24329}{24386}在这个例子里，我把当前工作目录转到 `home`
{24387}{24498}你可以看到我的 Shell 的提示也改变了
{24499}{24552}它说我在 `home` 里面
{24553}{24643}它只会给出路径的最后一段的名称
{24645}{24758}不过也可以设置下，使得它总能显示当前的完整路径
{24813}{24877}如果现在我再输入 `pwd`
{24878}{24937}它会告诉我我在 `/home` 里
{24959}{25054}同时也有一对特殊的目录
{25060}{25122}`.`（点） 和 `..`（点点）
{25138}{25313}点表示当前目录，而点点表示上一层目录
{25314}{25402}通过这种方式，你可以容易地访问整个系统
{25409}{25502}举个例子，如果我输入 `cd ..`
{25525}{25582}它会告诉我我现在在 `/`
{25592}{25645}所以我现在在整个文件系统的根
{25646}{25720}我刚刚在 `/home`，现在在 `/` 了
{25774}{25868}然后如果我输入 `pwd`，运行结果看起来也很对`
{25903}{25998}我也可以使用相对路径来向下访问文件系统
{25999}{26071}所以我可以输入 `cd ./home`
{26072}{26216}然后就会 cd 到当前的目录下的 `home` 目录
{26258}{26315}这个操作就把我带回到了 `/home` 里
{26316}{26408}然后如果我现在试着再输入一次 `cd ./home`
{26409}{26465}它会告诉我当前目录下没有 `home` 目录
{26466}{26557}我现在在刚刚 cd 进的文件夹里
{26701}{26843}一路 cd 进刚刚我在的那一个文件夹里
{26879}{26937}就可以用相对路径
{26962}{27145}我也可以用类似点点，点点，点点……的操作
{27146}{27208}来回到我的文件系统的比较靠近根的位置
{27209}{27309}这个应该是回到了根目录
{27310}{27366}然后里面有一个 `bin` 目录
{27367}{27426}然后在里面有一个 `echo` 文件
{27427}{27477}所以我就可以输一个 `world`
{27483}{27551}然后这就会运行 `bin` 目录下的 `echo` 程序
{27568}{27609}好的，所以靠这个办法
{27610}{27692}你可以构建路径到你的文件系统的任意地方
{27717}{27806}有的时候你想要用绝对路径，有的时候你想要用相对路径
{27807}{27872}一般你就用短的那一种|一般你就用短的那一种
{27887}{28018}但是比如说你想要运行一个或者写一个程序
{28019}{28111}它调用运行了类似 `echo` 或者 `date` 的程序
{28112}{28200}你希望它可以在任何地方都能跑起来
{28201}{28296}那要么你就只给出这个要被运行的程序的名字
{28297}{28323}像 `echo` 或者 `date`
{28324}{28422}然后让 Shell 用 `path` 自己去找出它们在哪里
{28423}{28472}要么你就给出被调用运行的程序的绝对路径
{28488}{28526}因为如果你给出一个相对路径
{28527}{28651}那可能我在我的 home 目录运行，你在别的什么目录运行
{28654}{28700}可能我这里能跑起来，你那里就不能跑起来了
{28756}{28885}um，总的来说，我们运行程序的时候
{28899}{28980}程序会默认在当前目录运行
{28995}{29064}除非我们再给程序一个参数
{29083}{29120}其实运行在默认目录是相当方便的
{29121}{29215}因为这意味着我们不必给出复杂的完整路径
{29223}{29327}用到的只是文件名或者是当前目录
{29345}{29483}搞清楚我们当前目录里有啥很关键
{29493}{29518}然后我们可以发现
{29519}{29582}`PWD` 命令能输出我们当前所在的目录
{29583}{29747}有个叫 `ls` 的命令能列出当前目录下的文件
{29762}{29802}如果我在这打上 `ls`
{29815}{29901}这就是当前目录下所有的文件，对吧
{29902}{30002}这是种方便在文件系统中快速查找的方法
{30051}{30128}你可以看到，如果我输入 `cd ..`
{30129}{30156}然后执行 `ls` 指令
{30164}{30246}会输出上一级目录下的文件
{30278}{30418}我也可以 `ls` 一个 `..` 的参数
{30419}{30451}就像我给它一个路径一样
{30458}{30504}然后他就会 `ls` 上一级目录
{30505}{30542}而不是当前我所处的目录
{30544}{30593}或者直接 `ls` 上一级目录
{30660}{30719}如果我直接返回到根目录
{30720}{30786}你会发现根目录里有不同的路径
{30811}{30881}在这你可能不知道一个便捷的小技巧
{30882}{30981}你可以用两个特殊符号做点别的事
{30982}{31053}第一个，`~`
{31054}{31138}`~` 可以把你带回用户目录
{31139}{31221}所以说 `~` 总是指向用户目录
{31222}{31291}你可以通过它到达用户目录相关的目录
{31292}{31470}所以我可以输入 `cd ~/dev/pdos/classes/missing-semester`
{31471}{31508}现在我就在这个目录里了
{31509}{31602}因为 `~` 在这代表 `/home/jon`
{31625}{31791}尤其在 `cd` 命令中还有一个很方便的参数 `-`
{31799}{31843}如果你运行 `cd -`
{31850}{31933}他会将当前目录跳转到你所处的上一个目录
{31954}{31974}所以如果我运行 `cd -`
{31975}{32003}我就回到了根目录
{32026}{32065}如果我再执行一遍 `cd -`
{32110}{32157}我就回到了 `missing-semester` 这个文件夹
{32158}{32180}由此可见
{32181}{32240}这让你很方便的在两个不同文件夹之间切换
{32349}{32433}关于 `ls` 或者 `cd` 命令
{32444}{32501}还有一些你可能不知道的参数
{32531}{32545}目前为止
{32546}{32620}我们除了给出路径以外啥都没做
{32635}{32672}但是如果你想自己探索的话`
{32673}{32732}你可以首先考虑 `ls` 一个路径
{32749}{32858}大多数程序采用一些 `flag`（标志）
{32859}{32898}和 `option`（选项）等作为参数
{32910}{32967}这些一般都以半角字符 `-` 开头
{32988}{33130}其中大多数程序都涵盖了 `--help` 这个函数
{33151}{33178}举个例子
{33179}{33180}如果你执行 `ls --help`|举个例子
{33181}{33226}如果你执行 `ls --help`
{33227}{33397}它会很贴心地输出一大堆关于 `ls` 指令的帮助信息
{33408}{33491}这些信息阐述了 `ls` 的用途
{33492}{33547}并且你可以给出的一堆 `option`
{33548}{33596}和一堆文件
{33609}{33674}阅读用法的时候
{33696}{33797}`...` 代表不填或一个或更多
{33798}{33864}`[]` 代表可 `option`
{33878}{33954}所以现在这里给出了一些 `option`
{33955}{33995}和一些可选的文档
{34021}{34086}显然它在告诉你这个程序会做什么
{34087}{34203}并且特指了一些 `flag` 和 `option`
{34204}{34337}通常把一个 `-` 加上一个字母叫做一个 `flag`（选项）
{34338}{34443}或者把后面不跟没有数值的叫做 `flag`
{34444}{34503}而后面跟有一个值的叫做一个 `option`
{34504}{34588}举个例子，`-a` 和 `--all` 都叫 `flag`
{34687}{34783}而 `-C` 或 `--color` 都是 `option`
{34821}{34908}如果你向下翻得够远
{34928}{35056}你能发现一个 `-L` 的 `flag`
{35057}{35092}啊，翻车了
{35113}{35322}这个 `-L` 的 `flag` 是采用长列表格式[*]
{35334}{35393}通常来说，这很方便
{35403}{35443}我们来看看它到底能做什么
{35457}{35510}如果我执行 `ls -L`
{35543}{35607}它仍然会输出当前路径下的一长串文件
{35608}{35691}但是给出了关于这些文件更多的信息
{35706}{35774}你会发现你以后会经常用到这个 `flag`
{35785}{35899}因为它多给你的信息能提供很大的便利
{35963}{36038}让我们看看多出来的信息都有什么
{36158}{36271}首先，前面带 `d` 的这些条目
{36272}{36314}代表这里面还有些东西
{36329}{36440}举个例子，这个 `_data` 的条目就是一个目录
{36441}{36553}但 `404.html` 不是个目录，而是一个文件
{36568}{36762}后面的字符代表文件被授予的权限|
{36775}{36914}这就像我们之前看到的，我并不能 `cd` 一个指定的文件
{36915}{36973}或者我 `cd` 不了一个目录
{36974}{37064}这都是由特定文件或目录的权限决定的
{37090}{37146}阅读这一串字母的方法如下
{37147}{37222}把后面的 9 个字母分成三组
{37223}{37308}第一组代表权限被授予给了文件的所有者
{37309}{37385}你可以看到这些文件的所有者都是我
{37426}{37591}第二组的三个字母代表给拥有这些文件的用户组的权限
{37592}{37686}也就是 `jon` 这个用户组
{37702}{37939}最后的一组字符是给非所有者的其他人的权限
{37973}{38039}这个目录某种意义上来说有些“无聊”
{38053}{38108}因为这个目录的所有者是我
{38109}{38203}但是如果我们执行 `cd /` 回到根目录
{38204}{38333}然后再 `ls -L`，会发现所有文件和目录的所有者都是 `root`
{38350}{38426}我们回到什么是根用户来
{38433}{38518}你能发现这里的权限有点意思
{38519}{38653}这一组中的三个字母代表读取、写入和执行
{38689}{38805}这些对于文件和目录又有什么不同呢
{38824}{38875}对于文件，这就很显而易见了
{38876}{38937}如果你有读取权限
{38938}{38982}你就可以读取文件的内容
{38983}{39050}如果你有文件的写入权限
{39051}{39181}你就可以保存，写入甚至是重写一遍
{39182}{39272}如果你有一个 `x`
{39273}{39319}你就可以执行这个文件
{39338}{39451}如果我们运行 `ls -l /bin`
{39452}{39538}啊，我说我是乱打的啊，应该是 `ls -l /usr/bin`
{39540}{39708}你会发现即使不是所有者都有全部的执行权限
{39709}{39782}这是因为，举例来说
{39783}{39840}我们希望这个电脑上的所有用户都能运行显示程序
{39852}{40018}没有任何理由只让某一用户能运行
{40048}{40145}对于目录来说，这些权限会显得稍有不同
{40162}{40329}所以读取权限允许你看这个文件夹里有哪些东西
{40348}{40426}你可以把读取权限当成阅读这个目录的清单
{40427}{40468}这个权限允许你列出目录里的内容
{40491}{40672}目录的写入权限就是你是否能够重命名、新建或者删除里面的文件
{40705}{40755}所以这也是一种权限
{40756}{40927}但是要注意到，这意味着如果你有文件的写入权限
{40928}{41019}但是你没有这个目录的写入权限
{41020}{41061}你就不能删除这个文件
{41062}{41128}即使你清空了文件的内容，你也不能删除它
{41129}{41225}因为这样做的话需要目录的写入权限
{41244}{41356}最后，目录的执行权限困扰了很多人
{41373}{41465}目录的执行权限通常来讲就是搜索
{41474}{41557}但这并不是一个容易理解的名字
{41558}{41679}它意味着你能不能进入这个目录
{41715}{41768}如果你想找个文件
{41769}{41862}或者打开这个目录、读取这个目录还是写入这个目录
{41878}{41959}甚至基础如 `cd` 这个目录
{41960}{42136}你都必须有所有父目录及其自身的执行权限
{42170}{42359}举例来说，如果我想访问 `/usr/bin` 下的文件， 例如 `echo`
{42369}{42464}我必须拥有路径上所有目录的执行权限
{42465}{42519}并且还得拥有 `bin` 这个目录的执行权限
{42535}{42648}如果我没有全部的这些执行权限，我就无法访问这个文件
{42679}{42761}因为我无法通过任何方法进入这个目录
{42825}{42923}另外你可能还会遇到另外一些字节
{42924}{42985}你可能会碰到 `s` 或 `t`
{42986}{43039}在这些清单里你可能还会看见 `l`
{43052}{43118}如果你对这些感到好奇的话，我们可以在工作时间聊聊
{43132}{43238}这些大多数对你在这堂课上学的东西都不是那么重要
{43267}{43314}但是了解它们会提高你的便利程度
{43315}{43386}所以如果你们实在好奇，你们可以自己查找相关资料
{43387}{43443}或者在工作时间来问我们
{43488}{43568}了解另外一些程序也能方便你自己
{43569}{43615}噢，对不起，我忘了提到一点
