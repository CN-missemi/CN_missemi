当我输入 `$PATH`

这里会输出一些我电脑上的目录

这些目录是 Shell 寻找程序时所查找的目录

也许你会觉得

这一大行被冒号分隔的东西看起来很费眼睛

但重要的事情在于

当你输入一个程序名称的时候

你的电脑会在这个列表中的每个目录里查找

名字与你所输入指令相同的一个程序或一个文件

刚刚的例子里当我试图运行 `date` 或者 `echo` 的时候

电脑会遍历这些目录

直到它找到一个包含 `date` 或者 `echo` 的程序的目录

然后电脑就会运行找到的这个程序

如果我们想要知道电脑具体运行了哪一个目录里的程序

我们有一个叫做 `which` 的指令，它可以整这个活

所以我现在可以输入 `which echo`

然后它就会告诉我

如果我要运行一个叫 `echo` 的程序

我就会运行——这个东西

这里有必要插入讲一下什么是路径(path)

路径是用来描述你的计算机里的文件的位置的东西

在 Linux 或者 Mac OS 上

路径被用一连串的斜杠分隔

你在这里可以看到，这个路径的起点在根目录

目录的开头有斜杠来指示它开始的地方：

整个文件系统的最顶层

然后我们进到叫做 `usr` 的目录

然后进到叫做 `bin` 的目录

然后找到名叫 `echo` 的文件

在 Windows 里，这样的路径一般以反斜杠而非斜杠分隔

在 Linux 和 MacOS 上

所有东西都在一个叫根（root）的空间下面的某处

所以所有以斜杠开头的路径都是绝对路径

在 Windows 下，每一个分区都有一个根

所以你可能见过类似 `C:\` 或者 `D:\` 的东西

所以 Windows 里每一个驱动器（硬盘）下

都有独立的一套文件系统的层次结构

相比之下，在 Linux 和 MacOS 下

所有东西都在一个命名空间里

你会注意到我提到了“绝对路径”这个词

可能有人会不知道这是什么意思，解释一下：

绝对路径是可以绝对准确地确定一个文件的位置的路径

所以在屏幕上这个例子里面

这行东西唯一地指向一个叫 `echo` 的独一无二的文件

它表示了到这个文件的完整路径

但是也有一种称作“相对路径”的东西

“相对路径”是相对于你当前所在位置的路径

所以要找出我们当前的位置在哪里

我们可以输入 `pwd`，意思是

当前工作目录（present working directory）……

当前（present）？

打印工作目录（print working directory）

所以如果我输入 `pwd` 

它就会输出当前我所在的目录路径

我现在的位置是 `root` 下的 `home` 文件夹

其中的 `jon` 里，其中的 `dev` 里

然后再叭啦叭啦叭啦这一串的里面

我可以选择改变我的当前工作目录

所有相对路径都是相对当前工作目录的

基本上也就是说是相对于你所在的地方

举个例子，我可以输入 `cd /home`

`cd` 是改变目录（change directory）的意思

这是改变当前工作目录的一种方法

在这个例子里，我把当前工作目录转到 `home`

你可以看到我的 Shell 的提示也改变了

它说我在 `home` 里面

它只会给出路径的最后一段的名称

不过也可以设置下，使得它总能显示当前的完整路径

如果现在我再输入 `pwd`

它会告诉我我在 `/home` 里

同时也有一对特殊的目录

`.`（点） 和 `..`（点点）

点表示当前目录，而点点表示上一层目录

通过这种方式，你可以容易地访问整个系统

举个例子，如果我输入 `cd ..`

它会告诉我我现在在 `/`

所以我现在在整个文件系统的根

我刚刚在 `/home`，现在在 `/` 了

然后如果我输入 `pwd`，运行结果看起来也很对

我也可以使用相对路径来向下访问文件系统

所以我可以输入 `cd ./home`

然后就会 cd 到当前的目录下的 `home` 目录

这个操作就把我带回到了 `/home` 里

然后如果我现在试着再输入一次 `cd ./home`

它会告诉我当前目录下没有 `home` 目录

我现在在刚刚 cd 进的文件夹里

就可以用相对路径

一路 cd 进刚刚我在的那一个文件夹里

我也可以用类似点点，点点，点点……的操作

来回到我的文件系统的比较靠近根的位置

这个应该是回到了根目录

然后里面有一个 `bin` 目录

然后在里面有一个 `echo` 文件

所以我就可以输一个 `world`

然后这就会运行 `bin` 目录下的 `echo` 程序

好的,所以靠这个办法

你可以构建路径到你的文件系统的任意地方

有的时候你想要用绝对路径，有的时候你想要用相对路径

一般你就用短的那一种

但是比如说你想要运行一个或者写一个程序

它调用运行了类似 `echo` 或者 `date` 的程序

你希望它可以在任何地方都能跑起来

那要么你就只给出这个要被运行的程序的名字

像 `echo` 或者 `date`

然后让 Shell 用 `path` 自己去找出它们在哪里

要么你就给出被调用运行的程序的绝对路径

因为如果你给出一个相对路径

那可能我在我的 home 目录运行，你在别的什么目录运行

可能我这里能跑起来，你那里就不能跑起来了

