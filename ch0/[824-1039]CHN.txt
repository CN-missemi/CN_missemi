【824】是大约四天之后

有一些特别奇妙的工具

构建高级管道的时候用得到

给你们举一个例子，我们可以做一些操作，比如

`curl --head --silent google.com`

就只是展示个大概

这会给我访问 google.com 时候

所有的 HTTP Headers

我也可以用管道给它接到 

`grep --ignore-case`

【833】或者说 `-i`

比如说我想（匹配）content-length

这样就会打印出 content-length header

`grep` 是我们之后会讲的程序

它支持在输入流里搜索给定关键字

我们还可以用管道连到 `cut` 命令

它可以接受一个分隔符，我们设成空格

【841】我想要第二个字段

这样就只输出 content-length（的值）

这算是一个很傻的例子

只是在命令行里以字节（bytes）的形式

提取出 google.com 的内容长度 # REVIEW

【846】这没啥有用的，但是你可以从中窥见

把命令链接在一起

你可以做很多文本操作的特技

而且 `pipe` 不止用于文本数据

还可以拿来处理比如图片

当你有一个程序可以接受并处理二进制图片 # REVIEW

然后输出一个二进制图片的时候

也可以像这样把它连进去

我们之后也会谈到这类例子

【858】你甚至可以这样处理视频

你可以 - 比如说你家里有个 Chromecast [*]
*Google 推出的类似网络机顶盒的东西

你可以把一个视频文件推流

如果把管道的最后一个程序设成

Chromecast 的发送程序

然后以流的形式传给它视频文件 # REVIEW

它就推流（或者 HTTP 形式）传到你的 Chromecast

【867】在数据整理那节会涉及更多

但是我还想说一个事情

大概就是终端的更有趣和强大的用法 # REVIEW

对于那些已经熟悉终端的同学来说

也许会挺有意思

【876】我们要先提一个重要话题

就是涉及到 Linux 和 MacOS 的时候

有一个叫 root （根）用户的概念

root 用户类似 Windows 里面的管理员（Administrator）

有值为 0 的用户 ID

root 是很特别的，因为

他被允许在系统上做任意行为

就算一个文件是任何人不可读的

或者任何人不可写的

root 却可以访问这个文件（且读写）

【887】他算是一种「超级用户」

可以做任何想做的事

大多数时候你不会用超级用户操作

你不会是 root

你应该是一个类似 `Jon`，或者别的啥

按你的名字来的用户

你该用这个用户操作（电脑）

【894】因为如果一直在 root 下操作电脑

如果你运行了错误的程序

可能会直接炸了你的电脑

你肯定不想这样，对吧

但是从今往后你每次想用 root 做点事的话

通常这种情况是，用一个叫 `sudo` 的程序

S-U-D-O 或者说 do as su

这里 su 就是 Super User（的缩写）

这是一个用超级用户运行程序的办法

【905】通常 `sudo` 的用法是

你先打 `sudo` 再接上平常调用的命令

它就会以 root 身份运行这个命令

而不是本来的那个用户

你在哪里可能要用到这种东西呢

呃，有一个特别的……

在你的电脑上有很多特别的文件系统

其中有一个特定的叫 `sysfs`

如果你 `cd` 到 `/sys`

这整个儿都是新世界

这个文件系统不是真实存在的文件

相反，这是一大堆内核参数

内核（kernel）基本上就是你电脑[*]的核心
*此处指软件方面，也即操作系统

这是种访问这些内核参数的方法

通过这些看起来是文件系统的东西

【923】你看，这里如果我 `cd` 到比如 `class`

对于一大把设备，它有各个对应的目录

我可以与它们交互

或者各种队列（queue）

或者各种奇奇怪怪的内核玩意儿

由于它们是以文件形式展露（exposed）的

这意味着我们可以用先前的所有工具

去操作他们

【931】举个栗子，如果你去到 `sys/class/backlight`

这个 `backlight` 可以直接设置笔记本的亮度

如果你是用笔记本电脑

所以我 `cd` 进 `intel backlight`

这是个 Intel 的笔电

里边儿你可以看见有个文件叫 `brightness`

我可以 `cat` 这个 `brightness`

这是我现在的屏幕亮度

不止于此，我也可以更改它

来改变我的屏幕亮度

你也许认为我要……

来看看最大亮度是多少

【944】好，所以现在是最大亮度

你可能会想，我会写点这样的命令

如果我 `echo`……让我们设个一半

`echo 500 > brightness`

如果我这么干，它提示我没有权限

我不允许修改亮度

因为……基本上如果你要修改内核的东西

你得是管理员才行

你也许会以为解决方案是写个

【956】`sudo echo 500`

但我还是莫得权限

为毛呢？这是因为按我之前说的

输入输出的重定向是程序不知道的

用管道把 `ls` 连接到 `tail` 的时候

`tail` 不知道 `ls`，`ls` 也不知道 `tail`

管道和重定向都是 Shell 设好的

所以现在的情况是我告诉 Shell

去运行 `sudo`，并且包括参数 `echo 500`

然后发送输出到这个 `brightness` 文件

但是 Shell 打开 `brightness` 的时候

【970】用的不是 `sudo`

所以这里 Shell 以我（Jon）的用户身份

去试图打开 `brightness` 文件并写入数据

而这不被允许，所以我有个无权限的错误

你也许见过（下面）这个

如果你搜了啥然后最后到了 Stackoverflow 上[*]
*程序员的求知交友娱乐网站（全英文）

【977】他们告诉你运行一下这个命令就行

你会见到像这样的，他们给你一些说明

比如 `echo 1 > sys`，呃，`net/ipv4_forward`

在设置防火墙的时候你可能见过这种东西

这个命令之所以能行

是因为前面这个小小的 `#`

意味着以 root 运行整条命令

这件事很少有人解释，但就是这个意思

【989】你会看见在我的 prompt（提示符）上

取而代之有个 `$`（dollar，美元）符号

`$` 表示你现在不是 root

重要的是我现在怎么解决问题

一是我可以切换到 root 终端

这个方法是运行 `sudo su`

`sudo su` 是说用 root 运行接下来的命令

`su` 是个蛮复杂的命令

能让你以超级用户登录 Shell

如果我运行，然后输入密码

你会看到开头的用户名从 `jon` 变成了 `root`

提示符从 `$` 变成了 `#`

如果我现在处理那个文件

`echo 500 > brightness`

我的屏幕就变暗了一点

虽然你看不见，你只能听信我

我现在就没得到错误

【1007】因为现在 Shell 以 `root` 身份运行

而不是 `jon`

而 `root` 用户允许打开这个文件

但是运用我们现有的终端知识

其实还有一个办法

能不用进入 root Shell

就是，呃，我恢复到 1060

`sudo`……

你看到这里的区别了吗

我告诉 Shell 去运行 `echo 1060`

它会输出 `1060`, 然后我告诉它

运行 `sudo tee brightness` 命令

然后把 `echo` 的输出送入 `sudo tee` 的输入

要搞明白这个你得知道 `tee` 命令干啥

`tee` 命令取它的输入，然后写入到一个文件

并且写入到标准输出（流）

【1025】所以 `tee` 是一个很方便的命令

比如说你有个日志[*]，你想
*此处原文的 log file 大致为口误

把它传到一个文件里存着之后看

但你还想现在瞅一眼

那你就可以用管道传给 `tee`

再给它文件名，它就能把无论什么输入

写到文件和你的屏幕上

这里我就利用这个程序

这里我说「以 root 运行 `tee`」

然后输出到 `brightness` 文件

【1035】这个例子里 `tee` 程序打开了 `brightness`

并且以 root （身份）运行

所以这是可行的

如果我现在运行它

你还是看不到亮度，但是它被调高了