【833】稍等，让我试着写一下这玩意...

运行这个试试，啊！

显然， fish 不想让我这么做 # REVIEW: knb: fish指什么我不是非常确定

呃，看这， `BEGIN` 是一个用于匹配第零行的特殊模式

`END` 则是匹配最后一行结束的特殊模式

然后这里是用于逐行匹配的正则表达式

【841】所以，我写的这些意思是

第零行的时候给 `rows` 这个变量赋值成 `0`

对每一行匹配这个正则表达式的文本

就增加一次 `rows` 的值

当你匹配完最后一行的时候

就把 `rows` 这个变量的值打印出来

这和运行 `wc -l` 效果一样

只不过全部是通过 `awk` 做到的

一般来说，`wc -l` 就已经很好了

不过有的时候，

你可能想去维护

某种类型的字典或者映射


你或许想统计一些数据，或者你想

【854】找到第二个匹配这个模式的东西

所以你需要一个可以保存状态的匹配器

来做到比如忽视掉第一个匹配并且

把第二个匹配开始的东西都打印出来

对这一点而言，了解 `awk` 这种


简单的编程语言会是非常有用的

事实上，我们可以在这个模式中

去掉 `sed`，`sort` 和 `unique` 以及 `grep`

这些我们原本用来生成这个文件的指令

并且用 `awk` 来完成所有工作

但你大概不会想要这么做

因为这大概会很痛苦，不划算

【867】接下来我们再花点时间讲讲

其他你可能在命令行中你可能会用的工具


第一个是一个非常好用的程序

叫 `bc`. 如果我没记错的话 `bc`

是伯克利计算器 `man bc`[*]
* Berkeley calculator

嗯... 我记得 `bc` 这个名字

是伯克利计算器那里来的


不管怎样，这是一个非常简单的命令行计算器

不过它从标准输入流读取数据

而非让你输入。所以我

可以做比如 `echo "1 + 2"` 并且

用管道接到 `bc` 上，并且加上 `-l`

因为这些程序通常都运行在

没什么用的“愚蠢”模式

【880】看这里，它打印出了 `3`！哇，好牛逼！

但这体现了这东西用起来很爽


想象一下你有一个有很多行的文件

比如说...

呃我也不知道 嗯...

这个文件吧。比如说我想把所有的登录次数

不止出现过一次的用户名出现次数

全部加起来。

好，所以只要次数不等于 `1`

我们就把次数打印出来

【890】对，这会给我所有出现过不止一次的

用户名次数，然后我想知道这些总共有多少

注意我不能仅仅简单的统计行数，这行不通

因为每行上都是个数字，我们想要的是总和

嗯，我们可以用 `paste` 用加号把他们连起来

所以这会把每一行粘贴在一起形成一个加法表达式

好，现在这是一个算术表达式了

所以我们可以把它用管道接到 `bc -l` 上

所以，有十九万一千六百六十五个登录

使用的用户名至少和另外一个登录一样

【904】再说一次，这也许不是你真正关心的事情

但这只是为了告诉你

你可以很容易的提取这些数据

并且你可以用这些东西做很多其他事情

比如
