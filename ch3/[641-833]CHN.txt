【641】来看看这一共多少行

如果我键入 `wc -l`

这有……

一十九万八千行

这个 `wc` 是计数程序（**w**ord **c**ount）

用 `-l` 让它统计行数

所以这么多行

如果我只是边翻边看，意义也不大 # REVIEW

对吧，我需要的是统计数据

我需要找个方法合计数据

以及 `sed` 这个工具用途很广

它提供了一个完整的编程语言

可以做一些，比如插入文本

或者只输出匹配行的操作

但它不是应付一切的完美工具，明白吗

就比如说，你可以用 `sed` 

编程实现行数统计

但绝对别这么干

除了搜索替换之外

`sed` 的编程语言挺烂的

但是，还有别的好用的工具

比如有个叫 `sort` 的

这虽然作用不大

`sort` 会接受很多行的输入

排一个序，然后输出到输出流

现在，我有了这个排序后的列表

它仍然有二十万行，所以还不是很好

但现在我可以把 `uniq` 结合进来

这个工具 `uniq` 作用于有序的数行

只打印那些 # REVIEW 这里怎么搞

也即，如果你有重复的行

这些行只会被打印一次

我可以执行 `uniq -c`

意为，对重复的行，计算它们重复的数量

然后将其（从输出中）去除

这会输出什么呢？

呃，如果我执行它，会处理一会

里边有 13 个 `zzz` 用户名

10 个 `zxvf` 用户名，等等

我可以上下翻看

这仍是一个很长的表单，对吧

但现在，至少比原来稍微条理点了

看看现在我们提出来多少行

好，两万四千行，仍然很多

虽然对我而言，这些信息没用

但我可以用更多工具，不断缩减它

比如我可能想知道

哪个用户名出现的最多

我可以再排个序

我想要对输入的第一列做数值排序

所以 `-n` 意为数值排序

`-k` 允许你在输入中

选中空白字符分隔的一列，执行排序

这里我加了一个 `,1` 的原因是

我想要从第一行选起，在第一行结束

除此之外我也可以要求

依据所有的列排序 # REVIEW 这里没太明白

但这里我只想用第一行

然后我只想要最后十行

`sort` 默认是以升序输出

所以计数最高的一条在最底下

然后我就只要最后十行

现在再跑的时候

我就有比较有用的数据了，对吧

它告诉我用户名 `root` 有一万多次登录尝试

用户名 `123456` 有四千多次

这就很棒了

现在这个大日志突然就给我有用信息了

这是我真正想从日志里要的信息

现在我可能就想，比如

快速地禁用一下我机器上

比如 SSH 登录的 `root` 用户名 # REVIEW

顺便我也建议你们这样做

其实对于这个情况

我们不需要 `sort` 的 `-k`

因为 `sort` 默认按整行排序

而数字又恰巧在前头

但了解这些额外的 flag 是有益的

你可能想问，我是怎么知道有这些 flag 的

我是怎么了解这些程序的存在的

【733】嗯，通常这些程序是

我在这种课堂上知道的

至于这些 flag

经常是，我想按照某个基准排序

但不是按整行

那你的第一反应是键入 `man sort`

然后把页面读一遍

你很快就能知道怎么能

优雅地选中一行

怎么能像这样，选这行数字

好，如果，我们现在有了这个……

就让它是前 20 的表单

假设我并不关心具体数量

我只要一个逗号分隔开的用户名表单

因为我可能打算通过电邮

每天都把它发给自己，之类的

像是《看，这是今天的前 20 用户名》

嗯，我可以这样——

好，出现了更多怪怪的命令

但了解它们都是有意义的

这个 `awk` 是基于列的流编辑器

我们提到了流编辑器 `sed`

它主要是编辑输入进来的文本 # REVIEW Jon 说的是 primarily 吗？

此外，`awk` 也让你编辑文本

也是一个完整的编程语言

但它专注于基于「列」的数据

所以这里 `awk` 会以默认方式

解析空格分隔的输入

然后你可以分别处理这些行

我这里指示说：只打印第二行

就是用户名那行，对吧

`paste` 这个程序

能拿到一大堆行

然后给它们粘到一块儿，成一行

这里是 `-s` ，还有 `-d` 指定 `,` 分隔 [*]
* `-s` 的作用，请自行查看 `man paste`

这里，这个例子，我想要一个

最靠前的用户名的清单

然后我就可以物尽其用

比如我把它丢进一个配置文件

去禁止这些用户名

或者 # REVIEW 不懂怎么翻译了……

`awk` 值得我多费几句口舌

讲白了，对于这样的数据整理

它是一个非常有力的语言

我简单说了这个 `print $2` 做什么

但你可以用 `awk` 施展一些绚丽的魔法

比如，我们先回到处理用户名这里

然后……我们还是执行 `sort` 和 `uniq` 吧

不然这个表单就太长了

然后让我们只输出那些

和特定模式相符的用户名

比如，让我想想……

`uniq -c`

我要只出现一次，并且

以 c 开头、e 结尾的所有用户名

虽然我们在搜索一个奇怪的东西

但在 `awk` 里面写出来还挺容易

我可以让第一行是 `1` 

并且第二行匹配这个正则

*好像这里只用 `.` 就行*

然后我想按整行打印

除非我搞错了什么东西

不然这就是所有以 c 开头，e 结尾

并且只出现了一次的用户名

虽然对数据做这种处理没有意义

但我在课上想讲的是

各种可以运用的工具

并且虽然我们举的例子很奇怪

但这个 pattern（模式）并不复杂

这是因为某些 Linux 的工具 # REVIEW 翻译准确性？

以及普遍的命令行工具

都是按照以行为单位的输入输出而设计

并且这些行经常会分为多列

而 `awk` 就是处理列的能手

`awk` 不仅能做这种匹配每行的操作

而且，比如说……

让我先输出一下行数

我想知道多少用户名符合这个模式

我可以执行 `wc -l`，这样就挺好

有 31 个这样的用户名

但 `awk` 是编程语言啊

这个黑魔法，你估计不会想去碰它

但要知道你可以运用

知道这些，对现在和以后都有益

在我屏幕上可能不太好读懂

我也发现了……

【833】我马上处理一下
