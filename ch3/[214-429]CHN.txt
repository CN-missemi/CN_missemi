【214】但是你可能会疑惑

我在这写的这玩意是个啥

那个 `.*` 是干啥的

这实际上是正则表达式的一个例子

正则表达式，你之前写程序可能见过

但是你一旦用起命令行

你会发现这东西用得特别多

特别是对于像这样的数据处理

正则表达式是一个很有力的文本匹配方式

你不一定要把它用在文本上

但匹配文本是最普遍的用途

在正则表达式里

你可以活用一套特殊字符

【231】这些字符不会直接匹配它们本身 #REVIEW 这里说的是 dont just match 但是翻译成“不仅”感觉不对劲 # REVIEW GNAQ 我改了「不会」，这样怎么样？

而是匹配某一类的字符或者字符串 #REVIEW knb: options 意译成 「字符串」 合适吗？

本质上来说它生成了一个程序 #REVIEW GNAQ: 是不是构造了一个有限状态自动机啊 #REVIEW knb: 正则应该确实是有限状态自动机，不过和这句话有什么关系吗...？
#REVIEW knb: 这里原文说“generates a program”我觉得很怪，按我的理解「类似一段程序/脚本」更合适...？ 需要译者注吗？

来在文本中进行查找

例如 `.` 代表「匹配任意的一个字符」

而如果在某一字符后面加上 `*`

那它代表匹配零次或多次该字符

那么这个 pattern（模式）所描述的就是

任意的、零个或多个字符 [*]
* 结合 `.` 与 `*` 的效果

然后跟着一个字符串 `Disconnected from`

这里就是说，我找到这样的字符串

然后把它们换成空的

正则表达式有一大把像这样的特殊字符

各有各的含义

你可以好好运用

我说了个 `*`

它匹配零或多个

还有一个 `+`

它是匹配一个或多个字符

那么这样的意思就是

我想要前面那个 pattern 匹配至少一次

此外还有方括号

可以让你匹配多种字符中的一种

好 我现在搞个字符串 

比如说 `aba`

我想把 `a` 和 `b` 换成空的

那么我就让 pattern 去把

要么是 `a` 要么是 `b` 的字符

换成空的

就算我把第一个字符换成了 `b`

还是会输出 `ba`

那你可能就会想了

为啥它只替换一次呢

这是因为正则表达式

在默认模式下

每行只匹配一次、替换一次

这是**默认**模式下做的事

你可以再加个 `g` 修饰符

意思是只要能，就尽量多匹配

然后整行就没了

因为每个字符都是 `a` 或 `b` 之一

如果我再加个 `c`

它就移除 `c` 之外的所有东西

如果再向字符串里边加其它字符

也都会保留下来

【278】但是 `a` 和 `b` 都会被去掉

你还可以给他加点修饰符

跑这个命令会发生什么呢

它的意思是我想要把零个或多个 

`ab` 这个字符串

换成空的

那么这就意味着

单独的一个 `a` 不会被替换掉 

单独一个 `b` 也不会被替换掉

但是 `ab` 连一起

它就会被替换掉了

`sed` 你好蠢啊

这里加上 `-E` 是因为 `sed` 真的很老了

它只支持很旧版本的正则表达式

一般你要加上 `-E` 开关跑

这样他就会用一套支持更多东西的

更现代的语法

如果它没法使用 `-E` 开关

那你就得在括号前面加 `\`

来告诉它使用“特殊含义”的括号

不然它就只会匹配括号本身

那可能不是你想要的

【302】注意它把这里的 `ab` 替换掉了

把这里的 `ab` 也替换掉了

但是把这个 `c` 

还有末尾的 `a` 留下来了

因为它和 pattern 不匹配

【307】你可以把 pattern 的任意部分括成一组

你也有「逻辑或」之类的东西 # REVIEW GNAQ：求懂懂校对一下 alternation 措辞，情景见视频  knb: 我也不会翻译这个 alternation，找不出中文中合适的词 我直接意译了

例如你可以让它移除

任意匹配 `ab` 或 `bc` 的字符串

然后你会注意到这个 `ab` 没了

但就算这个 `bc` 和 pattern 相匹配

它并没有被删除

这是因为 `ab` 已经被删除了

这个 `ab` 被删掉了，对吧

`c` 还留着

这里的 `ab` 被删去了

因为这个 `c` 依然不匹配，还留着

如果我把这个 `a` 删掉

这个 `ab` 的 pattern 

就不会匹配到这个 `b`

然后它就会被留下来

然后 `bc` 就会匹配到这个 `bc` 

随后就会被删掉

你刚开始接触的时候

正则会用起来很麻烦

【325】就算当你熟练之后

这东西看起来也很吓人 [*]
* 地铁-老人-手机.jpg

这也是为什么

人们常常会使用正则调试器的原因

过一会儿我们会看到

但首先让我们编写一个 pattern

能够匹配日志条目…呃…匹配我们在搞的条目

让我们先从文件里拿几行出来

那就拿前五行吧

看，这几行现在是这样一个形式

但是我们要做的是，只留用户名

那么我们就会想把它写成这样...

等下 让我先给你看一个东西

我们先整出来

写着（红字内容）这样一串的一行

那么这是一条登录记录

来自叫做 `Disconnected from` 的用户

_（学生）少了个 `s`_

少了个 `s` 吗？emmmm...

_（学生）第一个 `Disconnected`_

**`Disconnected`** 多谢

那么你会发现这个命令连用户名一起移除了

【352】这是因为像 `.*` 

这种范围匹配的正则表达式 #REVIEW range expression 是否为口误；（GNAQ觉得不是）和 regex 什么关系（and/in）；参考 385

它们是用贪心策略

去尽可能多的匹配

因此虽然我们在这里想保留用户名

但是这个 pattern 会一路匹配到它第二次

也就是最后一次出现

所以包括用户名在内

在这之前出现的文本都会被删掉

那么我们就要想一个

机智一点的方法来匹配

而不仅仅是使用 `.*`

这会使得当输入比较毒瘤的时候

可能就会输出一些奇怪的东西

好 让我们来看看怎么匹配这些行

首先先跑个 `head`

嗯...让我们从头开始构造这个 pattern

显然我们不想 `\` 满地跑

因此首先我们整个 `-E`

这些行是这样一个形式

先是 `from`

有些写了 `invalid` 

有些又没有 是吧

那这里的问号就是匹配 0 或 1 次

那这样写就是说

0 或 1 个 invalid 后面跟个空格

然后是 `user`……？

啊——多了个空格 可不敢乱多

然后后面有个我们想要的用户名

然后后面是...

然后后面是个 IP 地址

这里我们可以用区间语法

这个的意思就是 匹配 `0` 到 `9` 或者 `.` 

而且我们要匹配多次

然后后面是 `port`（端口）

所以我们匹配一个字面意思的字符串 `port` # REVIEW 这里 literal

然后再来一次数字 `0` 到 `9`，匹配多次

除此之外我们还要做一件事

我们要给表达式打锚点

正则表达式里有两个特殊字符 

`^` 匹配行开头

而 `$` 匹配行结尾

那我们这样写

就代表着这个正则表达式匹配了一整行

为什么要这样写呢

假设有个人把它的用户名

设成了这一整条日志文本

那当你匹配的时候

就会匹配到用户名

【406】坏耶——

一般来说锚点能加尽量加

避免这种偶然事件发生

现在让我们来看看

跑这个命令有什么效果

这个命令删掉了好多行

但还是留下来了一些

例如这个 最后有个 `[preauth]`

那我们把它炖了吧

空格，`preauth`，方括号

方括号是特殊字符要转义

好耶

再多来几行呢

啊 还是有奇怪的东西

这些行非空

那就意味着 pattern 和它不匹配

拿这个来说

它写的是 `authenticating` 而不是 `invalid`

好吧

改成 `authenticating` 或者 `invalid` 之一

匹配零次或一次

现在如何

看上去挺稳的

但是这个输出没太大用啊

它只是成功地

【428】把日志的每一行都清空了

这不太有用啊