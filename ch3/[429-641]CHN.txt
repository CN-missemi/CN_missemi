【429】但是这不太有用

相反我们真正想要做的是

当我们在这里匹配用户名时

我们更想要记录下来用户名是什么

因为这是我们想要输出的内容

【435】在正则表达式中做这件事的方法

是用一个叫「捕获组」的玩意（Capture Groups）

「捕获组」用来表示

我想要记住这个值

并在之后使用

在正则表达式中

【440】任何圆括号括起来的表达式

就是这样一个捕获组

所以我们已经在这里用了一个了

这是第一组，现在我们在这儿再建第二组

【445】注意这些括号并不影响匹配

对吧？因为它们仅仅表达了

将这个表达式作为一个单元

但它的后面没有任何修饰符

所以还是只匹配一次

【450】然后捕获组有用的原因是

你可以在替换式（replacement）中使用它

这样，在这里的替换式处

我可以键入 `\2` [*]
[*] 在部分编辑器中使用 `$2`

【455】这是你指代捕获组编号的方法

这里我写的意思是

先匹配整行

之后在替换式处放入你在第二个捕获组匹配到的值

【460】好的，记住这是第一个捕获组

这是第二个

现在它给了我所有的用户名

现在来看看写出来的表达式

它还挺复杂的，对吧

当我们一步步地完善它之后

【465】你现在可能会明白

为什么它必须是它现在这个样子

但要搞懂代码执行起来如何

其实并不是很直观的事情

这就是正则表达式调试器的用武之地了

【470】我们这里有一个

网上有很多，这个我已经提前填好了

我们刚刚用过的表达式

注意到，它上面显示了所有的匹配结果

【475】这个窗口配这个字体，字太小了

但是如果我……这里，这个注释说

`.*` 匹配所有字符 0 次到任意次

后面是 `Disconnected from` 这几个词

【480】后面是一个捕获组

下面还有各种别的

这是一个功能

它还允许你指定测试字符串

之后对给定的每个测试串跑正则表达式

【485】并且像这样给不同的捕获组着色

这里，我们将用户作为一个捕获组，对吧

它显示整个串都匹配到了

整个串是蓝色的所以匹配完成

【490】绿色部分是第一个捕获组

红色是第二个捕获组

这是第三个

因为 preauth 也被括号括起来了

这会是一个调试正则表达式的好方法

【495】例如如果我放 Disconnected from……

我们这里新添一行

如果我把 Disconnected from 作为用户名

好吧现在这行已经有这个用户名了

【500】我这是未卜先知

你会注意到利用这种匹配模式

这不再是一个问题

因为它正确地匹配了用户名

如果我们把这整行或这行变成用户名会发生什么

【505】如你所见

真让人摸不着头脑

将正则表达式调对会很痛苦

它现在尝试匹配……

它匹配到的第一个组

也就是用户名，似乎是第一个 invalid

【510】啊，第二个 invalid

因为它是贪心的

通过在这里加一个 `?`

我可以将它变为非贪心的

所以如果你在 `+` 或者 `*` 后加 `?`

【515】它会变成非贪心匹配

也就是不会尽可能地向后匹配

这样你可以看到，这个串被正确地解析了

因为 `.*` 匹配会在第一个 Disconnected from 处停止 [*]
* 不加 `?` 则会从行首匹配到整行的最后一个 Disconnected from

【520】也就是 SSH 指令固定输出的那个

是实际出现在我们记录中的那一个

讲到现在，你大概也发现了

【525】正则表达式会非常复杂

你也很可能会在你写的匹配模式中

用到各种各样迷惑的修饰符

真正学会它的唯一方式

是从简单的表达式开始

【530】之后堆砌起来

直到它匹配到你想要的

通常你仅仅是在做一些一次性工作

比如刚才我要提取用户名

你不需要去考虑那么多特殊情况，对吧

【535】你不需要考虑某人的 SSH 的用户名

完美地匹配了登录记录的格式

这也不算什么大事

因为你只是找用户名而已

【540】正则表达式确实很强大

处理的内容很重要的时候，记得万分小心

你要提问吗？

【545】总之正则表达式默认只逐行匹配

它不会跨行匹配

所以 sed 运行的方式是

它逐行处理

所以 sed 会对每一行匹配这个表达式

【550】好，正则表达式或者模式相关问题到此为止

它是一个复杂的模式

所以如果感到迷惑，别担心

课上完了，回去在调试器中看一看

【555】所以记住

我们在这里假设

用户只能控制他们的用户名，对吗？

所以他们能做的最坏的事

就是把这种整条记录设为用户名

【560】我们看会发生什么

好的，这是运行结果

它的原因是，`?` 意味着

我们一遇到 Disconnected (from) 这个词

就立刻匹配后面的模式，对吧

【565】第一个 Disconnected 是 SSH 自己输出的

一定在用户可编辑的内容之前

所以在这个特例下

即使这样也不会干扰模式串

你要提问吗？

_（学生有关模式串的数据安全性的问题）_

【570】啊，如果你在写一个……

这种比较怪的的匹配模式……

总的来说，你在做数据整理的时候

一般它不会涉及（信息）安全

但你很可能会得到很怪异的数据

【575】所以如果你在做一些像

绘制图表之类的事

你可能会丢掉重要的数据点

你可能解析出错误的数值

之后你的表突然出现了原始数据中没有的数据点

【580】所以重要的是

如果你发现你在写一个复杂的正则

多检查几下

它匹配出来的是不是你想要的

【585】即使它与信息安全无关

和你想的一样

这些模式串可能会非常复杂

例如这里有一个讨论

关于如何用正则表达式匹配一个 email 地址

【590】你可能会想到像这样的

这是一个非常直观的表达式

只是字母，数字，一些字符，后面一个 `+`

因为在 Gmail 里，email 地址里可以有 `+` [*]
* 这里指括号内的加号

【595】这里的 `+` 只表示任何这些字符至少出现一个

因为你不会有一个 @ 前为空的 email 地址

【600】后面域名的规则也差不多，对吧

顶级域需要至少两个字符并且不能包括数字

你可以是 .com 但是不能是 .7

【605】事实上这并不完全正确

这里有一堆有效的 email 地址不会被它匹配

还有一堆无效的 email 地址会被它匹配

【610】所以有很多很多建议

还有热心网友写了的完整的测试套件

尝试判断哪一个正则表达式是最好的

这是一个专门给 URL 的

【615】这是类似的给 email 的

他们发现最好的就是这个

我不建议你去试着理解这个模式串 [*]
* 这个东西大概是来自深渊某处，世界的黑暗面

但这个很明显会几乎完美的匹配到

像符合互联网标准的 email 地址

【620】就是所说的有效 email 地址

它还包含 Unicode 里奇奇怪怪的编码

这只是想说明正则表达式可以非常长

【625】如果最后你写出像这样的表达式

很可能会有更好的方式去做

比如，如果你自己在试着解析 HTML 

或者解析 JSON 格式，对于这种格式来说

【630】去用其它工具大概会比较好

我们也有这样的练习

不是用正则表达式，提醒你

这里有各种各样的建议

还非常非常深入地展示了它的运行过程

【635】如果你想查阅，它在课程笔记里

好的，我们有了这些用户名

让我们回到数据整理

像这列用户名

【640】它仍然对我很不友好，对吗？

让我们看看总共有几行