{0}{-1}* 就没有 2020 年的（小声
{0}{-1}* 别一不小心把家扬了
{79647}{79681}【990】那我大概就可以把它们删了
{79682}{79741}那我现在想把这个列表整干净些
{79805}{79849}这是一个多行的列表
{79862}{79897}那我先 `grep nightly`
{79914}{79968}然后我把最新版的 `nightly` 排除掉
{79969}{80028}用 `-v` 来表示不匹配它
{80078}{80135}我不想要匹配当前的`nightly`版本
{80157}{80240}好现在这些 `nightly` 都带着日期
{80250}{80307}我只想留下 2019 年的 [*]
{80379}{80464}那现在我想把这一个个工具链
{80465}{80528}从我的电脑里删掉
{80544}{80597}我固然可以一行行的来回复制粘贴
{80623}{80729}`rustup toolchain remove`
{80748}{80851}哦，好像是 `uninstall`
{80866}{80944}那我可以手动的输入这些文件名
{80945}{80970}也可以复制粘贴
{80971}{81025}但是这不是很烦么
{81026}{81067}我都整出来列表了啊
{81081}{81106}那要不这样吧
{81107}{81361}我用 `sed` 把这些版本号的后缀去掉
{81422}{81461}好，就这个样子
{81474}{81521}然后用 `xarg` 
{81522}{81671}它可以把输入的列表转成参数
{81686}{81847}这里我想让它变成这个命令的参数
{81891}{81971}我的习惯是这里加个 `echo`
{81972}{82031}这样就可以看到它将会干些什么 [*]
{82053}{82097}啊这输出没太大用
{82107}{82168}并不是很好读
{82175}{82239}仔细看这个命令
{82247}{82282}删掉 `echo` 之后
{82285}{82342}将会执行 `rustup toolchain uninstall`
{82343}{82380}然后后面是 `nightly` 版本
{82381}{82431}作为**参数**传给程序
{82452}{82487}【1022】那我一跑这个命令
{82514}{82556}它就会把这些工具链删了
{82557}{82606}那我就不用一个个复制粘贴了
{82668}{82729}那这就是数据处理
{82730}{82777}在辅助其他工作上的应用
{82778}{82831}在观察数据之外更进一步
{82832}{82858}也就是把一种形式的数据
{82859}{82878}转换成了另一种
{82898}{82959}你还可以处理二进制数据
{82974}{83017}而图像、视频等
{83018}{83077}就是一个很好的例子
{83078}{83221}你可以拿它们来整点有趣的活
{83226}{83283}例如有个工具叫 `ffmpeg`
{83289}{83374}它是用来编解码视频的工具
{83375}{83389}也可以整点图像活|它是用来编解码视频的工具
{83390}{83425}也可以整点图像活
{83448}{83487}我现在把它的日志级别
{83490}{83514}设成 `panic` 
{83516}{83557}不然它会输出超多东西
{83583}{83666}我想让它从 `/dev/video0`
{83677}{83768}也就是从我的摄像头读取
{83814}{83902}然后把第一帧拿出来
{83903}{83939}也就是拍个照
{83976}{84035}然后输出成一张图
{84036}{84103}而不是一个单帧的视频
{84136}{84238}我想让它把输出内容，也就是这个图片
{84239}{84265}输出到 `stdout`
{84272}{84338}【1046】一般用 `-` 就告诉程序
{84339}{84389}从标准流来输入输出
{84390}{84423}而不要用文件
{84431}{84472}这个参数应该是给出一个文件名
{84473}{84548}而用 `-` 作为文件名就代表 `stdout`
{84554}{84639}然后我想把它用管道
{84644}{84687}接到 `convert` 这个程序
{84699}{84779}`convert` 是一个图像处理软件
{84789}{84873}我想让 `convert` 从 `stdin` 读入
{84912}{85027}然后把图片转成灰度的
{85028}{85172}然后把结果写到 `-` 文件里
{85173}{85204}也就是标准输出
{85244}{85319}然后我想接给 `gzip` 
{85328}{85388}它可以压缩这个图片文件
{85433}{85529}它也会用标准流来输入输出
{85554}{85620}然后我会把它接到
{85621}{85675}我的远程服务器上
{85705}{85793}在那上面解码（解压缩）
{85830}{85902}然后把图像存个副本
{85920}{85953}复习一下
{85954}{85985}【1066】`tee` 会从 `stdin` 输入
{85986}{86024}然后输出到文件和 `stdout`
{86025}{86057}那这样我们就得到了一份
{86064}{86146}名字是 `copy.png` 的
{86160}{86201}解码过的图像副本
{86256}{86323}继续沿着管道推流
{86335}{86437}我再把数据流导向本地
{86466}{86605}我想让它在一个图片查看器里显示出来
{86606}{86639}看看能不能用
{86676}{86699}【1075】瓦！
{86736}{86841}好 这张图经过我的服务器
{86853}{86935}然后又由管道传回来了
{86952}{87064}此外我的服务器理论上
{87065}{87163}有这张图解码后的副本
{87164}{87194}来看看有没有
{87203}{87299}`scp copy.png` 到我这里
{87320}{87342}啊这
{87343}{87382}这样呢
{87507}{87611}看！完全一致！这个命令生效了
{87648}{87711}这是个简单的例子
{87712}{87812}但是你会见识到这样构建管道的强大之处
{87813}{87874}它不一定要是文本
{87875}{87931}而是会把任意格式的数据
{87932}{87950}转换成另一种格式
{87962}{88022}如果想要的话
{88023}{88081}我可以 `cat /dev/video0`
{88082}{88135}然后把它用管道接到
{88136}{88206}Anish 的服务器上
{88207}{88307}他就可以把它 `pipe` 到视频播放器上
{88308}{88400}然后在他的机器上看视频了
{88443}{88498}【1095】只要知道有这么个操作就好
{88575}{88646}今天有许多的练习可以做
{88647}{88720}有些呢会用到一些数据源
{88721}{88820}像是 macOS 和 Linux 的日志
{88821}{88844}然后我们会告诉你用哪些命令
{88845}{88877}你可以自己玩一下
{88886}{88923}但是记住
{88924}{89018}用什么数据源并不重要
{89019}{89083}更重要的是找些
{89084}{89147}你觉得有意思的数据源
{89148}{89214}然后从里面找出有意思的东西
{89215}{89274}这些练习的重点在这里
{89306}{89407}星期一马丁路德金日不上课
{89408}{89480}下一节课周二
{89481}{89519}我们讲命令行环境
{89531}{89593}现在讲的这些有些什么疑问吗
{89594}{89651}管道啊 正则啊 
{89706}{89815}正则这东西真的值得好好看看
{89816}{89868}它太好用了
{89869}{89930}在编程方面也很好用
{89945}{89980}如果有问题
{89981}{90001}~~办公室找我~~
{90002}{90061}【1119】我会帮你的
