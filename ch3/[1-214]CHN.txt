【1】好，欢迎来到今天的课堂

今天我们讲数据的整理（Data Wrangling）

这个英文名可能听上去有点怪

但它解决的核心问题就是

把一种格式的数据转换成另一种

那这个任务再平常不过了

不过我不仅仅说的是图片格式之间的转换

还有可能是这样一种情况

你现在有一种格式的文本文件

或者日志文件

然后你想把里面的数据

画成图或者进行统计

那么我认为的数据处理

就是像这样把一个数据

以另一种方式表达

我们在前面几节课已经见过几个例子了

例如当你使用管道运算符的时候

它会把一个程序的输出喂给另一个程序

【24】这时候其实你就是在做数据处理 #REVIEW

那么我们这节课的主要内容就是

看看有什么神秘的数据处理魔法

以及数据处理的高效方式

要处理数据

首先你得有数据

你得有个数据的来源

那优质的数据来源就多了去了

那么我们今天的课堂笔记的练习里

就会给你许多的样例数据

那么我们今天主要用的数据是系统日志

我在荷兰某地跑着个服务器

这在当时看来是十分合理的

在那个服务器上呢

【42】跑着一个 ? 自带的日志模块 #REVIEW 

这是一个挺标准的 Linux 日志机制

然后我们可以通过 Linux 的 

`journalctl` 命令来看系统日志

那么我要做的事就是对这些日志施展一些魔法 #REVIEW

然后看看里面有没有啥有趣的东西

你可以看到

我跑完这个命令以后获得了这么多的数据

【54】因为我的服务器做了许多的事 #REVIEW

你看这一条是一月一日的

后面还有更久远的

那我们要做的第一件事就是缩小日志量

我们只看一部分的内容

那么做这件事的时候 `grep` 就是你的最佳伙伴了

我们把管道从 `ssh` 接到 `grep` 上

我们还没仔细聊过 `ssh`

但它是一个以命令行形式访问远程计算机的方式

当你把服务器放到公网上时会发生的一件事就是

来自世界各地的人都会尝试连接并登录进去

然后把你的服务器打下来

那我就想看看他们是咋整的*
*太坏了 准备用键盘回击.png

那我就 `grep SSH`

然后你就能够很快的*看到还是输出了很多东西
*并不

理论上来说是这样的但是实际上很慢...

好

你可以看到它生成了

这么这么这么多的内容

【79】很难看出来发生了什么 #REVIEW 

所以我们只来看看这些人用什么用户名来登录进来

你可以看到这里有几行写着从无效用户断开连接*
*Disconnected from invalid user 

然后后面是用户名

现在我只想要这种日志条目 #REVIEW those lines (日志条目)

我只关注这些东西

那我现在再来点修改

我在最后加上个`断开连接`*
*disconnected from

你想想底部的这条命令是如何运作的 #REVIEW "pipeline"

首先它会把整个日志文件从网络上传到我的电脑里

然后在本地跑 `grep` 来找出所有含有 `ssh` 的行

然后再在本地更进一步的去筛选

这是不是意义不大

因为我根本不关心其他的大多行

远程服务器上也有个终端

那我就把整个命令搬到服务器上运行

那么

现在，你，SSH

我想让你给我在服务器上整这三个活

然后拿回来的数据我再接到 `less` 上面

那这会发生什么呢

其实是一样的数据筛选

只是把工作搬到服务器上了

而服务器只会回传给我我想要的行

然后我会把数据接到 `less` 上

【111】其实 `less` 是个分页器程序 #REVIEW 

当你在使用 `man` 命令

和一些其他开在分页器里的命令时

你实际上已经见过这个程序了

使用分页器程序可以方便的把长长的内容

适配到终端的大小

然后让你上下滚动来浏览

而不是在你的屏幕上一滚而过

因此当我运行这个命令时

它要花一些时间来分析日志文件

特别是 `grep` 要缓存* #REVIEW "is buffering"
*许多的命令并不会直接写到 `stdout` 而是缓存一定量（如 4096 字节）以后再一次输出

因此这样效果不明显

让我看看不这样的话会不会好一点*
*加了 `line-buffering` 选项以后找到一行就输出一行

为啥不听我的话...

好吧让我搞点小手段

你假装没看见

也有可能这个网络差得离谱

【132】可能是这两个原因之一 #REVIEW 网络；还有个啥

还好我早有准备

之前我在办公室的时候

跑了这个命令

把前面的这串命令的输出

放到我电脑里的一个文件里

而前面这串命令所做的事就是

把所有包含 `disconnect from` 的 

SSH 日志下载到本地

这真是个好东西

因为我并没有必要去传输整个日志

因为我知道我只想要这个开头*的东西
*grep 匹配的不只是开头的东西

那我们现在来看看 `ssh.log`

你可以看到这里有这么这么多

写着从无效用户断开

从认证用户断开

那么我们要做的就是

在这些日志上整活

这同时意味着

在这之后

我们并不需要再通过 SSH 来获取数据

我们可以直接 `cat` 这个文件

然后在它上面进行操作

此外让我来展示一下这个分页器

如果我 `cat ssh.log` 

然后把管道接到 `less` 上

他就会给我一个分页器

我就可以上下滚动了

让我把字体调小一点

那么我还可以用些

类似 Vim 的操作来浏览

`Ctrl+U` 向上滚动

`Ctrl+D` 向下滚动

按 `q` 退出

但是这个文件里东西还是太多了

也意味着我不感兴趣的垃圾信息太多了

我只想看看这些用户名是些啥

那么我们就要来用

一个叫做 `sed` 的工具了

`sed` 是一个更早期的

一个叫做 `edit` 的东西的改版

这东西怪死了

你们肯定都不想去用

诶你有啥问题

（学生）抱歉我可能漏听了

（学生）但是 `tsp` 是个啥*
*可以看到屏幕上 **t**he**s**quare**p**lanet.com 

哦 `tsp` 是我的远程计算机的名字

回到刚刚的话题

`sed` 是一个流式编辑器

你可以把它想成是某种替换

但是实际上它是一个在输入流上操作的

完整的编程语言

那么 `sed` 的一个最常用操作就是

在输入流之上跑替换表达式

那么这东西长什么样呢

让我写给你看看

好 现在我要把管道接到 `sed` 上

然后我告诉他我想把

所有 `disconnected from` 前面的东西

全部丢掉

【193】这可能有些奇怪 #REVIEW 奇怪啥

但是仔细看看

我并不关心 SSH 里的

日期、域名、进程 ID

那我就可以把它删掉了

`Disconnected from` 这几个字每行都有

也可以删掉

那我所做的就是写一个 `sed` 表达式

而处理这个问题我写的是一个替换表达式

这个表达式接受两个以斜线分隔的参数 #REVIEW slash

第一个参数是要找的字符串

而第二个是要换成什么

这个参数我们没有填东西 #REVIEW

那么我的命令就是按这个 pattern 搜索

然后把它换成空的

最后我把它接到 `less` 上

然后你可以看到它把所有行的开头去掉了

【214】用起来真的爽
