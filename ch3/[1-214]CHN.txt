【1】好，欢迎来到今天的课堂

今天我们讲数据的整理（Data Wrangling）

这个英文名可能听上去有点怪

但它解决的核心问题就是

把一种格式的数据转换成另一种

那这个任务再平常不过了

不过我不仅仅说的是图片格式之间的转换

还有可能是你现有的文本文件、日志文件

你想得到它们的其他格式

比如画成图或者进行统计

那么我认为的数据处理

就是像这样把一个数据

以另一种方式表达

我们在前面几节课已经见过几个例子了

例如当你使用管道操作符的时候 # REVIEW 这里用「操作符」，感觉怎么样？

它会把一个程序的输出喂给另一个程序

【24】其实此时，你就在进行某种形式的数据处理

那么我们这节课的主要内容就是

看看有什么神秘的数据处理魔法

以及数据处理的高效方法

要处理数据

首先你得有数据来源

要有能加以实践的数据

那优质的数据来源就多了去了

那么我们今天的课堂笔记的练习里

就会给你许多的样例数据

而今天的课呢，我打算用系统日志

我在荷兰那地儿跑着个服务器

呃，当时来说这十分合理[*] 
*Jon 是挪威人，和荷兰离得很近。

在那个服务器上呢，跑着一个

【42】`systemd` 自带的记录日志的后台进程

这是一个挺标准的 Linux 日志机制

然后我们可以通过 Linux 有的一个 

`journalctl` 命令来看系统日志

那么我要做的事

就是对这些日志施展一些“魔法” #REVIEW 

然后看看里面有没有啥有趣的东西

你可以看到我跑完这个命令以后

获得了这么多的数据

【54】因为这个日志文件，它里面有超多东西

我的服务器上发生了不少事情

你看这一条是一月一日的

后面还有更久远的

那我们要做的第一件事就是缩小日志量

我们只看一部分的内容

此时 `grep` 就是你的最佳伙伴了

我们用管道把 `ssh` 的输出接到 `grep` 上

我们还没仔细聊过 `ssh`

但它是一种通过命令行访问远程计算机的方式

当你把服务器放到公网上之后

世界各地的人都想连接然后登录进去

然后控制你的服务器

那我就想看看他们是咋整的[*]
*太坏了，准备用键盘回击.png

那我就 `grep SSH`

然后你就能够~~很快的~~看到这会输出很多东西

理论上来说是这样的但是实际上很慢...

好

你可以看到它生成了

这么这么这么多的内容

【79】哪怕是发生了什么也压根展现不出来 #REVIEW 

所以我们只来看看这些人

用了什么用户名来尝试登录

你可以看到这里有几行写着「无效用户，断开连接」[*]
*Disconnected from invalid user 

然后后面是用户名

现在我只想要这种日志条目

我只关注这些东西

那我现在再来点修改

我在最后加上个`断开连接`*
*disconnected from

你想想底部的这条命令流水线是如何运作的

首先它会通过网络，把整个日志传到这个电脑里

然后在本地跑 `grep` 找出所有含 `ssh` 的行

然后再在本地更进一步的去筛选

这是不是有点浪费 [*]
*就这网速传什么大文件，别想了

因为我根本不关心其他的条目

远程服务器上也有个 Shell

那我就把整个命令搬到服务器上运行

那么现在，你，SSH

你给我在服务器上整这三个活

然后拿回来的数据我再接到 `less` 上面

那这会发生什么呢

其实是一样的数据筛选

只是把工作搬到服务器上了

而服务器只会回传我想要的行

然后我在本地把数据用管道接到了 `less` 上

【111】其实 `less` 是个分页显示程序 #REVIEW 

你会看到一些例子…

其实当你键入 `man`

或者一些其他使用分页器显示的命令时

你实际上已经见过这个程序了

使用分页器程序可以方便的把长长的内容

适配到终端的大小

然后让你上下滚动来浏览

而不是在你的屏幕上一滚而过

执行这个命令的时候还是要花一些时间

因为服务器要解析一堆日志文件

特别是 `grep` 会先缓存输出* #REVIEW "is buffering" （GNAQ：这句讨论一下吧）
*许多的命令并不会直接写到 `stdout` 而是缓存一定量（如 4096 字节）以后再一次输出

所以它还卡在这

让我看看不这样的话会不会好一点[*]
*加了 `line-buffering` 选项以后找到一行就输出一行

为啥不听我的话...

好吧让我搞点小手段

你假装没看见

也有可能是这个网络差得离谱

【132】可能是这两个原因之一

还好我有备而来

上课前我执行了这个命令

它会把前面的这串命令的输出

放到我电脑里的这个文件里

而前面这串命令所做的事就是

把所有包含 `disconnect from` 的 

SSH 日志下载到本地

这真是个好东西

因为我并没有必要去传输整个日志

因为我只想要这个开头的东西

那我们现在来看看 `ssh.log`

你可以看到这里有这么这么多

写着与无效的用户断开连接

与已认证的用户断开连接，等等

我们要做的就是在这些日志上整活

这也意味着

在这之后我们并不需要再走 SSH 的流程

我们可以直接 `cat` 这个文件

然后在它上面进行操作

此外让我来展示一下这个分页器

如果我 `cat ssh.log` 

然后把管道接到 `less` 上

他就会给我一个分页器

我就可以上下滚动了

把字体调小一点点？

那么我还可以用些

类似 Vim 的按键操作来浏览

`Ctrl+u` 向上翻，`Ctrl+d` 向下翻

以及按 `q` 退出

但是这里面还是有很多我不想看的垃圾信息

我只想看看这些用户名是些啥

那么我们就要来用

一个叫做 `sed` 的工具了

`sed` 是一个更早期的

一个叫做 `ed` 的东西的改版

这东西非常之怪，你们肯定不想用

诶你有啥问题

_抱歉我可能漏听了_

_但是 `tsp` 是个啥 [*]_
*可以看到屏幕上 **t**he**s**quare**p**lanet.com  # REVIEW 留着这个标，压制的时候要回看这里

哦 `tsp` 是我的远程计算机的名字

所以 `sed` 是一个“流”编辑器 # REVIEW stream editor

可以让你修改流（stream）中的内容

你可以认为这个命令大概是做文本替换

但实际上 `sed` 是一个在输入流上操作的

完整的编程语言 [*]
*这里的说法不太常见，可以类比前面讲解 Vim 时所说

那么 `sed` 的一个最常用操作就是

在输入流之上跑替换表达式

那么这东西长什么样呢

让我写给你看看

好 现在我要把管道接到 `sed` 上

然后我告诉它我想把

所有 `disconnected from` 前面的东西

全部丢掉

【193】这可能有些奇怪

但是你会观察到

这些 SSH 里的日期、域名、进程 ID

我并不关心，干脆统统把它删掉

`Disconnected from` 这几个字每条日志都有

也可以删掉

那我就要写一个 `sed` 表达式

而此处我写的是一个 `s/` 表达式

也就是替换表达式（**s**ubstitute）

这个表达式接受两个以斜线分隔的参数

第一个参数是要找的字符串

而第二个是要换成的字符串

这个参数现在是置空的

这里的意思就是，按这个字符串模式搜索

然后把它换成空的

最后我把它接到 `less` 上

看到了吗？它把这些行的开头剪掉了

【214】用起来真的爽
