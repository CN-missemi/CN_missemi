[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: C:/Users/no106/Desktop/CN_missemi/ch3_res/ch3_1080_fin.mp4
Video File: C:/Users/no106/Desktop/CN_missemi/ch3_res/ch3_1080_fin.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.250000
Scroll Position: 362
Active Line: 365

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: ch1_test,黑体,28,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,3,0,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.60,0:00:04.76,Default,,0,0,0,, 好，欢迎来到今天的课堂
Dialogue: 0,0:00:04.78,0:00:06.60,Default,,0,0,0,,今天我们讲数据的整理（Data Wrangling）
Dialogue: 0,0:00:06.92,0:00:10.22,Default,,0,0,0,,这个英文名可能听上去有点怪
Dialogue: 0,0:00:10.22,0:00:12.44,Default,,0,0,0,,但它解决的基本问题就是
Dialogue: 0,0:00:12.44,0:00:16.30,Default,,0,0,0,,把一种格式的数据转换成另一种
Dialogue: 0,0:00:16.50,0:00:18.46,Default,,0,0,0,,那这个任务再平常不过了
Dialogue: 0,0:00:18.46,0:00:20.56,Default,,0,0,0,,我说的不仅是图片格式之间的转换
Dialogue: 0,0:00:20.56,0:00:23.92,Default,,0,0,0,,还有可能是你现有的文本文件、日志文件
Dialogue: 0,0:00:23.92,0:00:26.78,Default,,0,0,0,,你想得到它们的其他格式
Dialogue: 0,0:00:26.80,0:00:29.88,Default,,0,0,0,,比如图表或者统计数据
Dialogue: 0,0:00:30.04,0:00:33.02,Default,,0,0,0,,那么我认为的数据处理
Dialogue: 0,0:00:33.02,0:00:35.94,Default,,0,0,0,,就是像这样把一个数据
Dialogue: 0,0:00:35.94,0:00:38.28,Default,,0,0,0,,以另一种方式表达
Dialogue: 0,0:00:38.28,0:00:43.38,Default,,0,0,0,,我们在前面几节课已经见过几个例子了
Dialogue: 0,0:00:43.64,0:00:46.60,Default,,0,0,0,,例如当你使用管道操作符的时候
Dialogue: 0,0:00:46.60,0:00:50.74,Default,,0,0,0,,它会把一个程序的输出喂给另一个程序
Dialogue: 0,0:00:50.74,0:00:53.48,Default,,0,0,0,,其实此时，你就在进行某种形式的数据处理
Dialogue: 0,0:00:53.88,0:00:56.28,Default,,0,0,0,,那么我们这节课的主要内容就是
Dialogue: 0,0:00:56.28,0:00:59.30,Default,,0,0,0,,看看有什么神秘的数据处理魔法
Dialogue: 0,0:00:59.30,0:01:02.20,Default,,0,0,0,,以及数据处理的高效方法
Dialogue: 0,0:01:04.34,0:01:06.36,Default,,0,0,0,,要处理数据
Dialogue: 0,0:01:06.36,0:01:07.46,Default,,0,0,0,,首先你得有数据来源
Dialogue: 0,0:01:07.46,0:01:10.00,Default,,0,0,0,,要有能加以实践的数据
Dialogue: 0,0:01:11.16,0:01:14.56,Default,,0,0,0,,那优质的数据来源就多了去了
Dialogue: 0,0:01:14.62,0:01:17.12,Default,,0,0,0,,那么我们今天的讲义的练习里
Dialogue: 0,0:01:17.12,0:01:18.44,Default,,0,0,0,,就会给你许多的样例数据
Dialogue: 0,0:01:18.44,0:01:22.20,Default,,0,0,0,,而今天的课呢，我打算用系统日志
Dialogue: 0,0:01:22.20,0:01:26.02,Default,,0,0,0,,我在荷兰那地儿跑着个服务器
Dialogue: 0,0:01:26.02,0:01:28.02,Default,,0,0,0,,呃，这在当时来说十分合理[*]
Dialogue: 0,0:01:28.18,0:01:31.80,Default,,0,0,0,,在那个服务器上呢，跑着一个
Dialogue: 0,0:01:31.80,0:01:34.56,Default,,0,0,0,,`systemd` 自带的记录日志的后台进程
Dialogue: 0,0:01:34.56,0:01:37.70,Default,,0,0,0,,这是一个挺标准的 Linux 日志机制
Dialogue: 0,0:01:38.04,0:01:40.50,Default,,0,0,0,,然后我们可以通过 Linux 的一个
Dialogue: 0,0:01:40.50,0:01:44.06,Default,,0,0,0,,`journalctl` 命令来看系统日志
Dialogue: 0,0:01:44.30,0:01:46.06,Default,,0,0,0,,那么我要做的事
Dialogue: 0,0:01:46.06,0:01:48.22,Default,,0,0,0,,就是对这个日志做一些转换
Dialogue: 0,0:01:48.22,0:01:50.76,Default,,0,0,0,,然后看看里面有没有啥有趣的东西
Dialogue: 0,0:01:51.50,0:01:53.82,Default,,0,0,0,,你可以看到我跑完这个命令以后
Dialogue: 0,0:01:53.82,0:01:56.70,Default,,0,0,0,,获得了这么多的数据
Dialogue: 0,0:01:56.76,0:02:01.50,Default,,0,0,0,,因为这个日志文件，它里面有超多东西
Dialogue: 0,0:02:01.50,0:02:03.50,Default,,0,0,0,,我的服务器上发生了不少事情
Dialogue: 0,0:02:03.50,0:02:06.20,Default,,0,0,0,,你看这一条是一月一日的
Dialogue: 0,0:02:06.20,0:02:09.94,Default,,0,0,0,,后面还有更久远的很多东西
Dialogue: 0,0:02:09.94,0:02:13.05,Default,,0,0,0,,那我们要做的第一件事就是缩小日志量
Dialogue: 0,0:02:13.06,0:02:15.16,Default,,0,0,0,,我们只看一部分的内容
Dialogue: 0,0:02:15.16,0:02:17.48,Default,,0,0,0,,此时 `grep` 就是你的最佳伙伴了
Dialogue: 0,0:02:17.48,0:02:21.34,Default,,0,0,0,,我们用管道把 `ssh` 的输出接到 `grep` 上
Dialogue: 0,0:02:21.56,0:02:24.40,Default,,0,0,0,,我们还没仔细聊过 `ssh`\N
Dialogue: 0,0:02:24.40,0:02:27.94,Default,,0,0,0,,但它是一种通过命令行，远程访问计算机的方式
Dialogue: 0,0:02:27.94,0:02:32.10,Default,,0,0,0,,当你把服务器放到公网上之后
Dialogue: 0,0:02:32.10,0:02:35.48,Default,,0,0,0,,世界各地的人都想连接然后登录进去
Dialogue: 0,0:02:35.48,0:02:36.90,Default,,0,0,0,,然后控制你的服务器
Dialogue: 0,0:02:36.96,0:02:39.80,Default,,0,0,0,,那我就想看看他们是咋整的 [*]
Dialogue: 0,0:02:39.96,0:02:42.42,Default,,0,0,0,,那我就 `grep SSH`
Dialogue: 0,0:02:42.42,0:02:48.56,Default,,0,0,0,,然后你就能够~~很快的~~看到这会输出很多东西
Dialogue: 0,0:02:48.98,0:02:52.18,Default,,0,0,0,,理论上来说是这样的但是实际上很慢...
Dialogue: 0,0:02:52.46,0:02:53.44,Default,,0,0,0,,好
Dialogue: 0,0:02:53.44,0:02:55.84,Default,,0,0,0,,你可以看到它生成了
Dialogue: 0,0:02:55.90,0:02:57.86,Default,,0,0,0,,这么这么这么多的内容
Dialogue: 0,0:02:57.86,0:03:01.12,Default,,0,0,0,,这样很难看出发生了什么
Dialogue: 0,0:03:01.28,0:03:04.24,Default,,0,0,0,,所以我们只来看看这些人
Dialogue: 0,0:03:04.24,0:03:06.24,Default,,0,0,0,,用了什么用户名来尝试登录
Dialogue: 0,0:03:06.24,0:03:12.26,Default,,0,0,0,,你可以看到这里有几行写着「无效用户，断开连接」 [*]
Dialogue: 0,0:03:12.26,0:03:13.50,Default,,0,0,0,,然后后面是用户名
Dialogue: 0,0:03:13.74,0:03:15.10,Default,,0,0,0,,现在我只想要这种日志条目
Dialogue: 0,0:03:15.10,0:03:16.48,Default,,0,0,0,,我只关注这些东西
Dialogue: 0,0:03:16.64,0:03:19.62,Default,,0,0,0,,那我现在再来点修改
Dialogue: 0,0:03:19.62,0:03:25.54,Default,,0,0,0,,我在最后加上个 `Disconnected from`（断开连接）
Dialogue: 0,0:03:26.08,0:03:29.96,Default,,0,0,0,,你想想底部的这条命令流水线是如何运作的
Dialogue: 0,0:03:29.96,0:03:33.84,Default,,0,0,0,,首先它会通过网络，把整个日志传到这个电脑里
Dialogue: 0,0:03:33.84,0:03:37.72,Default,,0,0,0,,然后在本地跑 `grep` 找出所有含 `ssh` 的行
Dialogue: 0,0:03:37.72,0:03:39.72,Default,,0,0,0,,然后再在本地更进一步的去筛选
Dialogue: 0,0:03:39.72,0:03:41.44,Default,,0,0,0,,这是不是有点浪费 [*]
Dialogue: 0,0:03:41.44,0:03:43.44,Default,,0,0,0,,因为我根本不关心其他的条目
Dialogue: 0,0:03:43.44,0:03:45.56,Default,,0,0,0,,远程服务器上也有个 Shell
Dialogue: 0,0:03:45.56,0:03:51.24,Default,,0,0,0,,那我就把整个命令搬到服务器上运行
Dialogue: 0,0:03:51.24,0:03:54.30,Default,,0,0,0,,那么现在，你，SSH
Dialogue: 0,0:03:54.30,0:03:56.76,Default,,0,0,0,,你给我在服务器上整这三个活
Dialogue: 0,0:03:56.76,0:03:59.60,Default,,0,0,0,,然后拿回来的数据我再接到 `less` 上面
Dialogue: 0,0:04:00.76,0:04:02.06,Default,,0,0,0,,那这会发生什么呢
Dialogue: 0,0:04:02.06,0:04:04.22,Default,,0,0,0,,其实是一样的数据筛选
Dialogue: 0,0:04:04.22,0:04:05.84,Default,,0,0,0,,只是把工作搬到服务器上了
Dialogue: 0,0:04:05.84,0:04:09.92,Default,,0,0,0,,而服务器只会回传我想要的行
Dialogue: 0,0:04:10.62,0:04:14.06,Default,,0,0,0,,然后我在本地把数据用管道接到了 `less` 上
Dialogue: 0,0:04:14.06,0:04:15.64,Default,,0,0,0,,`less` 是个分页显示程序
Dialogue: 0,0:04:15.64,0:04:17.64,Default,,0,0,0,,你会看到一些例子…
Dialogue: 0,0:04:17.64,0:04:19.98,Default,,0,0,0,,其实当你键入 `man`
Dialogue: 0,0:04:20.02,0:04:21.18,Default,,0,0,0,,然后后面接某些命令
Dialogue: 0,0:04:21.18,0:04:22.64,Default,,0,0,0,,你实际上已经见过这个程序了
Dialogue: 0,0:04:22.64,0:04:26.06,Default,,0,0,0,,使用分页程序可以方便的把长长的内容
Dialogue: 0,0:04:26.06,0:04:28.06,Default,,0,0,0,,适配到终端的大小
Dialogue: 0,0:04:28.40,0:04:31.16,Default,,0,0,0,,然后让你上下滚动来浏览
Dialogue: 0,0:04:31.16,0:04:33.82,Default,,0,0,0,,而不是在你的屏幕上一滚而过
Dialogue: 0,0:04:33.82,0:04:36.92,Default,,0,0,0,,执行这个命令的时候还是要花一些时间
Dialogue: 0,0:04:36.92,0:04:39.14,Default,,0,0,0,,因为服务器要解析一堆日志文件
Dialogue: 0,0:04:39.14,0:04:42.78,Default,,0,0,0,,特别是 `grep` 会先缓存输出 [*]
Dialogue: 0,0:04:43.00,0:04:46.58,Default,,0,0,0,,所以它还卡在这
Dialogue: 0,0:04:46.64,0:04:49.88,Default,,0,0,0,,让我看看不这样的话会不会好一点[*]
Dialogue: 0,0:04:59.56,0:05:02.74,Default,,0,0,0,,为啥不听我的话...
Dialogue: 0,0:05:03.70,0:05:05.86,Default,,0,0,0,,好吧让我搞点小手段
Dialogue: 0,0:05:05.86,0:05:09.86,Default,,0,0,0,,你假装没看见
Dialogue: 0,0:05:18.28,0:05:20.28,Default,,0,0,0,,也有可能是这个网络差得离谱
Dialogue: 0,0:05:20.28,0:05:21.46,Default,,0,0,0,,可能是这两个原因之一
Dialogue: 0,0:05:21.46,0:05:23.46,Default,,0,0,0,,还好我有备而来
Dialogue: 0,0:05:23.46,0:05:28.42,Default,,0,0,0,,上课前我执行了这个命令
Dialogue: 0,0:05:29.26,0:05:33.64,Default,,0,0,0,,它会把前面的这串命令的输出
Dialogue: 0,0:05:33.64,0:05:35.64,Default,,0,0,0,,放到我电脑里的这个文件里
Dialogue: 0,0:05:35.64,0:05:37.64,Default,,0,0,0,,我在办公室里跑了一次
Dialogue: 0,0:05:38.02,0:05:41.52,Default,,0,0,0,,而前面这串命令所做的事就是
Dialogue: 0,0:05:41.52,0:05:43.52,Default,,0,0,0,,把所有包含 `disconnect from` 的 
Dialogue: 0,0:05:43.52,0:05:45.68,Default,,0,0,0,,SSH 日志下载到本地
Dialogue: 0,0:05:45.78,0:05:47.18,Default,,0,0,0,,这真是个好东西
Dialogue: 0,0:05:47.18,0:05:50.06,Default,,0,0,0,,因为我没有必要每次都传输整个日志
Dialogue: 0,0:05:50.24,0:05:53.28,Default,,0,0,0,,我只想要以它开头的行
Dialogue: 0,0:05:53.98,0:05:56.54,Default,,0,0,0,,那我们现在来看看 `ssh.log`
Dialogue: 0,0:05:56.66,0:05:58.62,Default,,0,0,0,,你可以看到它有这么这么多
Dialogue: 0,0:05:58.62,0:06:01.90,Default,,0,0,0,,写着「与无效的用户断开连接」
Dialogue: 0,0:06:01.90,0:06:03.90,Default,,0,0,0,,或者「已认证的用户」，等等
Dialogue: 0,0:06:04.68,0:06:06.86,Default,,0,0,0,,我们要做的就是在这些日志上整活
Dialogue: 0,0:06:06.86,0:06:08.16,Default,,0,0,0,,这也意味着
Dialogue: 0,0:06:08.16,0:06:11.46,Default,,0,0,0,,在这之后我们并不需要再走 SSH 的流程
Dialogue: 0,0:06:11.46,0:06:13.12,Default,,0,0,0,,我们可以直接 `cat` 这个文件
Dialogue: 0,0:06:13.20,0:06:14.92,Default,,0,0,0,,然后在它上面进行操作
Dialogue: 0,0:06:16.10,0:06:18.46,Default,,0,0,0,,此外让我来展示一下这个分页器
Dialogue: 0,0:06:18.46,0:06:21.92,Default,,0,0,0,,如果我 `cat ssh.log` 
Dialogue: 0,0:06:21.92,0:06:23.20,Default,,0,0,0,,然后把管道接到 `less` 上
Dialogue: 0,0:06:23.20,0:06:24.32,Default,,0,0,0,,它就会给我一个分页器
Dialogue: 0,0:06:24.32,0:06:25.58,Default,,0,0,0,,我就可以上下滚动了
Dialogue: 0,0:06:25.58,0:06:27.24,Default,,0,0,0,,把字体调小一点点？
Dialogue: 0,0:06:28.78,0:06:31.40,Default,,0,0,0,,这样我可以滚动浏览这个文件了
Dialogue: 0,0:06:31.40,0:06:33.16,Default,,0,0,0,,那么我还可以用些
Dialogue: 0,0:06:33.16,0:06:34.94,Default,,0,0,0,,类似 Vim 的按键操作来浏览
Dialogue: 0,0:06:34.94,0:06:37.90,Default,,0,0,0,,`Ctrl+u` 向上翻，`Ctrl+d` 向下翻
Dialogue: 0,0:06:37.90,0:06:39.32,Default,,0,0,0,,以及按 `q` 退出
Dialogue: 0,0:06:41.22,0:06:44.02,Default,,0,0,0,,这仍然有很多内容
Dialogue: 0,0:06:44.02,0:06:47.54,Default,,0,0,0,,里面还是有很多我不感兴趣的垃圾信息
Dialogue: 0,0:06:47.54,0:06:50.46,Default,,0,0,0,,我只想看看这些用户名是些啥
Dialogue: 0,0:06:50.46,0:06:53.28,Default,,0,0,0,,那么我们就要来用
Dialogue: 0,0:06:53.32,0:06:54.92,Default,,0,0,0,,一个叫做 `sed` 的工具了
Dialogue: 0,0:06:55.24,0:06:59.02,Default,,0,0,0,,流编辑器 `sed` 是一个更早期的\N
Dialogue: 0,0:06:59.02,0:07:02.06,Default,,0,0,0,,一个叫做 `ed` 的东西的改版
Dialogue: 0,0:07:02.06,0:07:06.10,Default,,0,0,0,,这东西非常之怪，你们肯定不想用
Dialogue: 0,0:07:06.26,0:07:07.52,Default,,0,0,0,,诶你有啥问题
Dialogue: 0,0:07:07.52,0:07:09.24,Default,,0,0,0,,_抱歉我可能漏听了_
Dialogue: 0,0:07:09.24,0:07:10.74,Default,,0,0,0,,_但是 `tsp` 是个啥 [*]_
Dialogue: 0,0:07:10.74,0:07:14.46,Default,,0,0,0,,哦 `tsp` 是我的远程计算机的名字
Dialogue: 0,0:07:17.14,0:07:19.26,Default,,0,0,0,,所以 `sed` 是一个“流”编辑器
Dialogue: 0,0:07:19.26,0:07:25.02,Default,,0,0,0,,可以让你修改流（stream）中的内容
Dialogue: 0,0:07:25.44,0:07:28.34,Default,,0,0,0,,你可以认为这个命令大概是做文本替换
Dialogue: 0,0:07:28.40,0:07:30.42,Default,,0,0,0,,但实际上 `sed` 是一个在输入流上操作的
Dialogue: 0,0:07:30.42,0:07:32.86,Default,,0,0,0,,完整的编程语言 [*]
Dialogue: 0,0:07:32.86,0:07:35.60,Default,,0,0,0,,那么 `sed` 的一个最常用操作就是
Dialogue: 0,0:07:35.60,0:07:39.74,Default,,0,0,0,,在输入流之上执行替换表达式
Dialogue: 0,0:07:39.74,0:07:42.00,Default,,0,0,0,,那么这东西长什么样呢
Dialogue: 0,0:07:42.00,0:07:43.46,Default,,0,0,0,,让我写给你看看
Dialogue: 0,0:07:45.72,0:07:47.88,Default,,0,0,0,,好 现在我要把管道接到 `sed` 上
Dialogue: 0,0:07:47.88,0:07:50.12,Default,,0,0,0,,然后我告诉它我想把
Dialogue: 0,0:07:50.12,0:07:52.76,Default,,0,0,0,,所有 `Disconnected from` 前面的东西
Dialogue: 0,0:07:52.76,0:07:54.76,Default,,0,0,0,,全部丢掉
Dialogue: 0,0:07:57.10,0:07:59.14,Default,,0,0,0,,这可能有些奇怪
Dialogue: 0,0:07:59.14,0:08:00.66,Default,,0,0,0,,但是你会观察到
Dialogue: 0,0:08:00.66,0:08:05.92,Default,,0,0,0,,这些 SSH 里的日期、域名、进程 ID
Dialogue: 0,0:08:05.92,0:08:08.32,Default,,0,0,0,,我并不关心，干脆统统把它删掉
Dialogue: 0,0:08:08.32,0:08:14.06,Default,,0,0,0,,`Disconnected from` 这几个字每条日志都有
Dialogue: 0,0:08:14.06,0:08:15.64,Default,,0,0,0,,也可以删掉
Dialogue: 0,0:08:15.64,0:08:18.46,Default,,0,0,0,,那我就要写一个 `sed` 表达式
Dialogue: 0,0:08:18.60,0:08:20.96,Default,,0,0,0,,而此处我写的是一个 `s/` 表达式
Dialogue: 0,0:08:20.98,0:08:22.98,Default,,0,0,0,,也就是替换表达式（**s**ubstitute）
Dialogue: 0,0:08:22.98,0:08:28.06,Default,,0,0,0,,这个表达式接受两个以斜线分隔的参数
Dialogue: 0,0:08:28.40,0:08:30.94,Default,,0,0,0,,第一个参数是要找的字符串
Dialogue: 0,0:08:31.10,0:08:33.54,Default,,0,0,0,,而第二个是要换成的字符串
Dialogue: 0,0:08:34.08,0:08:37.02,Default,,0,0,0,,这里的意思就是，按这个字符串模式搜索
Dialogue: 0,0:08:37.02,0:08:39.02,Default,,0,0,0,,然后把它换成空的
Dialogue: 0,0:08:39.26,0:08:41.40,Default,,0,0,0,,最后我把它接到 `less` 上
Dialogue: 0,0:08:41.88,0:08:46.02,Default,,0,0,0,,看到了吗？它把这些行的开头剪掉了
Dialogue: 0,0:08:47.32,0:08:49.62,Default,,0,0,0,,用起来真的爽
Dialogue: 0,0:08:49.62,0:08:51.10,Default,,0,0,0,,但是你可能会疑惑
Dialogue: 0,0:08:51.10,0:08:53.74,Default,,0,0,0,,我在这写的这玩意是个啥
Dialogue: 0,0:08:54.24,0:08:57.36,Default,,0,0,0,,那个 `.*` 是干啥的
Dialogue: 0,0:08:57.54,0:09:00.20,Default,,0,0,0,,这实际上是正则表达式的一个例子
Dialogue: 0,0:09:00.40,0:09:04.94,Default,,0,0,0,,正则表达式，你之前写程序可能见过
Dialogue: 0,0:09:05.24,0:09:07.42,Default,,0,0,0,,但是你一旦用起命令行
Dialogue: 0,0:09:07.44,0:09:08.84,Default,,0,0,0,,你会发现这东西用得特别多
Dialogue: 0,0:09:08.84,0:09:10.84,Default,,0,0,0,,特别是对于像这样的数据处理
Dialogue: 0,0:09:11.36,0:09:16.18,Default,,0,0,0,,正则表达式是一个很有力的文本匹配方式
Dialogue: 0,0:09:16.50,0:09:18.58,Default,,0,0,0,,你不一定要把它用在文本上
Dialogue: 0,0:09:18.58,0:09:20.28,Default,,0,0,0,,但匹配文本是最普遍的用途
Dialogue: 0,0:09:20.54,0:09:22.08,Default,,0,0,0,,在正则表达式里
Dialogue: 0,0:09:22.08,0:09:26.62,Default,,0,0,0,,你可以活用一套特殊字符
Dialogue: 0,0:09:26.62,0:09:29.68,Default,,0,0,0,,这些字符不会直接匹配它们本身
Dialogue: 0,0:09:29.68,0:09:34.56,Default,,0,0,0,,而是匹配某一类的字符或者字符串
Dialogue: 0,0:09:34.76,0:09:37.36,Default,,0,0,0,,本质上来说它生成了一段程序
Dialogue: 0,0:09:37.36,0:09:38.88,Default,,0,0,0,,来在文本中进行查找
Dialogue: 0,0:09:38.88,0:09:42.58,Default,,0,0,0,,例如 `.` 代表「匹配一个任意字符」
Dialogue: 0,0:09:44.04,0:09:47.38,Default,,0,0,0,,而如果在某一字符后面加上 `*`
Dialogue: 0,0:09:47.38,0:09:50.28,Default,,0,0,0,,那它代表匹配零次或多次该字符
Dialogue: 0,0:09:51.44,0:09:53.28,Default,,0,0,0,,那么这个 pattern（模式）所描述的就是
Dialogue: 0,0:09:53.28,0:09:55.94,Default,,0,0,0,,任意的、零个或多个字符 [*]
Dialogue: 0,0:09:56.24,0:09:59.30,Default,,0,0,0,,然后跟着一个字符串 `Disconnected from`
Dialogue: 0,0:09:59.98,0:10:01.72,Default,,0,0,0,,这里就是说，我找到这样的字符串
Dialogue: 0,0:10:01.72,0:10:03.30,Default,,0,0,0,,然后把它们换成空的
Dialogue: 0,0:10:03.92,0:10:08.00,Default,,0,0,0,,正则表达式有一大把像这样的特殊字符
Dialogue: 0,0:10:08.00,0:10:09.14,Default,,0,0,0,,各有各的含义
Dialogue: 0,0:10:09.14,0:10:10.12,Default,,0,0,0,,你可以好好运用
Dialogue: 0,0:10:10.12,0:10:11.30,Default,,0,0,0,,我们已经讲过了 `*`
Dialogue: 0,0:10:11.30,0:10:12.40,Default,,0,0,0,,它匹配零或多个字符
Dialogue: 0,0:10:12.54,0:10:13.54,Default,,0,0,0,,还有一个 `+`
Dialogue: 0,0:10:13.54,0:10:15.20,Default,,0,0,0,,作用是匹配一次或多次左面的模式 [*]
Dialogue: 0,0:10:15.20,0:10:16.18,Default,,0,0,0,,那么这样的意思就是
Dialogue: 0,0:10:16.18,0:10:18.32,Default,,0,0,0,,我想要前面那个 pattern 匹配至少一次
Dialogue: 0,0:10:19.82,0:10:21.84,Default,,0,0,0,,此外还有方括号
Dialogue: 0,0:10:21.96,0:10:26.20,Default,,0,0,0,,可以让你匹配多种字符中的一种
Dialogue: 0,0:10:26.20,0:10:28.98,Default,,0,0,0,,好 我现在搞个字符串
Dialogue: 0,0:10:28.98,0:10:30.98,Default,,0,0,0,,比如说 `aba`
Dialogue: 0,0:10:31.22,0:10:36.86,Default,,0,0,0,,我想把 `a` 和 `b` 换成空的
Dialogue: 0,0:10:39.54,0:10:42.76,Default,,0,0,0,,那么我就让 pattern 去把
Dialogue: 0,0:10:42.76,0:10:45.56,Default,,0,0,0,,要么是 `a` 要么是 `b` 的字符
Dialogue: 0,0:10:45.56,0:10:47.56,Default,,0,0,0,,换成空的
Dialogue: 0,0:10:48.74,0:10:50.56,Default,,0,0,0,,就算我把第一个字符换成了 `b`
Dialogue: 0,0:10:50.56,0:10:52.08,Default,,0,0,0,,还是会输出 `ba`
Dialogue: 0,0:10:52.56,0:10:53.42,Default,,0,0,0,,那你可能就会想了
Dialogue: 0,0:10:53.42,0:10:54.84,Default,,0,0,0,,为啥它只替换一次呢
Dialogue: 0,0:10:54.84,0:10:57.10,Default,,0,0,0,,这是因为正则表达式
Dialogue: 0,0:10:57.10,0:10:58.82,Default,,0,0,0,,在默认模式下
Dialogue: 0,0:10:58.82,0:11:03.56,Default,,0,0,0,,每行只匹配一次、替换一次
Dialogue: 0,0:11:03.56,0:11:05.56,Default,,0,0,0,,这是 sed **默认**模式下做的事
Dialogue: 0,0:11:05.78,0:11:08.08,Default,,0,0,0,,你可以再加个 `g` 修饰符
Dialogue: 0,0:11:08.08,0:11:10.88,Default,,0,0,0,,意思是只要能，就尽量多匹配
Dialogue: 0,0:11:11.72,0:11:13.84,Default,,0,0,0,,然后整行就没了
Dialogue: 0,0:11:13.84,0:11:16.40,Default,,0,0,0,,因为每个字符都是 `a` 或 `b` 之一
Dialogue: 0,0:11:16.82,0:11:18.28,Default,,0,0,0,,如果我再加个 `c`
Dialogue: 0,0:11:18.28,0:11:20.24,Default,,0,0,0,,它就移除 `c` 之外的所有东西
Dialogue: 0,0:11:20.24,0:11:23.54,Default,,0,0,0,,如果再向字符串内加其它字符
Dialogue: 0,0:11:23.54,0:11:24.60,Default,,0,0,0,,也都会保留下来
Dialogue: 0,0:11:24.60,0:11:27.02,Default,,0,0,0,,但是 `a` 和 `b` 都会被去掉
Dialogue: 0,0:11:30.88,0:11:36.76,Default,,0,0,0,,你还可以给他加点修饰符
Dialogue: 0,0:11:42.94,0:11:46.18,Default,,0,0,0,,跑这个命令会发生什么呢
Dialogue: 0,0:11:46.18,0:11:48.70,Default,,0,0,0,,它的意思是我想要把零个或多个
Dialogue: 0,0:11:48.76,0:11:51.02,Default,,0,0,0,,`ab` 这个字符串
Dialogue: 0,0:11:51.50,0:11:53.12,Default,,0,0,0,,换成空的
Dialogue: 0,0:11:53.62,0:11:56.86,Default,,0,0,0,,单独的一个 `a` 不会被替换掉 
Dialogue: 0,0:11:57.20,0:11:59.26,Default,,0,0,0,,单独一个 `b` 也不会被替换掉
Dialogue: 0,0:11:59.42,0:12:01.08,Default,,0,0,0,,但是 `ab` 连一起
Dialogue: 0,0:12:01.08,0:12:02.76,Default,,0,0,0,,它就会被替换掉了
Dialogue: 0,0:12:09.04,0:12:10.50,Default,,0,0,0,,`sed` 你好蠢啊
Dialogue: 0,0:12:11.90,0:12:16.16,Default,,0,0,0,,这里加上 `-E` 是因为 `sed` 真的很老了
Dialogue: 0,0:12:16.28,0:12:20.18,Default,,0,0,0,,它只支持很旧版本的正则表达式
Dialogue: 0,0:12:20.18,0:12:22.94,Default,,0,0,0,,一般你要加上 `-E` 开关跑
Dialogue: 0,0:12:22.94,0:12:25.04,Default,,0,0,0,,这样他就会用一套支持更多东西的
Dialogue: 0,0:12:25.04,0:12:26.12,Default,,0,0,0,,更现代的语法
Dialogue: 0,0:12:27.04,0:12:29.04,Default,,0,0,0,,如果它没法使用 `-E` 开关
Dialogue: 0,0:12:29.04,0:12:31.56,Default,,0,0,0,,那你就得在括号前面加 `\`
Dialogue: 0,0:12:31.56,0:12:34.82,Default,,0,0,0,,来告诉它使用“特殊含义”的括号
Dialogue: 0,0:12:35.10,0:12:37.46,Default,,0,0,0,,不然它就只会匹配括号本身
Dialogue: 0,0:12:37.46,0:12:39.10,Default,,0,0,0,,那可能不是你想要的
Dialogue: 0,0:12:39.92,0:12:43.92,Default,,0,0,0,,注意它把这里的 `ab` 替换掉了
Dialogue: 0,0:12:44.08,0:12:46.06,Default,,0,0,0,,把这里的 `ab` 也替换掉了
Dialogue: 0,0:12:46.06,0:12:47.58,Default,,0,0,0,,但是把这个 `c` 
Dialogue: 0,0:12:47.58,0:12:49.46,Default,,0,0,0,,还有末尾的 `a` 留下来了
Dialogue: 0,0:12:49.46,0:12:52.34,Default,,0,0,0,,因为它和 pattern 不匹配
Dialogue: 0,0:12:53.52,0:12:56.14,Default,,0,0,0,,你可以把 pattern 的任意部分括成一组
Dialogue: 0,0:12:56.14,0:12:58.74,Default,,0,0,0,,也有「选择」之类的东西
Dialogue: 0,0:12:58.74,0:13:00.90,Default,,0,0,0,,例如你可以让它移除
Dialogue: 0,0:13:00.90,0:13:03.96,Default,,0,0,0,,任意匹配 `ab` 或 `bc` 的字符串
Dialogue: 0,0:13:06.64,0:13:09.14,Default,,0,0,0,,然后你会注意到这个 `ab` 没了
Dialogue: 0,0:13:09.54,0:13:11.80,Default,,0,0,0,,但就算这个 `bc` 和 pattern 相匹配
Dialogue: 0,0:13:11.88,0:13:13.58,Default,,0,0,0,,它并没有被删除
Dialogue: 0,0:13:13.58,0:13:16.04,Default,,0,0,0,,这是因为 `ab` 已经被删除了
Dialogue: 0,0:13:16.70,0:13:18.70,Default,,0,0,0,,这个 `ab` 被删掉了，对吧
Dialogue: 0,0:13:18.80,0:13:19.78,Default,,0,0,0,,`c` 还留着
Dialogue: 0,0:13:19.78,0:13:21.52,Default,,0,0,0,,这里的 `ab` 被删去了
Dialogue: 0,0:13:21.78,0:13:24.66,Default,,0,0,0,,因为这个 `c` 依然不匹配，还留着
Dialogue: 0,0:13:24.92,0:13:27.76,Default,,0,0,0,,如果我把这个 `a` 删掉
Dialogue: 0,0:13:27.76,0:13:30.08,Default,,0,0,0,,这个 `ab` 的 pattern
Dialogue: 0,0:13:30.08,0:13:31.62,Default,,0,0,0,,就不会匹配到这个 `b`
Dialogue: 0,0:13:31.62,0:13:32.60,Default,,0,0,0,,然后它就会被留下来
Dialogue: 0,0:13:32.60,0:13:34.28,Default,,0,0,0,,然后 `bc` 就会匹配到这个 `bc` 
Dialogue: 0,0:13:34.28,0:13:35.56,Default,,0,0,0,,随后就会被删掉
Dialogue: 0,0:13:36.24,0:13:39.02,Default,,0,0,0,,你刚开始接触的时候
Dialogue: 0,0:13:39.02,0:13:40.50,Default,,0,0,0,,正则用起来会很麻烦
Dialogue: 0,0:13:40.50,0:13:42.36,Default,,0,0,0,,就算当你熟练之后
Dialogue: 0,0:13:42.36,0:13:43.94,Default,,0,0,0,,这东西看起来也很吓人 [*]
Dialogue: 0,0:13:44.36,0:13:46.06,Default,,0,0,0,,这也是为什么
Dialogue: 0,0:13:46.06,0:13:49.26,Default,,0,0,0,,人们常常会使用正则调试器的原因
Dialogue: 0,0:13:49.26,0:13:50.68,Default,,0,0,0,,过一会儿我们会看到
Dialogue: 0,0:13:50.84,0:13:52.96,Default,,0,0,0,,但首先让我们编写一个 pattern
Dialogue: 0,0:13:52.96,0:13:58.06,Default,,0,0,0,,能够匹配日志条目…呃…匹配我们在处理的条目
Dialogue: 0,0:13:58.56,0:14:02.68,Default,,0,0,0,,让我们先从文件里拿几行出来
Dialogue: 0,0:14:02.68,0:14:04.18,Default,,0,0,0,,那就前五行吧
Dialogue: 0,0:14:04.38,0:14:06.94,Default,,0,0,0,,看，这几行现在是这样一个形式
Dialogue: 0,0:14:08.46,0:14:13.76,Default,,0,0,0,,但是我们要做的是，只留用户名
Dialogue: 0,0:14:14.38,0:14:22.42,Default,,0,0,0,,那么我们就会想把它写成这样...
Dialogue: 0,0:14:29.14,0:14:31.50,Default,,0,0,0,,等下 让我先给你看一个东西
Dialogue: 0,0:14:31.50,0:14:33.48,Default,,0,0,0,,我们先整出来
Dialogue: 0,0:14:33.48,0:14:44.74,Default,,0,0,0,,写着 _这样一串_ 的一行
Dialogue: 0,0:14:45.18,0:14:47.76,Default,,0,0,0,,那么这是一条登录记录
Dialogue: 0,0:14:48.20,0:14:52.52,Default,,0,0,0,,有人打算以 `Disconnected from` 作为用户名登录
Dialogue: 0,0:14:53.38,0:14:54.72,Default,,0,0,0,,_（学生）少了个 `s`_
Dialogue: 0,0:14:54.72,0:14:59.72,Default,,0,0,0,,少了个 `s` 吗？emmmm...
Dialogue: 0,0:14:59.72,0:15:00.52,Default,,0,0,0,,_（学生）第一个 `Disconnected`_
Dialogue: 0,0:15:00.52,0:15:02.52,Default,,0,0,0,,**`Disconnected`** 多谢
Dialogue: 0,0:15:04.06,0:15:07.40,Default,,0,0,0,,那么你会发现这个命令连用户名一起移除了
Dialogue: 0,0:15:07.40,0:15:09.92,Default,,0,0,0,,这是因为像 `.*`
Dialogue: 0,0:15:10.02,0:15:12.58,Default,,0,0,0,,这种匹配一个**范围**的表达式
Dialogue: 0,0:15:12.76,0:15:14.20,Default,,0,0,0,,它们是用贪心策略
Dialogue: 0,0:15:14.20,0:15:16.54,Default,,0,0,0,,去尽可能多的匹配
Dialogue: 0,0:15:16.54,0:15:21.12,Default,,0,0,0,,因此虽然我们在这里想保留用户名
Dialogue: 0,0:15:21.44,0:15:26.50,Default,,0,0,0,,但是这个 pattern 会一路匹配到它第二次
Dialogue: 0,0:15:26.50,0:15:27.86,Default,,0,0,0,,也就是最后一次出现
Dialogue: 0,0:15:27.86,0:15:30.02,Default,,0,0,0,,所以包括用户名在内
Dialogue: 0,0:15:30.02,0:15:32.02,Default,,0,0,0,,在这之前出现的文本都会被删掉
Dialogue: 0,0:15:32.20,0:15:33.46,Default,,0,0,0,,那么我们就要想一个
Dialogue: 0,0:15:33.46,0:15:35.12,Default,,0,0,0,,机智一点的方法来匹配
Dialogue: 0,0:15:35.12,0:15:36.98,Default,,0,0,0,,而不仅仅是使用 `.*`
Dialogue: 0,0:15:37.28,0:15:39.80,Default,,0,0,0,,这样如果输入比较诡异
Dialogue: 0,0:15:39.80,0:15:41.80,Default,,0,0,0,,可能会输出一些诡异的东西
Dialogue: 0,0:15:42.62,0:15:46.18,Default,,0,0,0,,好 让我们来看看怎么匹配这些行
Dialogue: 0,0:15:46.46,0:15:48.88,Default,,0,0,0,,首先先跑个 `head` （过滤一下）
Dialogue: 0,0:15:55.78,0:15:58.54,Default,,0,0,0,,嗯...让我们从头开始构造这个 pattern
Dialogue: 0,0:16:00.02,0:16:02.72,Default,,0,0,0,,显然我们不想 `\` 满地跑
Dialogue: 0,0:16:02.72,0:16:06.34,Default,,0,0,0,,因此首先我们整个 `-E`
Dialogue: 0,0:16:06.78,0:16:08.98,Default,,0,0,0,,这些行是这样一个形式
Dialogue: 0,0:16:08.98,0:16:10.98,Default,,0,0,0,,先是 `from`
Dialogue: 0,0:16:10.98,0:16:13.46,Default,,0,0,0,,有些写了 `invalid`
Dialogue: 0,0:16:14.36,0:16:18.30,Default,,0,0,0,,有些又没有 是吧
Dialogue: 0,0:16:18.54,0:16:21.04,Default,,0,0,0,,那这里的问号就是匹配 0 或 1 次
Dialogue: 0,0:16:21.38,0:16:23.04,Default,,0,0,0,,那这样写就是说
Dialogue: 0,0:16:23.04,0:16:25.52,Default,,0,0,0,,0 或 1 个 invalid 后面跟个空格\
Dialogue: 0,0:16:26.02,0:16:27.70,Default,,0,0,0,,然后是 `user`……？
Dialogue: 0,0:16:30.36,0:16:32.90,Default,,0,0,0,,啊——多了个空格 可不敢乱多
Dialogue: 0,0:16:33.62,0:16:36.42,Default,,0,0,0,,然后后面有个用户名
Dialogue: 0,0:16:36.98,0:16:40.28,Default,,0,0,0,,然后后面是...
Dialogue: 0,0:16:40.28,0:16:43.12,Default,,0,0,0,,然后后面是个 IP 地址
Dialogue: 0,0:16:43.32,0:16:46.28,Default,,0,0,0,,这里可以用区间匹配的那些语法
Dialogue: 0,0:16:46.28,0:16:48.98,Default,,0,0,0,,这个的意思就是 匹配 `0` 到 `9` 或者 `.` 
Dialogue: 0,0:16:49.54,0:16:51.86,Default,,0,0,0,,这是 IP 地址的特征
Dialogue: 0,0:16:52.36,0:16:54.14,Default,,0,0,0,,而且我们要匹配多次
Dialogue: 0,0:16:55.72,0:16:57.94,Default,,0,0,0,,然后后面是 `port`（端口）
Dialogue: 0,0:16:57.94,0:16:59.94,Default,,0,0,0,,所以我们匹配一个固定的字符串 `port`
Dialogue: 0,0:16:59.94,0:17:05.16,Default,,0,0,0,,然后再来一次数字 `0` 到 `9`，匹配多次
Dialogue: 0,0:17:07.54,0:17:10.14,Default,,0,0,0,,除此之外我们还要做一件事
Dialogue: 0,0:17:10.14,0:17:11.68,Default,,0,0,0,,我们要给表达式打锚点
Dialogue: 0,0:17:11.68,0:17:14.48,Default,,0,0,0,,正则表达式里有两个特殊字符
Dialogue: 0,0:17:14.48,0:17:18.36,Default,,0,0,0,,`^` 匹配行开头
Dialogue: 0,0:17:18.68,0:17:20.92,Default,,0,0,0,,而 `$` 匹配行结尾
Dialogue: 0,0:17:21.82,0:17:23.12,Default,,0,0,0,,那我们这样写
Dialogue: 0,0:17:23.12,0:17:26.38,Default,,0,0,0,,就代表着这个正则表达式匹配了一整行
Dialogue: 0,0:17:27.32,0:17:28.62,Default,,0,0,0,,为什么要这样写呢
Dialogue: 0,0:17:28.62,0:17:31.08,Default,,0,0,0,,假设有个人把它的用户名
Dialogue: 0,0:17:31.08,0:17:33.22,Default,,0,0,0,,设成了这一整条日志文本
Dialogue: 0,0:17:34.12,0:17:35.88,Default,,0,0,0,,那当你匹配的时候
Dialogue: 0,0:17:35.88,0:17:39.26,Default,,0,0,0,,就会匹配到用户名
Dialogue: 0,0:17:39.58,0:17:40.82,Default,,0,0,0,,坏耶——
Dialogue: 0,0:17:41.38,0:17:44.02,Default,,0,0,0,,一般来说锚点能加尽量加
Dialogue: 0,0:17:44.02,0:17:46.02,Default,,0,0,0,,避免这种偶然事件发生
Dialogue: 0,0:17:46.38,0:17:48.64,Default,,0,0,0,,现在看看跑这个命令有什么效果
Dialogue: 0,0:17:48.80,0:17:50.40,Default,,0,0,0,,这个命令删掉了好多行
Dialogue: 0,0:17:50.46,0:17:51.56,Default,,0,0,0,,但还是留下来了一些
Dialogue: 0,0:17:51.70,0:17:54.98,Default,,0,0,0,,例如这个 最后有个 `[preauth]`
Dialogue: 0,0:17:55.58,0:17:58.12,Default,,0,0,0,,那我们把它炖了吧
Dialogue: 0,0:17:58.30,0:18:02.90,Default,,0,0,0,,空格，`preauth`，方括号
Dialogue: 0,0:18:02.90,0:18:04.84,Default,,0,0,0,,方括号是特殊字符要转义
Dialogue: 0,0:18:05.36,0:18:05.92,Default,,0,0,0,,好耶
Dialogue: 0,0:18:06.08,0:18:09.00,Default,,0,0,0,,再多来几行呢
Dialogue: 0,0:18:09.70,0:18:11.70,Default,,0,0,0,,啊 还是有奇怪的东西
Dialogue: 0,0:18:11.70,0:18:13.08,Default,,0,0,0,,这些行非空
Dialogue: 0,0:18:13.08,0:18:15.08,Default,,0,0,0,,那就意味着 pattern 和它不匹配
Dialogue: 0,0:18:16.14,0:18:17.48,Default,,0,0,0,,拿这个来说
Dialogue: 0,0:18:17.48,0:18:20.78,Default,,0,0,0,,它写的是 `authenticating` 而不是 `invalid`
Dialogue: 0,0:18:21.04,0:18:22.06,Default,,0,0,0,,好吧
Dialogue: 0,0:18:23.10,0:18:25.48,Default,,0,0,0,,改成 `invalid` 或者 `authenticating` 之一
Dialogue: 0,0:18:25.48,0:18:27.22,Default,,0,0,0,,在用户名之前匹配零次或一次
Dialogue: 0,0:18:28.26,0:18:29.10,Default,,0,0,0,,现在如何
Dialogue: 0,0:18:30.40,0:18:32.18,Default,,0,0,0,,看上去挺稳的
Dialogue: 0,0:18:32.86,0:18:35.54,Default,,0,0,0,,但是这个输出没多少用啊
Dialogue: 0,0:18:35.54,0:18:37.80,Default,,0,0,0,,它只是成功地
Dialogue: 0,0:18:37.80,0:18:39.80,Default,,0,0,0,,把日志的每一行都清空了
Dialogue: 0,0:18:39.80,0:18:41.42,Default,,0,0,0,,这不太有用啊
Dialogue: 0,0:18:41.42,0:18:43.42,Default,,0,0,0,,
