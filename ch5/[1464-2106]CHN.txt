[1464]
这条 commit
既是 `dog` commit 的子节点
又是 `cat` commit 的子节点
所以从这个 commit 往回看
可以同时看到两条分支
而我们现在所在的这个 commit
同时有 `dog` 和 `cat` 两个 commit 里实现的功能
所以如果我们用 `cat` 参数跑 `animal.py`
它就会猫叫
如果用 `dog` 参数跑
它就会狗叫
如果用其他参数跑
它就会采取默认行为
所以 我们这里展示了
你要怎么分支出去
并行开发不同的部分
然后用 `merge` 命令
[1478]
把他们合到一起 #REVIEW `resolve those different branches`
来同时具有这几个并行开发的分支里实现的功能
然后我们来说一下合并时
会发生的一个冲突的问题
这些冲突会以冲突标记的形式在文本文件里出现
你可以手动解决这些冲突
而 git 也有一些高级的工具来帮助你解决冲突
[1491]
但我们只在课程笔记里具体地说明了 # REVIEW lecture note
并不会在这节课上展示
这就是 git 的分支和合并
有什么疑惑吗
没有啊 好耶
这节课的下一个部分
我们来聊聊 `git remote`
这是你与其他人 git 协作的一个方式
一个 git 仓库
也就是 `.git` 文件夹里的东西
代表了这个仓库的整个历史
里面有着所有对象文件和引用
[1502]
仓库的所有快照也都在里面
而你和其他人进行 git 协作的方式是
其他人也有整个 git 仓库的副本
而你可以让你本地的仓库实例
知道其他仓库的存在
这个概念在 git 里叫做 remote
而 `git remote` 命令
会列出所有它现在知道的远程仓库
而对于我们现在这个仓库
因为我们啥都还没告诉它
`git remote` 就啥也没打出来
现在它只知道它自己存在
实践上 在和别人协作的时候
你的 git 仓库会知道 GitHub 上也有个仓库
[1523]
然后就会有把你的修改发送到远程仓库
例如把修改发到 GitHub
和把例如 GitHub 上远程的修改
取回到本地的命令
在这一部分
我们并不会演示怎么注册 GitHub
登录 新建仓库
这些教程一搜一大把
我们这次就直接用
这台机器上另一个文件夹
把它当作 git remote
让我换到上一层目录
开个新的文件夹叫做 remote
然后用 `git init --bare` 初始化
[1544]
*--bare as a way to mark a repository as a storage facility, as opposed to a development environment
*`--bare` 告诉 git 这个仓库用来储存而不是开发
这些操作在你实际用远程操作的时候
并不会用到
*注意这里并没有 `.git` 文件夹
这样一波组合拳下来
我们就开出了一个
能拿来做远程仓库的文件夹
然后我们回到 `demo` 文件夹
再跑一次 `git remote`
啥都没有
但是我可以用 `git remote add` 这个功能
来让它知道有个远程仓库的存在
这个命令的格式是这样的
远程仓库有个名字 有个 URL
[1560]
我在这里根据~~老祖宗的决定~~
选了 `origin` 这个名字
一般只有一个远程仓库时就会选这个名字
然后 URL 这里
如果你用在线的托管服务的话
一般来说这里填的是
GitHub 或者 GitLab 这些给的 URL
而我们这里演示的
就只是本地机器上另一个仓库的路径
也就是上层目录里当成远程仓库的 `remote` 文件夹
我加完远程仓库了以后
我就能用许多的命令可以与这个仓库交互了
其中一个特别有用的
是 `git push` 命令
用来把本地的修改发给远程仓库
它还要输入远程仓库的名字
本地的分支名 冒号 远程仓库的分支名
它就会把远程仓库的分支
更新成本地这个分支名里的内容
如果远程没有这个分支的话就会开个新分支
[1585]
一个实际的例子是
我 push 到我唯一的一个远程仓库
叫做 `origin`
我看看我该 push 啥
看看历史图
我这有好多好东西可以 push
那我把我本地的 `master` 分支
push 到 `origin` 的同名分支
这样远程仓库会有一个这样的同名分支
然后跑起来
然后这里最后一行写了
我在远程仓库上面开了个新分支
本地的 master 指向远程的 master（右边）
* 视频上光标的移动和本地/远程的关系没有对应 #REVIEW 本地试过了
[1601]
然后我现在再跑 `git log`
它就会告诉我
我现在处在蓝色的 `HEAD` 这里
绿色的是我本地 git 仓库的最新 commit
然后我们看到这里有个我们没见过的红色玩意
代表着我本地副本所知道的
远程仓库的引用
这里 在远程仓库 `origin` 里
好巧不巧有个同名分支 `master`
和本地的 master 分支指向同一个 commit
