[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: ../../Lecture 6 - Version Control (git) (2020) [2sjqTHE0zok].mp4
Video File: ../../Lecture 6 - Version Control (git) (2020) [2sjqTHE0zok].mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 331
Active Line: 350
Video Position: 24348

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:02.24,0:00:04.51,Default,,0,0,0,, 好，我们开始上今天的课了
Dialogue: 0,0:00:05.61,0:00:08.72,Default,,0,0,0,,所以在我们实际开始之前稍微说一下
Dialogue: 0,0:00:09.05,0:00:11.80,Default,,0,0,0,,根据大家的反馈来看
Dialogue: 0,0:00:11.80,0:00:13.35,Default,,0,0,0,,你们好多人都觉得
Dialogue: 0,0:00:13.70,0:00:15.38,Default,,0,0,0,,每天上完课后的答疑时间
Dialogue: 0,0:00:15.68,0:00:16.85,Default,,0,0,0,,都只能问关于当天的课程内容的东西
Dialogue: 0,0:00:16.85,0:00:17.76,Default,,0,0,0,,但事实上不是这回事儿
Dialogue: 0,0:00:18.04,0:00:19.33,Default,,0,0,0,,你可以在答疑时间问
Dialogue: 0,0:00:19.33,0:00:21.01,Default,,0,0,0,,关于所有我们所教的所有课程的问题
Dialogue: 0,0:00:21.01,0:00:22.78,Default,,0,0,0,,不管它是前一天的还是上一周的
Dialogue: 0,0:00:22.96,0:00:24.98,Default,,0,0,0,,甚至我们课上没讲过的东西
Dialogue: 0,0:00:24.99,0:00:26.31,Default,,0,0,0,,只要你对这个东西好奇 就都可以问
Dialogue: 0,0:00:26.76,0:00:29.58,Default,,0,0,0,,所以可以在答疑时间问任何问题
Dialogue: 0,0:00:31.93,0:00:35.59,Default,,0,0,0,,答疑在 32 号楼 G9 休息室
Dialogue: 0,0:00:35.84,0:00:37.97,Default,,0,0,0,,32 号楼也被称作史塔特科技中心[*] 
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* （MIT内一栋著名的复合式建筑）
Dialogue: 0,0:00:38.15,0:00:39.00,Default,,0,0,0,,这栋楼由两个结构构成
Dialogue: 0,0:00:39.00,0:00:40.52,Default,,0,0,0,,分别是 G 塔和 D 塔 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* （G 塔是 Gates Tower，D 塔是 Dreyfoos Tower [维基百科]）
Dialogue: 0,0:00:40.76,0:00:42.68,Default,,0,0,0,,我们是在 G 塔的九楼答疑
Dialogue: 0,0:00:42.68,0:00:43.96,Default,,0,0,0,,所以如果你坐电梯上去
Dialogue: 0,0:00:44.08,0:00:45.29,Default,,0,0,0,,那你一出电梯，休息室就在你右手边
Dialogue: 0,0:00:49.86,0:00:50.56,Default,,0,0,0,,所以今天呢
Dialogue: 0,0:00:50.56,0:00:52.56,Default,,0,0,0,,我们要讨论下版本控制系统
Dialogue: 0,0:00:52.91,0:00:54.16,Default,,0,0,0,,一开始我先想了解下
Dialogue: 0,0:00:54.16,0:00:55.63,Default,,0,0,0,,之前有哪些人
Dialogue: 0,0:00:55.63,0:00:57.29,Default,,0,0,0,,用过版本控制系统
Dialogue: 0,0:00:57.52,0:00:59.47,Default,,0,0,0,,如果你之前用过 Git、Subversion、Mercurial [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* 这三个词分别是无用的饭桶、破环颠覆、汞制剂，这代表着人们对版本管理的态度
Dialogue: 0,0:00:59.47,0:01:02.50,Default,,0,0,0,,或者其他的版本控制系统
Dialogue: 0,0:01:02.50,0:01:04.25,Default,,0,0,0,,那你就举个手
Dialogue: 0,0:01:05.30,0:01:06.95,Default,,0,0,0,,啊好，看来用过的人还不少
Dialogue: 0,0:01:08.06,0:01:10.39,Default,,0,0,0,,所以我就不讲版本控制系统相关的
Dialogue: 0,0:01:10.39,0:01:11.93,Default,,0,0,0,,一些比较烂大街的东西了
Dialogue: 0,0:01:13.12,0:01:14.77,Default,,0,0,0,,那么，我们将很快深入 `git` 的细节
Dialogue: 0,0:01:15.74,0:01:17.42,Default,,0,0,0,,比如它的数据模型和内在实现
Dialogue: 0,0:01:17.80,0:01:19.06,Default,,0,0,0,,但我们先大概讲一下
Dialogue: 0,0:01:19.16,0:01:20.64,Default,,0,0,0,,版本控制系统是用来
Dialogue: 0,0:01:20.80,0:01:25.77,Default,,0,0,0,,跟踪源代码、文件、文件夹修改的工具
Dialogue: 0,0:01:26.22,0:01:27.64,Default,,0,0,0,,正如“版本控制系统”这个名字所说
Dialogue: 0,0:01:27.83,0:01:29.64,Default,,0,0,0,,这些工具帮我们追踪
Dialogue: 0,0:01:29.64,0:01:32.67,Default,,0,0,0,,我们对一组文件做出的历史更改
Dialogue: 0,0:01:33.04,0:01:36.04,Default,,0,0,0,,并且还可以让团队合作更加便捷
Dialogue: 0,0:01:36.43,0:01:39.09,Default,,0,0,0,,所以它在一群人一起开发软件项目时
Dialogue: 0,0:01:39.34,0:01:40.44,Default,,0,0,0,,非常有用
Dialogue: 0,0:01:42.25,0:01:45.48,Default,,0,0,0,,版本控制系统通过（记录）一串快照的方式
Dialogue: 0,0:01:45.76,0:01:47.08,Default,,0,0,0,,来追踪对一个文件夹和它的内容的更改
Dialogue: 0,0:01:47.56,0:01:49.87,Default,,0,0,0,,所以你就能把整个文件夹的状态
Dialogue: 0,0:01:49.87,0:01:51.15,Default,,0,0,0,,还有里面的软件项目之类的玩意
Dialogue: 0,0:01:51.47,0:01:53.14,Default,,0,0,0,,像拍照一样定格下来
Dialogue: 0,0:01:53.16,0:01:54.33,Default,,0,0,0,,所以你就有一串快照
Dialogue: 0,0:01:54.78,0:01:56.51,Default,,0,0,0,,每个快照都描述了
Dialogue: 0,0:01:56.51,0:01:58.51,Default,,0,0,0,,你跟踪的这个顶层目录下的
Dialogue: 0,0:01:58.51,0:01:59.57,Default,,0,0,0,,所有文件和文件夹的信息
Dialogue: 0,0:02:00.30,0:02:02.08,Default,,0,0,0,,然后版本控制系统维护的东西
Dialogue: 0,0:02:02.08,0:02:03.26,Default,,0,0,0,,除了你对这些文件内容的实际更改之外
Dialogue: 0,0:02:03.57,0:02:05.48,Default,,0,0,0,,还有一堆元数据（Metadata）
Dialogue: 0,0:02:05.79,0:02:08.71,Default,,0,0,0,,这是为了让我们弄清楚
Dialogue: 0,0:02:08.98,0:02:11.45,Default,,0,0,0,,“某个文件的某个修改是谁写的”
Dialogue: 0,0:02:11.68,0:02:13.36,Default,,0,0,0,,“某个修改是什么时候发生的”
Dialogue: 0,0:02:13.75,0:02:15.95,Default,,0,0,0,,所以版本控制系统维护了
Dialogue: 0,0:02:15.95,0:02:18.49,Default,,0,0,0,,像是作者、提交时间戳之类的元数据
Dialogue: 0,0:02:18.78,0:02:21.44,Default,,0,0,0,,你也可以给这些快照附加其他你想要的额外信息
Dialogue: 0,0:02:23.56,0:02:25.37,Default,,0,0,0,,为什么版本控制系统作用很大呢？
Dialogue: 0,0:02:25.55,0:02:26.96,Default,,0,0,0,,就算你自己一个人做项目的时候
Dialogue: 0,0:02:26.96,0:02:27.97,Default,,0,0,0,,它也很有用
Dialogue: 0,0:02:28.41,0:02:29.89,Default,,0,0,0,,你可以用它来看
Dialogue: 0,0:02:29.89,0:02:31.89,Default,,0,0,0,,你之前写的旧版本的代码
Dialogue: 0,0:02:32.07,0:02:33.89,Default,,0,0,0,,可以通过看提交信息来弄明白
Dialogue: 0,0:02:33.89,0:02:35.22,Default,,0,0,0,,为什么当时要做这个更改
Dialogue: 0,0:02:35.60,0:02:37.79,Default,,0,0,0,,还可以通过分支来
Dialogue: 0,0:02:37.89,0:02:40.49,Default,,0,0,0,,不冲突地同时做多个工作
Dialogue: 0,0:02:40.86,0:02:43.92,Default,,0,0,0,,还可以同时修 bug 和开发新功能
Dialogue: 0,0:02:43.92,0:02:45.57,Default,,0,0,0,,并使其互不影响
Dialogue: 0,0:02:45.78,0:02:47.57,Default,,0,0,0,,所以版本控制系统是无价之宝
Dialogue: 0,0:02:47.57,0:02:50.22,Default,,0,0,0,,对于自己一个人写东西或者写小型项目也是如此
Dialogue: 0,0:02:50.58,0:02:54.05,Default,,0,0,0,,就比如我认为这门课的讲师
Dialogue: 0,0:02:54.51,0:02:58.09,Default,,0,0,0,,除了做研究和写大型软件项目时
Dialogue: 0,0:02:58.09,0:02:59.36,Default,,0,0,0,,他们甚至还在安排作业和课程设计
Dialogue: 0,0:02:59.62,0:03:01.83,Default,,0,0,0,,这些小型的东西上也用 `git` 
Dialogue: 0,0:03:03.25,0:03:05.08,Default,,0,0,0,,当然和其他人一起工作的时候
Dialogue: 0,0:03:05.26,0:03:06.97,Default,,0,0,0,,版本控制是一个非常强大的工具
Dialogue: 0,0:03:06.97,0:03:10.12,Default,,0,0,0,,它可以解决不同人写同一份代码时
Dialogue: 0,0:03:11.03,0:03:14.31,Default,,0,0,0,,向代码中更新新内容所引发的内容冲突
Dialogue: 0,0:03:14.31,0:03:15.76,Default,,0,0,0,,它就很有用
Dialogue: 0,0:03:18.82,0:03:19.69,Default,,0,0,0,,所以在你自己工作
Dialogue: 0,0:03:19.71,0:03:20.68,Default,,0,0,0,,或者和其他人一起的时候
Dialogue: 0,0:03:20.68,0:03:21.90,Default,,0,0,0,,`git` 都是个很强大的工具
Dialogue: 0,0:03:21.90,0:03:24.70,Default,,0,0,0,,此外它还有个比较香的功能
Dialogue: 0,0:03:24.70,0:03:26.34,Default,,0,0,0,,就是可以让你回答一些在其他情况下
Dialogue: 0,0:03:26.34,0:03:27.94,Default,,0,0,0,,比较难回答的问题
Dialogue: 0,0:03:28.18,0:03:30.75,Default,,0,0,0,,比如这个软件项目里某个模块是谁写的
Dialogue: 0,0:03:31.09,0:03:34.00,Default,,0,0,0,,或者谁改了某个软件项目里的某行代码
Dialogue: 0,0:03:34.22,0:03:36.13,Default,,0,0,0,,以及为什么要改这行代码
Dialogue: 0,0:03:36.30,0:03:37.82,Default,,0,0,0,,这行代码是什么时候由谁改的 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* 哈哈 原来是自己改的
Dialogue: 0,0:03:39.29,0:03:40.90,Default,,0,0,0,,此外版本控制系统还有一些
Dialogue: 0,0:03:40.90,0:03:43.04,Default,,0,0,0,,其他的很强大的功能
Dialogue: 0,0:03:43.04,0:03:44.57,Default,,0,0,0,,在今天课程的末尾我们会讲
Dialogue: 0,0:03:44.84,0:03:45.86,Default,,0,0,0,,或者如果来不及讲了
Dialogue: 0,0:03:45.86,0:03:47.04,Default,,0,0,0,,你也可以自己去找课程笔记 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* 在课程官网
Dialogue: 0,0:03:48.09,0:03:49.67,Default,,0,0,0,,好 现在我们假设你有个已经
Dialogue: 0,0:03:49.87,0:03:50.85,Default,,0,0,0,,搞了好多年的项目
Dialogue: 0,0:03:50.87,0:03:52.50,Default,,0,0,0,,然后你注意到这个项目的
Dialogue: 0,0:03:52.50,0:03:53.48,Default,,0,0,0,,一些莫名其妙的东西不工作了
Dialogue: 0,0:03:53.48,0:03:55.35,Default,,0,0,0,,比如有些单元测试过不了了
Dialogue: 0,0:03:55.79,0:03:57.72,Default,,0,0,0,,并且它不是这个时候才挂掉的
Dialogue: 0,0:03:57.72,0:03:59.72,Default,,0,0,0,,它可能在之前某个时间挂了
Dialogue: 0,0:04:00.01,0:04:02.20,Default,,0,0,0,,但是你并不确定什么时候有的这个毛病
Dialogue: 0,0:04:02.58,0:04:03.80,Default,,0,0,0,,好，版本控制系统有个
Dialogue: 0,0:04:04.08,0:04:05.93,Default,,0,0,0,,自动查证这种事情的方法
Dialogue: 0,0:04:06.16,0:04:08.68,Default,,0,0,0,,就比如你去给它一份单元测试的代码
Dialogue: 0,0:04:08.68,0:04:09.70,Default,,0,0,0,,现在的程序会在这个单元测试上挂掉
Dialogue: 0,0:04:09.70,0:04:12.00,Default,,0,0,0,,但是你知道过去的某个版本上，它不会挂
Dialogue: 0,0:04:12.23,0:04:13.90,Default,,0,0,0,,然后它就可以去二分查找代码历史 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* 一种算法，可以在值单调的列表（数组）里快速定位元素
Dialogue: 0,0:04:13.90,0:04:16.82,Default,,0,0,0,,搞清楚具体是哪一次代码更改让它挂了
Dialogue: 0,0:04:17.29,0:04:20.12,Default,,0,0,0,,所以只要你知道该如何正确使用这些工具
Dialogue: 0,0:04:20.31,0:04:22.12,Default,,0,0,0,,你就能发现很多又强又炫酷的功能
Dialogue: 0,0:04:26.80,0:04:29.26,Default,,0,0,0,,事实上“市面”上有很多版本控制系统 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* 有开源的，也有商用收费的
Dialogue: 0,0:04:29.26,0:04:32.41,Default,,0,0,0,,而 `git` 则成为了版本控制的某种事实标准
Dialogue: 0,0:04:32.72,0:04:33.78,Default,,0,0,0,,所以这就是为什么
Dialogue: 0,0:04:33.78,0:04:34.91,Default,,0,0,0,,今天的课我们主要讲 `git`
Dialogue: 0,0:04:36.91,0:04:38.92,Default,,0,0,0,,我想给你们看个梗图
Dialogue: 0,0:04:38.92,0:04:42.32,Default,,0,0,0,,这个图刚刚还在屏幕上来着……让我重新找找
Dialogue: 0,0:04:45.83,0:04:47.46,Default,,0,0,0,,所以这是个 xkcd 漫画
Dialogue: 0,0:04:47.68,0:04:49.84,Default,,0,0,0,,这个漫画因为它的绘画风格而出名
Dialogue: 0,0:04:50.10,0:04:51.46,Default,,0,0,0,,我来给你们朗读一下
Dialogue: 0,0:04:52.92,0:04:55.08,Default,,0,0,0,,“这是 `git`，它能通过一个优美的
Dialogue: 0,0:04:55.08,0:04:56.64,Default,,0,0,0,,图论里面的树型模型 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* (此处应是指 Merkle Tree, Git 基于这种数据结构设计，尽管 Git 使用的版本应当被称为 Merkle DAG)
Dialogue: 0,0:04:56.64,0:04:58.34,Default,,0,0,0,,来跟踪项目里的分工工作”
Dialogue: 0,0:04:58.98,0:05:00.08,Default,,0,0,0,,“好，那么我们怎么用呢”
Dialogue: 0,0:05:00.56,0:05:02.60,Default,,0,0,0,,“不知道，就记住这些 Shell 命令
Dialogue: 0,0:05:02.60,0:05:03.47,Default,,0,0,0,,使用它们来同步数据
Dialogue: 0,0:05:03.74,0:05:05.84,Default,,0,0,0,,如果出错了就先把你的文件存到别的地方
Dialogue: 0,0:05:05.93,0:05:07.79,Default,,0,0,0,,然后删掉项目，再下一份新的”
Dialogue: 0,0:05:11.55,0:05:13.49,Default,,0,0,0,,我猜接下来你们有些人不想举手
Dialogue: 0,0:05:13.59,0:05:15.38,Default,,0,0,0,,不过还是要说，如果你之前这样用过 `git`
Dialogue: 0,0:05:15.51,0:05:16.45,Default,,0,0,0,,请举一下手
Dialogue: 0,0:05:16.82,0:05:18.18,Default,,0,0,0,,我在学这个工具的时候肯定这样干过
Dialogue: 0,0:05:18.46,0:05:21.31,Default,,0,0,0,,所以你们中的好多人之前也这么干过
Dialogue: 0,0:05:21.91,0:05:23.29,Default,,0,0,0,,所以这门课的目的就是
Dialogue: 0,0:05:23.29,0:05:23.75,Default,,0,0,0,,让你学点东西
Dialogue: 0,0:05:23.75,0:05:24.96,Default,,0,0,0,,以后你就不会这样用 `git` 了
Dialogue: 0,0:05:26.61,0:05:30.38,Default,,0,0,0,,不幸的是，就像这张图画的那样
Dialogue: 0,0:05:30.77,0:05:34.28,Default,,0,0,0,,`git` 的接口设计得很可怕
Dialogue: 0,0:05:34.28,0:05:35.70,Default,,0,0,0,,它提供的行为抽象全是坑
Dialogue: 0,0:05:35.99,0:05:37.70,Default,,0,0,0,,因为这个原因，我们相信
Dialogue: 0,0:05:37.70,0:05:40.03,Default,,0,0,0,,从接口开始，自顶向下学 `git` 的话
Dialogue: 0,0:05:40.31,0:05:41.96,Default,,0,0,0,,可能不是个好方法
Dialogue: 0,0:05:42.09,0:05:43.37,Default,,0,0,0,,并且这样子可能会让你更加迷惑
Dialogue: 0,0:05:44.08,0:05:46.18,Default,,0,0,0,,不过你也可以像这个图里那样
Dialogue: 0,0:05:46.18,0:05:47.68,Default,,0,0,0,,记住一大堆命令
Dialogue: 0,0:05:47.68,0:05:49.59,Default,,0,0,0,,并且把它们想成魔法咒语
Dialogue: 0,0:05:49.80,0:05:52.21,Default,,0,0,0,,至于这些命令为什么能用也不管
Dialogue: 0,0:05:52.21,0:05:53.07,Default,,0,0,0,,反正它就是能用
Dialogue: 0,0:05:53.07,0:05:55.41,Default,,0,0,0,,但之后你就得像这个图里这样
Dialogue: 0,0:05:55.41,0:05:56.62,Default,,0,0,0,,只要有什么东西出问题了
Dialogue: 0,0:05:56.64,0:05:58.08,Default,,0,0,0,,你就得删了重下
Dialogue: 0,0:05:58.13,0:06:00.84,Default,,0,0,0,,所以尽管 `git` 的接口很丑
Dialogue: 0,0:06:01.30,0:06:04.38,Default,,0,0,0,,但它的内在设计和想法事实上都很美
Dialogue: 0,0:06:05.48,0:06:07.34,Default,,0,0,0,,这种丑陋的接口只能死记硬背
Dialogue: 0,0:06:07.60,0:06:09.41,Default,,0,0,0,,但其内在的优雅设计
Dialogue: 0,0:06:09.41,0:06:10.62,Default,,0,0,0,,其实是可以被理解的
Dialogue: 0,0:06:10.88,0:06:13.36,Default,,0,0,0,,一旦理解了 `git` 的内部实现
Dialogue: 0,0:06:13.36,0:06:15.86,Default,,0,0,0,,也就是它不那么复杂的数据模型
Dialogue: 0,0:06:16.46,0:06:18.88,Default,,0,0,0,,然后你就可以学习接口了
Dialogue: 0,0:06:19.00,0:06:20.57,Default,,0,0,0,,你可能得记住一些东西
Dialogue: 0,0:06:20.75,0:06:22.07,Default,,0,0,0,,但是你可以通过理解
Dialogue: 0,0:06:22.27,0:06:24.07,Default,,0,0,0,,命令是怎么操作内在数据结构的
Dialogue: 0,0:06:24.33,0:06:26.93,Default,,0,0,0,,去理解这些命令到底在干啥
Dialogue: 0,0:06:27.83,0:06:29.74,Default,,0,0,0,,我们今天讲 `git` 的安排
Dialogue: 0,0:06:29.92,0:06:31.52,Default,,0,0,0,,第一部分是关于数据模型的
Dialogue: 0,0:06:31.77,0:06:34.41,Default,,0,0,0,,几乎都是理论
Dialogue: 0,0:06:34.89,0:06:38.26,Default,,0,0,0,,讲一下文件和文件夹，历史快照的模型
Dialogue: 0,0:06:38.56,0:06:40.85,Default,,0,0,0,,然后我们会尝试几个 `git` 命令
Dialogue: 0,0:06:41.14,0:06:43.43,Default,,0,0,0,,最后在（讲义的）资源和练习里
Dialogue: 0,0:06:43.60,0:06:45.22,Default,,0,0,0,,我将会给你一些教程
Dialogue: 0,0:06:45.22,0:06:46.22,Default,,0,0,0,,这些教程能教给你所有细节
Dialogue: 0,0:06:46.43,0:06:49.00,Default,,0,0,0,,因为实际上你要学很多不同的命令
Dialogue: 0,0:06:50.49,0:06:51.85,Default,,0,0,0,,对今天的教学计划
Dialogue: 0,0:06:51.85,0:06:52.88,Default,,0,0,0,,有什么不明白的吗？
Dialogue: 0,0:06:55.24,0:06:57.56,Default,,0,0,0,,好，所以我们现在开始吧
Dialogue: 0,0:06:59.14,0:07:01.62,Default,,0,0,0,,可能有好多比较临时的
Dialogue: 0,0:07:01.62,0:07:03.04,Default,,0,0,0,,能拿来做版本控制的手段
Dialogue: 0,0:07:03.42,0:07:05.74,Default,,0,0,0,,并且我猜部分同学可能之前这样做过
Dialogue: 0,0:07:05.91,0:07:07.39,Default,,0,0,0,,就比如你有些文件
Dialogue: 0,0:07:07.54,0:07:08.96,Default,,0,0,0,,或者一个文件夹里有一堆不同的文件
Dialogue: 0,0:07:09.14,0:07:10.59,Default,,0,0,0,,它们组成了一个软件项目
Dialogue: 0,0:07:10.90,0:07:11.84,Default,,0,0,0,,然后你想跟踪这些文件的更改
Dialogue: 0,0:07:12.15,0:07:13.04,Default,,0,0,0,,你显然可以，比如说
Dialogue: 0,0:07:13.04,0:07:15.20,Default,,0,0,0,,每天把整个文件夹复制一份
Dialogue: 0,0:07:15.32,0:07:16.58,Default,,0,0,0,,然后给它标个时间戳
Dialogue: 0,0:07:17.04,0:07:19.20,Default,,0,0,0,,当你需要和其他人合作的时候
Dialogue: 0,0:07:19.20,0:07:21.80,Default,,0,0,0,,你可以把把整个文件夹压成一个压缩包
Dialogue: 0,0:07:21.80,0:07:23.04,Default,,0,0,0,,然后用电子邮件发给别人
Dialogue: 0,0:07:23.44,0:07:25.16,Default,,0,0,0,,然后如果你和你的朋友
Dialogue: 0,0:07:25.16,0:07:27.16,Default,,0,0,0,,正在写同一个软件的两个不同的部分
Dialogue: 0,0:07:27.33,0:07:28.84,Default,,0,0,0,,你们就可以各写各的
Dialogue: 0,0:07:28.84,0:07:30.18,Default,,0,0,0,,然后你们中的一个人要把压缩包
Dialogue: 0,0:07:30.18,0:07:31.10,Default,,0,0,0,,拿邮件发给另一个人
Dialogue: 0,0:07:31.10,0:07:32.43,Default,,0,0,0,,然后手动把对方给代码做的修改
Dialogue: 0,0:07:32.43,0:07:33.51,Default,,0,0,0,,用某种方法复制下来
Dialogue: 0,0:07:33.51,0:07:35.00,Default,,0,0,0,,粘贴到自己的代码里
Dialogue: 0,0:07:35.08,0:07:36.54,Default,,0,0,0,,然后你的程序里
Dialogue: 0,0:07:36.86,0:07:39.56,Default,,0,0,0,,就同时有了你们两个人写的代码
Dialogue: 0,0:07:42.57,0:07:43.99,Default,,0,0,0,,如果你们之前这样合作过的话
Dialogue: 0,0:07:43.99,0:07:44.69,Default,,0,0,0,,举一下手
Dialogue: 0,0:07:44.69,0:07:47.84,Default,,0,0,0,,我之前肯定这样干过的，你们也有好多
Dialogue: 0,0:07:50.43,0:07:51.49,Default,,0,0,0,,`git` 可以让我们避免干这种
Dialogue: 0,0:07:51.49,0:07:52.67,Default,,0,0,0,,并不怎么优美的工作
Dialogue: 0,0:07:52.67,0:07:54.29,Default,,0,0,0,,它有个经过仔细考虑的模型
Dialogue: 0,0:07:54.29,0:07:55.38,Default,,0,0,0,,这个模型可以让一些
Dialogue: 0,0:07:55.38,0:07:57.38,Default,,0,0,0,,你想做的事变得更加简单
Dialogue: 0,0:07:57.63,0:08:01.04,Default,,0,0,0,,比如追踪你自己在项目里的更改
Dialogue: 0,0:08:01.04,0:08:02.31,Default,,0,0,0,,或者和其他人合作等等
Dialogue: 0,0:08:03.96,0:08:05.55,Default,,0,0,0,,所以 `git` 的这个设计得很棒的模型
Dialogue: 0,0:08:05.55,0:08:07.85,Default,,0,0,0,,给你提供了像是分支、合作
Dialogue: 0,0:08:07.85,0:08:09.54,Default,,0,0,0,,还有从其他人那合并更改
Dialogue: 0,0:08:09.88,0:08:10.99,Default,,0,0,0,,诸如此类令人舒适的功能
Dialogue: 0,0:08:11.93,0:08:12.88,Default,,0,0,0,,`git` 的模型
Dialogue: 0,0:08:12.88,0:08:14.64,Default,,0,0,0,,是一组经过抽象，放在某个顶层目录下的
Dialogue: 0,0:08:14.64,0:08:16.13,Default,,0,0,0,,文件和文件夹
Dialogue: 0,0:08:16.63,0:08:19.02,Default,,0,0,0,,你可能对这种抽象挺熟悉的
Dialogue: 0,0:08:19.02,0:08:20.61,Default,,0,0,0,,因为你电脑上也是这样放文件和文件夹的
Dialogue: 0,0:08:20.91,0:08:22.07,Default,,0,0,0,,所以我给你们来个例子
Dialogue: 0,0:08:22.21,0:08:23.90,Default,,0,0,0,,你有个根目录文件夹
Dialogue: 0,0:08:23.90,0:08:26.51,Default,,0,0,0,,我就叫它 root 吧
Dialogue: 0,0:08:27.41,0:08:30.85,Default,,0,0,0,,这个目录里面有个叫 `foo` 的文件夹
Dialogue: 0,0:08:31.12,0:08:32.96,Default,,0,0,0,,然后 `foo` 里面又有个
Dialogue: 0,0:08:32.96,0:08:34.72,Default,,0,0,0,,叫 `bar.txt` 的文件
Dialogue: 0,0:08:36.55,0:08:38.40,Default,,0,0,0,,这个文件里可以写点东西
Dialogue: 0,0:08:38.40,0:08:39.36,Default,,0,0,0,,比如 `hello world`
Dialogue: 0,0:08:42.84,0:08:44.75,Default,,0,0,0,,回头看看这个根目录
Dialogue: 0,0:08:44.75,0:08:45.83,Default,,0,0,0,,里面有个目录
Dialogue: 0,0:08:45.83,0:08:47.27,Default,,0,0,0,,那它自然也可以有个文件
Dialogue: 0,0:08:47.50,0:08:49.27,Default,,0,0,0,,这个文件里也可以
Dialogue: 0,0:08:50.32,0:08:52.51,Default,,0,0,0,,写点东西
Dialogue: 0,0:08:58.66,0:08:59.78,Default,,0,0,0,,好了，挺简单的
Dialogue: 0,0:09:00.36,0:09:02.60,Default,,0,0,0,,`git` 用了个术语——树（tree）来表示
Dialogue: 0,0:09:02.61,0:09:08.56,Default,,0,0,0,,这些文件和文件夹以及这个最顶上的结构
Dialogue: 0,0:09:08.78,0:09:09.90,Default,,0,0,0,,就叫做树
Dialogue: 0,0:09:12.68,0:09:13.74,Default,,0,0,0,,所以这是个文件夹
Dialogue: 0,0:09:16.37,0:09:21.10,Default,,0,0,0,,然后这些我们平时叫文件的东西被称作 `blob`
Dialogue: 0,0:09:26.50,0:09:29.15,Default,,0,0,0,,好，现在我们有个文件和文件夹构成的模型
Dialogue: 0,0:09:30.53,0:09:32.98,Default,,0,0,0,,并且这个模型还是递归定义的
Dialogue: 0,0:09:33.34,0:09:34.76,Default,,0,0,0,,树里面可以有别的树
Dialogue: 0,0:09:35.12,0:09:37.78,Default,,0,0,0,,树里面还可以有文件
Dialogue: 0,0:09:37.99,0:09:39.52,Default,,0,0,0,,但显然文件里不能有树
Dialogue: 0,0:09:41.24,0:09:44.19,Default,,0,0,0,,好，现在我们有一个由文件和文件夹构成的模型
Dialogue: 0,0:09:45.71,0:09:49.45,Default,,0,0,0,,然后最顶上这个我标出来的东西
Dialogue: 0,0:09:50.55,0:09:52.05,Default,,0,0,0,,就是我们正在跟踪的
Dialogue: 0,0:09:52.06,0:09:53.50,Default,,0,0,0,,被称作为根目录的东西
Dialogue: 0,0:09:53.50,0:09:54.35,Default,,0,0,0,,就比如你电脑上的一个文件夹
Dialogue: 0,0:09:54.36,0:09:55.34,Default,,0,0,0,,这个文件夹对应着一个软件项目
Dialogue: 0,0:09:57.57,0:10:00.80,Default,,0,0,0,,现在我们有了文件和文件夹的模型
Dialogue: 0,0:10:01.20,0:10:02.84,Default,,0,0,0,,那么我们用什么模型来维护历史更改呢
Dialogue: 0,0:10:02.97,0:10:04.04,Default,,0,0,0,,你可以想想一种比较简单的方式
Dialogue: 0,0:10:04.05,0:10:05.05,Default,,0,0,0,,就是你给这整棵树像照相一样“拍”一个快照
Dialogue: 0,0:10:05.05,0:10:06.00,Default,,0,0,0,,然后历史更改就是
Dialogue: 0,0:10:06.00,0:10:07.74,Default,,0,0,0,,由快照所构成的线性序列
Dialogue: 0,0:10:08.16,0:10:09.46,Default,,0,0,0,,你基本上可以把这个东西想成
Dialogue: 0,0:10:10.04,0:10:12.66,Default,,0,0,0,,你有一大堆标上了日期和时间的
Dialogue: 0,0:10:13.14,0:10:14.24,Default,,0,0,0,,文件夹的拷贝
Dialogue: 0,0:10:15.13,0:10:16.51,Default,,0,0,0,,但 `git` 的实现
Dialogue: 0,0:10:16.51,0:10:18.06,Default,,0,0,0,,并不是用的这样简单的线性模型
Dialogue: 0,0:10:18.17,0:10:19.66,Default,,0,0,0,,它用了一个更有意思的东西
Dialogue: 0,0:10:20.16,0:10:21.86,Default,,0,0,0,,你之前可能听说过这个术语
Dialogue: 0,0:10:22.04,0:10:23.97,Default,,0,0,0,,`git` 有一个用有向无环图 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,*（Directed Acylic Graph，一种图论结构）
Dialogue: 0,0:10:24.05,0:10:24.93,Default,,0,0,0,,来维护更改历史的模型
Dialogue: 0,0:10:25.36,0:10:27.18,Default,,0,0,0,,这个挺像一个听起来比较有意思的数学名词
Dialogue: 0,0:10:27.39,0:10:29.31,Default,,0,0,0,,但它实际上完全没有那么复杂
Dialogue: 0,0:10:30.28,0:10:33.90,Default,,0,0,0,,在 `git` 里，每个快照都有一些父节点
Dialogue: 0,0:10:34.38,0:10:35.53,Default,,0,0,0,,然后我们想知道
Dialogue: 0,0:10:35.53,0:10:37.37,Default,,0,0,0,,众多更改之间的前后关系
Dialogue: 0,0:10:37.79,0:10:40.08,Default,,0,0,0,,假设我现在用圆圈
Dialogue: 0,0:10:40.34,0:10:41.93,Default,,0,0,0,,来表示一个单独的快照
Dialogue: 0,0:10:42.09,0:10:45.76,Default,,0,0,0,,这个圈表示整棵树里的所有内容
Dialogue: 0,0:10:46.08,0:10:47.84,Default,,0,0,0,,我整个项目的所有文件和文件夹
Dialogue: 0,0:10:48.67,0:10:50.76,Default,,0,0,0,,正处在某个状态
Dialogue: 0,0:10:51.46,0:10:52.76,Default,,0,0,0,,然后我改了一些文件
Dialogue: 0,0:10:52.76,0:10:54.04,Default,,0,0,0,,这样它就在另一个状态了
Dialogue: 0,0:10:54.63,0:10:56.81,Default,,0,0,0,,然后用我又加了一些文件，它就又去了另一个状态
Dialogue: 0,0:10:57.19,0:10:58.81,Default,,0,0,0,,每个状态都有个指针
Dialogue: 0,0:10:58.81,0:10:59.97,Default,,0,0,0,,指向它之前的状态
Dialogue: 0,0:11:01.48,0:11:03.36,Default,,0,0,0,,到现在为止，这还是个线性的历史更改
Dialogue: 0,0:11:03.68,0:11:06.20,Default,,0,0,0,,但是我们现在做点有意思的事
Dialogue: 0,0:11:06.59,0:11:11.33,Default,,0,0,0,,你可以从某个快照分叉你的历史更改
Dialogue: 0,0:11:11.67,0:11:12.43,Default,,0,0,0,,也就是说
Dialogue: 0,0:11:12.43,0:11:15.16,Default,,0,0,0,,我想要基于这个版本的更改
Dialogue: 0,0:11:17.94,0:11:19.37,Default,,0,0,0,,像这样创建一个新的快照
Dialogue: 0,0:11:21.24,0:11:22.83,Default,,0,0,0,,通过这种历史更改模型
Dialogue: 0,0:11:22.83,0:11:23.77,Default,,0,0,0,,你可以在做一些类似于
Dialogue: 0,0:11:23.95,0:11:26.79,Default,,0,0,0,,这是我的开发主线
Dialogue: 0,0:11:27.00,0:11:27.95,Default,,0,0,0,,我到这了
Dialogue: 0,0:11:28.07,0:11:30.28,Default,,0,0,0,,现在我有两个不同的任务
Dialogue: 0,0:11:30.69,0:11:31.83,Default,,0,0,0,,一个是我想给我的项目
Dialogue: 0,0:11:31.83,0:11:33.93,Default,,0,0,0,,加点有意思的新特性
Dialogue: 0,0:11:34.17,0:11:35.93,Default,,0,0,0,,这个我要写好几天
Dialogue: 0,0:11:36.24,0:11:38.64,Default,,0,0,0,,但是除此之外，有人报给了我一个 bug
Dialogue: 0,0:11:38.64,0:11:40.29,Default,,0,0,0,,我需要找出来这个 bug，然后赶快修好它
Dialogue: 0,0:11:40.79,0:11:44.44,Default,,0,0,0,,我不想在同一条开发流程线里
Dialogue: 0,0:11:44.46,0:11:45.83,Default,,0,0,0,,同时干这两个工作
Dialogue: 0,0:11:46.80,0:11:48.10,Default,,0,0,0,,`git` 有它自己的一套
Dialogue: 0,0:11:48.10,0:11:50.10,Default,,0,0,0,,能够在更改历史上创建两个分支的方法
Dialogue: 0,0:11:50.32,0:11:52.10,Default,,0,0,0,,通过这种方法，可以临时地并行工作
Dialogue: 0,0:11:52.64,0:11:54.98,Default,,0,0,0,,还能让它们不相互影响
Dialogue: 0,0:11:55.22,0:11:57.32,Default,,0,0,0,,所以我现在创建一个
Dialogue: 0,0:11:57.48,0:11:58.52,Default,,0,0,0,,表示我的项目中
Dialogue: 0,0:11:58.52,0:11:59.63,Default,,0,0,0,,某个正常工作的状态的基底快照
Dialogue: 0,0:11:59.63,0:12:02.10,Default,,0,0,0,,然后从这，我可以创建一个
Dialogue: 0,0:12:02.10,0:12:03.84,Default,,0,0,0,,拿来实现新功能的快照
Dialogue: 0,0:12:04.20,0:12:05.84,Default,,0,0,0,,所以这里就有了
Dialogue: 0,0:12:05.84,0:12:07.14,Default,,0,0,0,,基底项目加上一个新功能
Dialogue: 0,0:12:07.14,0:12:08.72,Default,,0,0,0,,所以我在它上面写个 `+feature`
Dialogue: 0,0:12:11.57,0:12:13.23,Default,,0,0,0,,然后类似的，从这里
Dialogue: 0,0:12:13.23,0:12:15.01,Default,,0,0,0,,我可以回到最初的快照
Dialogue: 0,0:12:15.01,0:12:17.56,Default,,0,0,0,,因为我不想在写新功能的同时修 bug
Dialogue: 0,0:12:18.05,0:12:20.36,Default,,0,0,0,,然后可以到这，再去修 bug
Dialogue: 0,0:12:20.36,0:12:21.74,Default,,0,0,0,,建一个不同的快照
Dialogue: 0,0:12:21.74,0:12:23.74,Default,,0,0,0,,这个快照只包括 bug 修复
Dialogue: 0,0:12:26.91,0:12:27.72,Default,,0,0,0,,但是不包括新功能
Dialogue: 0,0:12:28.33,0:12:31.37,Default,,0,0,0,,最后等我写完这两块东西后
Dialogue: 0,0:12:31.37,0:12:34.42,Default,,0,0,0,,我想把它们一起合并回我正常情况下的代码
Dialogue: 0,0:12:34.42,0:12:36.05,Default,,0,0,0,,这样我的代码就既有新功能又有 bug 修复
Dialogue: 0,0:12:36.48,0:12:38.98,Default,,0,0,0,,所以最后我可以建一个新快照
Dialogue: 0,0:12:39.07,0:12:42.20,Default,,0,0,0,,它合并了这两个快照里的更改
Dialogue: 0,0:12:42.64,0:12:43.81,Default,,0,0,0,,然后这个新快照
Dialogue: 0,0:12:43.81,0:12:45.81,Default,,0,0,0,,以刚刚的两个快照作为父节点
Dialogue: 0,0:12:46.57,0:12:48.64,Default,,0,0,0,,然后这个版本
Dialogue: 0,0:12:54.55,0:12:55.97,Default,,0,0,0,,既有新特性，又有 bug 修复
Dialogue: 0,0:12:57.00,0:12:59.74,Default,,0,0,0,,所以 `git` 这种历史模型
Dialogue: 0,0:12:59.91,0:13:02.57,Default,,0,0,0,,相比于线性的一串快照来说
Dialogue: 0,0:13:02.63,0:13:04.30,Default,,0,0,0,,就显得很炫酷
Dialogue: 0,0:13:04.42,0:13:07.59,Default,,0,0,0,,我想要能支持同时写多个不同的东西
Dialogue: 0,0:13:07.73,0:13:08.94,Default,,0,0,0,,然后也能把我在不同的并行分支里
Dialogue: 0,0:13:09.03,0:13:12.52,Default,,0,0,0,,对它们的修改合并起来。有问题吗？
Dialogue: 0,0:13:12.99,0:13:17.69,Default,,0,0,0,,_[同学的提问]_
Dialogue: 0,0:13:17.69,0:13:20.36,Default,,0,0,0,,好，这是个很不错的点
Dialogue: 0,0:13:20.36,0:13:22.04,Default,,0,0,0,,似乎当你合并东西的时候
Dialogue: 0,0:13:22.04,0:13:24.23,Default,,0,0,0,,你会遇到一些你没想到的错误
Dialogue: 0,0:13:24.23,0:13:25.56,Default,,0,0,0,,你可以设想
Dialogue: 0,0:13:25.56,0:13:28.17,Default,,0,0,0,,这个新特性改了一些代码
Dialogue: 0,0:13:28.17,0:13:29.63,Default,,0,0,0,,一起把 bug 修了 [*]
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,* ？？？这真的可能吗？？？
Dialogue: 0,0:13:29.63,0:13:31.58,Default,,0,0,0,,或者你想， bug 修复把新特性搞坏了
Dialogue: 0,0:13:31.58,0:13:32.63,Default,,0,0,0,,或者一些类似的东西
