【1】好，欢迎来到计算机教育缺失的一课

这节是第三节课

今天让我们来聊聊

文本编辑器的那些事

我认为这个话题真的是

这系列课程中很有价值的一课

因为作为一个程序员

你会在这上面花数不清的时间来写程序

所以如果你能花一点点时间

让这件事更有效率

在你的本科生涯

在你未来工作时

将能够省下成百上千小时的时间

【15】文本编辑器

和其他的编辑器 

例如用来写文章的编辑器

有些小小的不一样

这是因为写程序和写文章不同

当你写程序的时候，你将会花大量时间

来阅读你写的东西

来移动你的光标

来对他们做点小小的修改

而不是像写文章的时候

从上到下一气呵成

【27】因此对于不同用途

我们会使用不同的编辑器

这是很合理的

例如我们用 Word 来写报告

用 Vim、Emacs、VS Code 

以及 Sublime 来编写代码

要学习并熟练使用一个文本编辑器

第一步就是跟着教程学习

这也是来听这节课

以及完成之后的课后练习

能教给你的东西

此外，在这节课结束之后

请用文本编辑器来进行你的所有编辑工作

当你在学习一个复杂工具的时候也是这个方法

【41】那么我们今天学的就是

超强编辑器 Vim

这个工具在程序员间使用非常广泛

当你在学习这样一个复杂的工具的时候

在刚开始学习使用它时

经常遇到的情况是

你的编程效率反而下降了一点

但是不要放弃

我敢说在这个新的编辑器上

花上 20 小时左右

就能恢复到你之前的工作效率

然后它的益处就慢慢体现出来了

【54】学的越久，效率越高

这些复杂工具不难入门

但精通他们将花费一生的时间

因此在整个使用的过程中

如果你觉得：呃这样做效率好低啊

记得去查一下有没有更好的操作方式

答案几乎总是 “是的”

因为编辑器是程序员写给程序员用的[*]
*正所谓出口转内销

写这些编辑器的程序员

肯定碰到了同样的问题，并解决了它

所以你就不用去被它困扰了

所以你在学习的时候记得去查

你可以用搜索引擎，也可以给我们发邮件

以及~~（不存在的）~~来办公室

我们将很愿意帮助你找出高效的方案

【77】关于学哪个编辑器这个问题

在前几次的开课中实际上我们避免了

去教某一个特定的编辑器

因为我们不想把我们的观点强加于你们身上

但是我们着实觉得应该

教你们怎样使用某一个工具，并精通它

另外许多人对编辑器有很强的主见 

课程笔记里有更多关于此方面的链接

你可以去看看各个编辑器这些年来的热门程度

我相信你们都听过 StackOverflow[*]
*一个程序设领域的问答网站，第一讲提到过

这个网站每年都会向开发者发放调查问卷

其中一个问题便是你用哪个编辑器

从结果看来

最热门的图形界面编辑器是 VS Code

而最热门的基于命令行的编辑器是 Vim

基于此以及如下几点原因

今天我们会教你们如何使用 Vim

第一点原因是这个课的所有的教授都使用 Vim 

而且 Vim 是我、John 和 Jose 的主力编辑器

我们用这个编辑器用了很久了

而且用的很开心

此外我们觉得这背后有许多很有趣的东西

所以就算最终你并没有打算长期使用它

我仍然认为学习这些背后的思想很有价值

另外许多的工具也觉得 Vim 哲学很棒

从而使它们提供了 Vim 模式

例如当下最热门的 VS Code 

支持 Vim 键位绑定

而且那个插件已经被下载了数百万次

【117】所以这门课程里面的很多工具

你会发现它们都支持 Vim 模式

包括 Python 的 REPL[*]
*REPL 指交互式的编程环境，也能指代命令行的模式

包括 Jupyter Notebook 

甚至你的浏览器

因此我们今天就会教给你这个好东西

但是一个这么强大的工具，这一节课讲不完

我们的目标是教给你隐含在其中的核心思想

以及一些基本的操作例如打开关闭文件

移动你的光标

作出一些修改等等

我们不期望你听一次就能记下来每一个细节

因为这节课会上得挺快的

但是在课程笔记和练习里会涵盖他们

因此我强烈建议你把所有练习过一遍

至少是基础练习

有什么疑惑吗？

好

那隐含在其背后的第一个精妙思想就是

【145】Vim 是一个基于模式（Modal）的编辑器

这意味着什么呢

Modal 这个词源于 Mode

这就意味着 Vim 有多个模式

这个思想就源于，当你在写程序的时候

你会经常做不同的事

有时候你在读代码 

有时候你在给代码做小改动

在某处寻找、改正一个小地方

有时候你在写一长串的代码

例如在从零开始写一个函数

因此为了这些不同的工作就有了不同的模式

【161】那么我现在想先在黑板上写些东西

这样方便我后面讲课

当你开始使用 Vim 时它会在 Normal 模式下启动

在这个模式下，各种键位组合

【167】拥有在这个模式下的特定意义

其中就有一些按键组合来切换到其他的模式

而切换后这些键位组合的意义也相应改变

因此你的大部分时间都会在 Insert 和 Normal 模式下

在 Normal 模式下按下 `I` 键就可以进入 Insert 模式

而在 Insert 模式下按下 `Esc` 就可以回到 Normal 模式

这里我们注意一下我们表示按键的方式

这个表示方式将会用在课上、课堂笔记里

以及 Vim 给你的提示中

当仅仅是代表例如 `I` 键这样一个按键本身时

那么就会直接写 `I`

但是对于例如 `Ctrl`+`V` 这种按键组合

就有可能以这么几种形式来体现

第一种是一个“脱字符号”后面跟着控制用字符[*]
*控制用字符指那个 `V`，也就是组合键中的另一个键

这是一种写法

另一种写法可能是你最熟悉的

在课程笔记里我们有时候会写成 `Ctrl-V` 这样

而有些地方我们可能会写成 `<C-V>` 这样 

好这样介绍一下方便后面讲课

【202】然后回来

Vim 有好几种模式

而 Normal 模式是用来移动光标、阅读东西

以及在文件间切换的

而 Insert 模式是用来输入的

因此在这个模式下你的按键大多会直接进入 buffer 

而在 Normal 模式下则不然

它们不会进入 buffer 

而是用来进行一些浏览和编辑操作

另外我们要认识到真实的情况会比这更复杂一点

此外还有许多的模式

我现在把他们列出来

方便我后面的讲课

Vim 里还有个替换模式

不像插入模式会把字符往后移

替换模式会直接覆盖掉文本

【221】在选择方面也有着许多的模式

有一个叫 Visual 模式

还有一个 Visual Line 模式 

以及一个 Visual Block 模式

替换模式的进入方法是按下 `R` 键

进入 Visual 模式则是按下 `V` 键

按 `Shift`+`V` 进入 Visual Line 模式

而按下 `Ctrl`+`V` 进入 Visual Block 模式

此外还有一个命令行模式

按下冒号键就可以进入

好这样写下来我们后面讲课就方便些了

我们现在可以来试试这些模式

【233】首先从图中我们可以注意到

从 Normal 模式切换到其他模式

我们要按下某个键

而切换回这个用得最久的 Normal 模式

我们只需按下 `Esc` 键

因为用 Vim 时要频繁按下 Esc 键

而这个键在键盘的角落里

按起来真的很不方便

许多程序员会把键盘上某个键映射成 `Esc`

通常这个键是 `Caps Lock`

它就在键盘的中间一行上

课程笔记里也有一些链接，指导你如何映射按键

到现在为止，我们花了很多时间

来讨论 Vim 背后的第一个设计哲学

那就是编辑模式
