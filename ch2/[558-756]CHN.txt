【558】这想想就很浪费时间，不是吗

而 h j k l 这几个键刚好就在键盘正中一行 #REVIEW

按下 j 光标会往下移一行

而按 k 会上移一行 #REVIEW "一行"要不要

按下 h 光标会左移一个字符

而按下 l 将光标右移一个字符

在刚开始使用时

你可能会觉得这种操作方式有点反直觉

然而这背后有一些历史原因

一个就是这样一个布局

实际上在原先 vi* 的开发者使用的键盘上
* Vim 的全称为 Vi Improved，即 Vi 的“升级版”

会是一个挺合理的样子

但是这个布局很快就会成为一种肌肉记忆

那么这就是在 Normal 模式下移动光标的基本方式

那么还有什么方式呢

看 如果你要这样浏览屏幕上这种文件

这个效率简直低得离谱

【572】我们不想这样按着按键

然后等好长一段时间

直到光标走到我们想要的地方 #REVIEW

因此 Vim 里还有其他的按键组合

用来执行不同种类的移动

另外这些按键和它们的用途现在并不需要记

在课堂笔记中会全部列出来

现在要做的就是

尽可能的理解 Vim 的界面是一种编程语言

这一思想

那么另一种移动光标的方式是按下 W 键

这样做将会使光标往前移一个单词

类似的，按下 B 键会使光标往后移一个单词

那么这样移动起来效率就高一些了

此外我们还有一个 E 键

这个键可以把光标移动到单词末尾

让我把这个东西（按键字幕）挪开 #REVIEW

例如我在这里按下 E 键

光标就跑到这个单词末尾去了

再按一下就跑到下一个单词末尾去了

以此类推

你也可以跨越整行移动

按下 0 键可以移动到行首

而按下 $ 可以移动到行末

按 ^ 则会移动到行首的第一个非空白字符

让我来找一行…

【600】那就这行吧

例如我按下 0 它会跳到行首

按下 $ 跳到了行末

而猜猜按下 ^ 会跳到哪呢

按下它会跳到行首的第一个非空白字符

有点像正则里的那个

对！跳到这个横线！

我们再来谈谈其他的移动方式

如果要在 buffer 里上下滚动

按下 Ctrl-U 就可以往上滚动

而 Ctrl-D 往下滚动

【614】这样用这两个键整页滚动

比按住 j 和 k 键快多了

除此之外你还可以跨越整个 buffer 浏览

按下大写 G 可以跳到最底部

而按下 gg 则可以跳到顶部

有些键位是辅助你记忆的

因此对于这些键记忆起来会轻松一些

【622】例如 W 来自单词 word （即 "单词"） #REVIEW

而 B 来自 Beginning of word （单词开头）

E 来自 End of word

所以对于这些按键设计会看上去挺合理的

而对于 0, ^, $ 这些来自正则的

至少还有那么点缘由

除此之外还有一些更加离谱的 #REVIEW

但是键盘上只有这么多键

有啥办法呢

例如我会想

按（大写）L 键光标会移动到可见的最后一行*
*Lowest

而按（大写） M 键会移到可见行的中间一行*
*Middle

按下（大写） H 则会移到可见行的第一行*
*Highest

除此之外还有许多的有趣移动方式

虽然我们并不会在课上全部涵盖这些东西

但是在你将可以在练习一中逐一尝试*
*~~留作课后作业~~

除此之外我还想说一个移动方式

这个移动方式叫查找

假设我现在在这行

我想跳去第一个啥字符的位置呢…

例如我想跳去第一个 o 字符

我可以输入 fo 

然后光标就跳到了第一个* o 的位置
*光标后面的第一个，下同 #REVIEW

我还可以输入 fw 

这样光标就跳到了第一个 w 的位置

输入 fc

光标就跳到了第一个 c 的位置

我还可以输入大写 F 小写 w

这样就会跳到在光标之前的最近的一个 w #REVIEW 这一块另一种写法是（反方向）查找字符 x 并将光标跳到上面

大写 F 小写 s 

则会跳到光标前最近的 s 

此外这东西还有个变体

按下 t, o* 就会去寻找 o 字符
*注意这不是个单词

但是光标不会落在 o 上面

而是 o 前面一个字符

而大写 T 小写 t 会往反方向寻找 t 字符

但不会落到 t 字符上

【662】而是它后面一个字符*
*这里原文 before 是反过来看的 #REVIEW

所以你可能已经对我之前说过的

Vim 是一种编程语言

这一思想有了一些认识

例如你可以把这些命令组合起来

f 和 t 

分别表示查找（Find）和跳转到（To）

因此你可以查找特定字符

或者跳转到某个字符

那么这就是 Vim 的几种移动命令了

现在有什么问题吗

那么这就是…

有问题吗

啊 没有 好的

那么这就是几种 Vim 里的移动命令了

你可以借助他们来快速的浏览文件

接下来另一类常用命令就是编辑命令了

我们之前已经说过一个 i 键了

按下这个键可以从 Normal 模式跳到插入模式

然后你就可以开始写东西了

那么我现在把光标往上移

我就可以输入东西了

Hello World

回车

然后按 Esc 回到 Normal 模式

但是此外还有许多可以提高你效率的命令

【688】而这在你编程时将深刻体会到 #REVIEW 

其中一个就是我之前还没讲到这里的时候 #REVIEW 我没看前文，我猜他之前按到了 o 键？

不小心触发的 o 键

假设我的光标在这里

我现在在 Normal 模式按下 o 键

他就会在我的光标下面给我开（open）新的一行

而这就是 o 代表的意思

然后他就会给我切入 Insert 模式

我现在就可以开始输入东西了

然后按 Esc 回到 Normal 模式

类似的还有一个大写 O 键

它会在光标上方开一行

然后把我切入 Insert 模式

Vim 里还有一个用来删除的命令

我现在把光标放在这个单词上

然后按下 d 键

d 代表删除（delete）

啥都没发生。

这貌似说明 d 键还要配上刚讲的移动命令来食用

例如 hjkl 

例如 w, b 键*
*即原文 word, backward word 对应的键

等等

那我现在按下 d 

啊这*
*dd 会删掉一整行，前面输入了个 d

我现在按下 d 然后按下 w

它就删掉了一个单词

让我现在来撤销这个操作

【715】在 Vim 里撤销只需按下 u 即可

现在注意我的光标位置

我按下 dw 删掉了一个单词

然后让我动一动光标

再删一个单词

例如… 

【719】啊这玩意好烦老挡着我

例如我光标在一个单词的中间

我想从这里一直删到单词结尾

猜猜要用什么命令？

d 和什么？

对！de！

它会从这里删到单词结尾

另一个常用的编辑命令是 c 

c 代表改变（Change）

这玩意很像删除

但是它删完以后会把你切进 Insert 模式

因为我想把它删掉然后改成其他东西

例如我光标在这里

按下 ce

代表从这里改变到单词结尾

然后它就会把这段内容删掉

注意他把我切进了插入模式

现在我就可以输入我想输入的东西了

然后按下 Esc 回到 Normal 模式

因此 c 和 d 这两个命令很像

【739】它们都会把移动命令当成参数* #REVIEW
*引用

然后把这个参数删了或者修改掉它

此外还有一个规律

当你连续按两次某个编辑命令时

它将作用于这一整行

c 键也不例外

例如但我按下 dd 时会整行删掉

按下 cc 时也会这样

但是它还会把我切入编辑模式

这样我就可以把这行的内容改成其他东西

我们再多说几个编辑命令

因为后面我们会了解到这几个东西如何共同作用

那么另一个常用的命令就是 x 键

假设我的光标在某个字符上

当我按下 x 时

【756】他会把那个字符删掉
