【558】这想想就很浪费时间，不是吗

而 `hjkl` 这几个键刚好就在键盘正中间一行

按下 `j` 光标会往下移一行

而按 `k` 会上移一行

按下 `h` 光标会左移一个字符

而 `l` 将光标右移一个字符

在刚开始使用时

你可能会觉得这种操作方式有点反直觉

然而这背后有一些历史原因

就是，这样的一个布局

实际上在原先 Vi 的开发者使用的键盘上[*]
* Vim 的全称为 Vi IMproved，即 Vi 的“升级版”

会是一个挺合理的样子[*]
* Vi 诞生的 ADM-3A 终端机的键盘上，方向键位于 HJKL 的位置，使用 Ctrl+HJKL 移动光标，Esc 位于如今 Tab 的位置

但是这个布局很快就会成为一种肌肉记忆

那么这就是在 Normal 模式下移动光标的基本方式

那么还有什么方式呢

看，如果你要这样浏览屏幕上这种文件

这个效率简直低得离谱

【572】我们不想这样按着按键

然后等好长一段时间

直到光标走到我们想要的地方

因此 Vim 里还有其他的按键组合

用来执行不同种类的移动

另外这些按键和它们的用途现在并不需要记

在课堂笔记中会全部列出来

现在要做的就是

尽可能的理解 Vim 的界面是一种编程语言

这一思想

那么另一种移动光标的方式是按下 `w` 键

这样做将会使光标往前移一个单词

类似的，按下 `b` 键会使光标往后移一个单词

那么这样移动起来效率就高一些了

此外我们还有一个 `e` 键

这个键可以把光标移动到单词末尾

让我把这个东西（击键显示工具）挪开

例如我在这里按下 `e` 键

光标就跑到这个单词末尾去了

再按一下就跑到下一个单词末尾去了

以此类推

你也能以行为单位移动

按下 `0` 键可以移动到行首

而按下 `$` 可以移动到行末

按 `^` 则会移动到行首的第一个非空白字符

让我来找一行…

【600】那就这行吧

例如我按下 `0` 它会跳到行首

按下 `$` 跳到了行末

而猜猜按下 `^` 会跳到哪呢

按下它会跳到行首的第一个非空白字符

有点像正则里的那个

*应该是那个横杠*

对！跳到这个横线！

我们再来谈谈其他的移动方式

如果要在 buffer 里上翻下翻

按下 `Ctrl`+`u` 就可以往上翻

而 `Ctrl`+`d` 往下翻

【614】比按住 `j` 和 `k` 键快多了

那样比按这两个键翻页慢多了

除此之外你还可以跨越整个 buffer 浏览

按下大写 `G` 可以跳到最底部

而键入 `gg` 则可以跳到顶部

有些键位是辅助你记忆的

因此对于这些键记忆起来会轻松一些

【622】例如 `w` 是 word （即 "单词"）

而 `b` 是 beginning of word （单词开头）

`e` 是 end of word（单词结尾）

这些按键设计看上去都挺合理的

而 `0`, `^`, `$` 大概是受到正则表达式启发

这些键的意义还是能讲得通的

除此之外还有一些比较离谱，无厘头的

但你看键盘上只有这么多键

有啥办法呢（只能也给 `z`,`v` 这种键分配功能）

例如

（大写）`L` 键把光标移到屏幕最下端一行

`L` 代表 Lowest（最低），这说得通

`M` 代表中间（Middle）

我猜 `H` 是最高（Highest）

除此之外还有许多的有趣移动方式

虽然我们并不会在课上全部涵盖这些东西

但是在你将可以在练习一中逐一尝试[*]
*~~留作课后作业~~

除此之外我还想说一个移动方式

这个移动方式叫查找

也算蛮好用的

假设我现在在这行

我想跳去第一个啥字符的位置呢…

例如我想跳去第一个 o 字符

我可以键入 `fo` 

然后光标就跳到了第一个 o 的位置[*]
*此处指光标**后**的第一个，下同

我还可以键入 `fw` 

这样光标就跳到了第一个 w 的位置

键入 `fc`

光标就跳到了第一个 c 的位置

我还可以键入大写 `F` 小写 `w`

这样就会跳到在光标之前的最近的一个 w 
#REVIEW 这一块另一种写法是（反方向）查找字符 x 并将光标跳到上面
#REVIEW GNAQ: 我放弃修这句了……

大写 `F` 小写 `s` 

则会跳到光标前最近的 s 

【656】此外 `f` 这东西还有个变体

——`t`，代表「跳至」

比如我可以键入 `to`[*]
*这个两键命令可类比 `fo`，但不是英文单词 to

但是光标不会落在 o 上面

而是 o 前面一个字符

而大写 `T` 小写 `t` 会往反方向寻找 t 字符

但不会落到 t 字符上

【662】而是它后面一个字符[*]
*这里原文 before 是反过来看的 #REVIEW

所以你可能已经对我之前说过的

Vim 是一种编程语言

这一思想有了一些认识

例如你可以把这些命令组合起来

`f` 和 `t` 

分别表示查找（Find）和跳至（To）

因此你可以查找特定字符

或者跳转到某个字符

那么这就是 Vim 的几种移动命令了

现在有什么问题吗

那么这就是…

啊，有问题吗

啊，没有。好

那么这就是几种 Vim 里的移动命令了

你可以借助他们来快速地浏览文件

接下来另一类常用命令就是编辑命令了

我们之前已经说过一个 `i` 键了

按下此键可从 Normal 模式进入 Insert 模式

然后你就可以开始写东西了

那么我现在把光标往上移

然后按下 `i`，就可以输入文字了

`Hello world [ENTER]`

然后按 `Esc` 回到 Normal 模式

我就对 buffer 做了修改

除此之外，还有许多用于高效编辑的命令

【688】这些在你编程的时候会派上用场

其中之一就是我之前还没讲到这里的时候 #REVIEW 我没看前文，我猜他之前按到了 o 键？GNAQ：对。

不小心触发的 `o` 键

假设我的光标在这里

我现在在 Normal 模式按下 `o` 键

它就会在我的光标下面给我开（open）新的一行

而这就是 `o` 代表的意思

然后它就会给我切入 Insert 模式

我现在就可以开始输入东西了

然后按 `Esc` 回到 Normal 模式

类似的还有一个大写 `O` 键

它会在光标上方开一行

然后让我进入 Insert 模式

Vim 里还有一个用来删除的命令

我现在把光标放在这个单词上

然后按下 `d` 键

`d` 代表删除（delete）

唔，啥都没发生

其实 `d` 键还要配上刚讲的移动命令来食用

例如 `hjkl` 

再如 `w`, `b` 键[*]
*即原文 word, backward word 对应的键

等等

那我现在按下 `d` 

啊这 ⊙﹏⊙∥

我现在按下 `d` 然后按下 `w`

就会删除一个单词

让我撤销这个操作

【715】在 Vim 里撤销，只需按下 `u` 即可

注意光标现在在这儿

我键入 `dw` 删掉了一个单词

然后让我动一动光标

再删一个单词

例如… 

【719】啊这玩意好烦，老挡着我

例如我光标在一个单词的中间

我想从这里一直删到单词结尾

猜猜要用什么命令组合？ # REVIEW

`d` 和什么？

对！`de`！

它会从这里删到单词结尾

另一个常用的编辑命令是 `c` 

`c` 代表更改（Change）

这玩意很像删除

但是它删完以后会进入 Insert 模式

因为我想把它删掉然后改成其他东西

例如我光标在这里

按下 `ce`

代表从这里更改到单词结尾

然后它就会把这段内容删掉

注意之后它切进了插入模式

现在我无论输入什么都会输进 buffer 内

然后按下 `Esc` 回到 Normal 模式

因此 `c` 和 `d` 这两个命令很像

【739】它们都会接受移动命令作为参数

然后按照移动方向进行删除或更改 #REVIEW

此外还有一个规律

当你连续按两次某个编辑命令时

它将作用于这一整行

`c` 键也不例外

例如但我按下 `dd` 时会整行删掉

按下 `cc` 时也会这样

但此外还会进入编辑模式

这样我就可以把这行的内容改成其他东西

我们再多说几个，呃，编辑命令

因为后面我们会了解到这几个东西如何共同作用

那么另一个常用的命令就是 `x` 键

假设我的光标在某个字符上

当我按下 `x` 时

【756】它会把那个字符删掉
