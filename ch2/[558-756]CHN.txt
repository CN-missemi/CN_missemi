【558】这想想就很浪费时间，不是吗

而 h j k l 这几个键刚好就在键盘正中一行 #REVIEW

按下 j 光标会往下移一行

而按 k 会上移一行 #REVIEW "一行"要不要

按下 h 光标会左移一个字符

而按下 l 将光标右移一个字符

在刚开始使用时

你可能会觉得这种操作方式有点反直觉

然而这背后有一些历史原因

一个就是这样一个布局

实际上在原先 vi* 的开发者使用的键盘上
* Vim 的全称为 Vi Improved，即 Vi 的“升级版”

会是一个挺合理的样子

但是这个布局很快就会成为一种肌肉记忆

那么这就是在 Normal 模式下移动光标的基本方式

那么还有什么方式呢

看 如果你要这样浏览屏幕上这种文件

这个效率简直低得离谱

【572】我们不想这样按着按键

然后等好长一段时间

直到光标走到我们想要的地方 #REVIEW

因此 Vim 里还有其他的按键组合

用来执行不同种类的移动

另外这些按键和它们的用途现在并不需要记

在课堂笔记中会全部列出来

现在要做的就是

尽可能的理解 Vim 的界面是一种编程语言

这一思想

那么另一种移动光标的方式是按下 W 键

这样做将会使光标往前移一个单词

类似的，按下 B 键会使光标往后移一个单词

那么这样移动起来效率就高一些了

此外我们还有一个 E 键

这个键可以把光标移动到单词末尾

让我把这个东西（按键字幕）挪开 #REVIEW

例如我在这里按下 E 键

光标就跑到这个单词末尾去了

再按一下就跑到下一个单词末尾去了

以此类推

你也可以跨越整行移动

按下 0 键可以移动到行首

而按下 $ 可以移动到行末

按 ^ 则会移动到行首的第一个非空白字符

让我来找一行…

【600】那就这行吧

例如我按下 0 它会跳到行首

按下 $ 跳到了行末

而猜猜按下 ^ 会跳到哪呢

按下它会跳到行首的第一个非空白字符

有点像正则里的那个

对！跳到这个横线！

我们再来谈谈其他的移动方式

如果要在文本框里上下滚动

按下 Ctrl-U 就可以往上滚动

而 Ctrl-D 往下滚动

【614】这比按住 j 和 k 键好多了
