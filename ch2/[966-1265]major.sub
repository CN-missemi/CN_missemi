{66352}{66446}那么，这些是 Vim 的修饰符
{66458}{66484}这样我们讲过 `i` 了
{66485}{66520}但是没讲过 `a`
{66521}{66577}如果我敲 `da(` 进去
{66582}{66683}它就会删除括号里的内容，也包括括号
{66693}{66731}所以说 `i` 是内部（inside）
{66732}{66792}`a` 是周围（around或者包含（including）的意思
{66908}{67033}好，所以这基本就是你在 Vim 的接口里
{67034}{67094}能够相互结合的若干类命令
{67107}{67147}那么，现在还有关于这些理念
{67148}{67235}或者接口即编程语言这个纲领的问题吗
{67378}{67517}好，那为了展示这个编辑器的强大
{67518}{67579}我们快速演示一遍
{67606}{67709}这能让我们体会到这个工具有多快
{67710}{67769}甚至和我们思考得一样快
{67796}{67907}好，看这里有一个啥也没输出的
{67908}{67951}坏掉的 fizz_buzz
{67959}{68018}额，但愿你们都听说过 fizz_buzz
{68019}{68078}如果没听说过的话，我简单提一下
{68104}{68203}fizz_buzz 是一种输出 1 到 n 的练习
{68204}{68285}当数字能被 3 整除时，输出 fizz
{68286}{68350}当数字能被 5 整除时，输出 buzz
{68351}{68446}当数字同时被 3 和 5 整除时， 输出 fizzbuzz 
{68459}{68512}如果这些条件都没满足，就直接输出数字
{68523}{68566}所以，你的输出看上去应该长这样：
{68567}{68687}`1, 2, fizz, 4, buzz`
{68698}{68832}但是，如果我运行这个程序，它啥也没输出
{68877}{68936}我把程序放在左边，终端放在右边
{68996}{69049}好，现在这里有一堆问题
{69050}{69109}其中一个就是 `main` 函数从来没被调用过
{69110}{69190}现在看好我是怎么修这个锅的
{69219}{69281}现在看好我是怎么修这个锅的
{69290}{69360}看好了，我按键的次数到底能少到什么程度
{69378}{69439}大写 `G` 把光标跳到文件底
{69462}{69512}`o` 在下面新建一行
{69513}{69568}现在我就可以往里输入内容了
{69569}{69610}我现在处在 Insert 模式
{69720}{69787}我已经输入完我想改的了
{69792}{69841}`Esc` 回到 Normal 模式
{69852}{69894}如果我键入 `:w`
{69895}{69944}在命令行模式下执行写入
{69969}{69993}让我回到这儿
{69994}{70058}好，至少现在程序运行时输出东西了
{70078}{70130}这个程序还有另一个问题
{70131}{70186}它是从 0 开始的，而不是 1
{70187}{70222}咱再来修修这个锅
{70241}{70320}移到这个 `range()`……
{70321}{70366}唔，这个 `range()` 函数
{70367}{70423}它不该从 `0` 开始一直到 `limit`
{70424}{70483}它应该从 `1` 开始到 `limit + 1`
{70512}{70584}我还没给你们看在 Vim 中怎么搜索
{70585}{70628}按下 `/` 
{70679}{70745}额，我得把这个关掉重启
{70752}{70851}如果你按下 `/` ，它就开始搜索
{70852}{70921}如果我输入 `range`
{70922}{71026}我的光标会从当前位置挪到第一个 `range` 那
{71027}{71086}这样能让你把光标高效地移到想要的地方
{71095}{71165}`ww` 继续挪两个字符
{71175}{71210}`i` 进入 Insert 模式
{71211}{71310}添加 `1, ` 然后按 `Esc` 回到 Normal 模式
{71327}{71374}这是 Vim 里面一个很常见的情况
{71375}{71409}你先待在 Normal 模式里
{71410}{71459}然后把光标挪到某个地方，进入 Insert 模式
{71460}{71527}做一点小改动，然后再用 `Esc` 回到 Normal 模式
{71528}{71564}Normal 模式就像是家一样——
{71565}{71611}这大概就是你呆的时间最长的地方
{71635}{71689}我还想加上一个 +1
{71694}{71741}那就用 `e` 挪到这个词后面
{71742}{71822}摁 `a` 代表追加，输入 `+1` 然后 `Esc` 退出
{71885}{71930}好，我们已经解决了这个问题
{71931}{71966}这程序还有个毛病
{71967}{72085}就是被 3 和 5 整除的时候输出的都是 fizz 
{72086}{72118}咱再来解决下这个问题
{72125}{72194}用 `/fizz` 来找出 fizz 
{72203}{72262}然后按下 `n` 来找到下一个匹配的结果
{72269}{72392}再用 `ci'` 来改变两个单引号中间的内容
{72393}{72508}它就删除了 fizz 然后进入 Insert 模式 
{72513}{72554}然后我就可以随意输入了
{72555}{72614}然后再按下 `Esc` 回到 Normal 模式
{72700}{72788}好极了，我们解决掉了这个问题
{72803}{72869}这程序还有另一个问题
{72873}{72966}当数字是 15 的倍数时
{72967}{73060}它在独立的两行输出 fizz 和 buzz
{73112}{73159}我们再来修一下这个锅
{73207}{73286}先把光标往下移动到这一行
{73287}{73398}我实际上并不担心程序的内容是什么
{73399}{73439}有些程序写的很蠢，但这并不重要
{73440}{73510}只需注意我在 Vim 中按下了哪些键
{73511}{73589}这些按键让我在 Vim 中高效的修改程序
{73616}{73655}现在我的光标在这一行
{73656}{73718}我按下 `$` 来把光标移动到行尾
{73719}{73757}按下 `i` 来进入 Insert 模式
{73767}{73810}然后把这些东西输入进去
{73811}{73857}按 `Esc` 来回到 Normal 模式
{73874}{73942}现在我想在下面的 print 如法炮制
{73977}{74032}请你跟我这样做，`jj.` [*]
{74069}{74207}在 Vim 中，按下 `.` 会重复之前的编辑命令
{74222}{74320}要想完成重复性工作，这是个好东西
{74321}{74379}还不用重复地输入相同内容
{74380}{74480}上次它插入了 `, end=''`
{74481}{74585}所以当我按下 `.` 时，它就会在这一行再来一遍
{74637}{74726}我想，完成这个示例程序的最后一步是
{74736}{74793}我们要修复一下（数值边界问题）
{74805}{74855}使得这个程序可以接受一个命令行参数
{74856}{74915}而不是用写死在程序里的这个 `10`
{74931}{75018}那接下来我按 `gg` 来回到顶上
{75025}{75108}用大写 `O` 在上面新建一行
{75109}{75195}然后我会输入 `import sys` ，回车
{75198}{75246}然后再用 `Esc` 键回到 Normal 模式
{75272}{75334}然后我想把光标挪到 `10` 那个地方
{75335}{75421}那我就 `/10` ，这样我就直接到那去了
{75435}{75547}用 `ci(` 来在括号里面编辑
{75555}{75656}现在我就可以把我想要的输入进去了
{75699}{75862}做完这些，我的程序就能好好的 fizzbuzz 了
{75869}{75944}我想我还有一个地方没改，但这已经不重要了
{75945}{76030}这已经能说明你可以迅速的做出许多改动了
{76064}{76109}那么，关于这个例子
{76110}{76169}还有我们讲的这种思路还有什么问题吗
{76202}{76268}*（同学关于命令行环境的问题）*
{76284}{76385}啊，这个大概会在周二详细地讲
{76397}{76563}我这里把 Vim 放在左边，Shell 放在右边
{76568}{76634}然后外边套了个 Tmux
{76716}{76774}这个问题的一个变体会是
{76775}{76834}比如怎么在 Vim 的 window 之间切换
{76835}{76874}你可以在讲义里找到答案
{76875}{76912}还有关于这些的组合键
{76913}{77013}可以对付打开的多个，相同或者不同的 window
{77028}{77047}还有问题吗？
{77048}{77126}* **c**hange 和 **d**elete 有什么区别*
{77142}{77169}啊，问得好
{77170}{77288}删除（`d` 键）接受一个操作范围并删除
{77291}{77331}但始终保持在 Normal 模式内
{77332}{77387}所以你得以边四处移动，边删除一些内容
{77388}{77456}而更改（`c` 键）和删除很像
{77461}{77528}都接受操作范围，对文件内容做同样之事
{77529}{77563}但是在删除了内容之后
{77564}{77611}会立即把你切到 Insert 模式里 
{77612}{77683}所以它省了你额外敲一个字符的时间
{77725}{77804}在这举个例子，如果我想删掉这个 `main` 
{77805}{77837}可以用 `dw` 来删掉这个词
{77865}{77943}但是如果我随便再敲个字符，比如 `j` 
{77944}{77972}它就会把光标向下移动
{77993}{78021}如果我先撤销
{78022}{78077}我还可以用 `cw` “重新组织语言”
{78078}{78126}它实际上把我拐到 Insert 模式里了
{78127}{78188}然后我就可以随便输入点啥东西
{78196}{78329}`dwi` 和 `cw` 一模一样
{78339}{78376}但是 `cw` 少敲一次键盘
{78387}{78467}我们在讲义里还有个链接，是关于 Vim golf 的
{78468}{78539}大概就是，他们在线上做了个游戏
{78540}{78599}在这个游戏里你会接到一个编辑任务
{78600}{78733}你的目的就是找到最少敲几次键盘能搞定它
{78734}{78774}这小游戏玩着简直上瘾
{78775}{78868}所以我建议你们有空再玩[*]
{78942}{79011}我还看到有人举手问问题？
{79023}{79105}*重复最后一次操作那个的命令是啥键来着？*
{79140}{79187}英文句号，对
{79211}{79279}这是最有用的 Vim 命令之一，这问题好
{79287}{79327}还有别的问题吗
{79425}{79549}好，咱现在大约还剩五分钟
{79550}{79615}我会简短的讲一点东西
{79616}{79666}在讲义里会有相关的细节
{79667}{79712}你们一定看看讲义里这一部分的内容
{79758}{79842}总而言之， Vim 是程序员的文本编辑器
{79843}{79914}正因如此，它也是高度程序化的
{79915}{79998}不仅仅是它的接口是一种程序语言
{79999}{80059}它的众多使用方法也是如此
{80060}{80159}你可以依据偏好，调整它的诸多选项
{80169}{80274}你还可以给它安装很多有用的插件
{80284}{80459}通过硬盘上的 `.vimrc` 文件配置 Vim [*]
{80466}{80552}你会见到很多基于 Shell 的工具
{80553}{80580}都采用这种惯例
{80581}{80660}也即，以纯文本文件作为它的配置文件
{80667}{80708}所以如果我编辑它…
{80709}{80768}现在你电脑上可能没有这个文件
{80774}{80840}但是我已经下载下来了
{80841}{80931}我们给诸位写了一个默认的 vimrc 配置文档
{80932}{80966}并且挂在课程网站上了
{80967}{81002}你可以用那个文档入门
{81003}{81074}如果我运行 `vim ~/.vimrc` 
{81098}{81146}我在这能看到一堆注释
{81147}{81195}然后是各种命令
{81196}{81260}譬如一般我们都想开启语法高亮
{81261}{81311}或者开个行数显示
{81312}{81352}如果我们不打开一些东西
{81353}{81423}比如让我删掉显示行数的设置
{81424}{81496}如果我删了这些配置然后重启 Vim
{81497}{81556}你会发现我左边的行号都没了
{81581}{81722}简而言之，你可以配置很多东西
{81731}{81817}我们给了你一个很基础的配置文档
{81818}{81949}试图把 Vim 中默认开启的怪怪的东西关掉
{81950}{82034}但是没把太多的个人设置强加于你
{82046}{82108}当然，我们三个都是 Vim 老鸟了
{82109}{82160}我们也都有重度个人定制版 `.vimrc`
{82169}{82223}如果你们想参考借鉴的话
{82224}{82288}我们也把自己用的配置文档放到了链接里
{82289}{82355}还有成千上万的人们在 GitHub 上
{82356}{82397}分享了他们自己的 `.vimrc` 
{82398}{82457}所以你们能从很多地方得到灵感
{82458}{82517}这方面还有很多很酷的博客
{82554}{82637}你还可以用插件去拓展 Vim 
{82638}{82681}插件能做各种各样有趣之事
{82689}{82812}比如很多编辑器自带的模糊文件查找
{82813}{82856}所以你可以在一个弹窗里
{82857}{82951}输入文件的，或准确或模糊的名称
{82954}{82995}然后迅速的找到它
{82996}{83114}还有插件能可视化地撤销历次改动
{83115}{83269}文件管理器等等插件
{83270}{83374}所以我们在课程网站上挂了一些我们钟爱的插件
{83379}{83482}所以我强烈建议你熟悉怎样安装插件
{83483}{83515}因为它不会花多少时间
{83516}{83559}并且有些插件真的很酷
{83625}{83780}最后一个话题，我会在下课之前简单提两嘴
{83781}{83845}这个话题是 Vim 模式与其它软件
{83855}{83915}事实证明很多程序员
{83916}{83984}都对 Vim 的接口感到激动不已
{83991}{84091}所以他们在其他工具中做了相似的功能
{84099}{84179}举个例子，我可以配置使用 Vim 的模式
{84180}{84247}去运行 Python 的命令行交互环境（REPL）
{84248}{84278}我可以在这输入内容
{84279}{84313}如果我按下 `Esc` 键
{84314}{84379}就回到交互环境的 Normal 模式了
{84380}{84421}我可以前后移动光标
{84422}{84488}也可以按下 `x` 来删除一些东西
{84489}{84533}或者是用 `cw` 改一个词
{84561}{84605}这些 Vim 的好东西都有
{84627}{84682}不仅是 Python 命令行交互环境
{84683}{84749}我也把我的终端弄成这样
{84750}{84839}我随便输入点东西
{84849}{84900}然后按下 `Esc` 键就到了 Normal 模式
{84901}{84989}光标移到这，我也能进 Visual 模式
{84990}{85091}可以选中一块文本，然后按下 `~` 来修改大小写
{85092}{85249}怎样开启像 bash, zsh, fish 等的 Vim 模式[*]
{85250}{85343}这些也在讲义放了链接
{85344}{85403}还有很多基于 GNU Readline 的软件
{85404}{85463}比如 Jupyter Notebook
{85473}{85526}如果讲义上面没写的话
{85527}{85550}你还可以搜一下
{85551}{85636}因为很多人都喜欢这种功能
{85650}{85722}如果你笃定的想学习这些东西
{85723}{85862}我想，你应该把你的所有工具都打开 Vim 模式
{85863}{85927}首先会让你对这工具有更深的理解
{85928}{85981}其次，当你熟练掌握了 Vim 之后
{85982}{86071}别的工具都会如臂使指
{86166}{86254}我想对 Vim 的简介就到这里了
{86255}{86347}还有一些挺好的材料今天这一讲没讲到
{86348}{86383}但是在讲义里都有
{86384}{86473}最后我极力推荐你们完成今天的练习
{86474}{86598}至少对我个人来说，我认为学习这个编辑器
{86609}{86726}是这系列课程的内容中最让你受益的部分
{86771}{86832}好，今天的课就上到这里了
{86833}{86865}我们明天见
{86889}{86974}顺便提一下，明天的课换成了数据整理
{86975}{87052}现在把周四和周二的课换了一下
{87053}{87102}在我们的课程网站上也能看出来
{87103}{87151}如果有人只上其中一节
{87152}{87175}注意别上错课
