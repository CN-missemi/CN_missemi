【756】还有一个命令是 `r`

如果我现在移到某个特定的字符上

然后按下 `r`

它会接受另一个字符作为参数

然后用所给的参数替换掉光标处的字符 # REVIEW

呃，我再讲几个编辑命令

我认为我刚刚提到过一个

就是你可以撤销你在 Vim 里做的编辑

在 Normal 模式下按 `u` 就可以做到

`u` 代表撤销（Undo），还算好记

所以我按很多次 `u`，就会撤销我所有的改动

然后，撤销的反面，当然是——重做（Redo）

Vim 中，这个命令的按键绑定到了 `Ctrl`+`R` # REVIEW

【772】好，那么我要说的另一个编辑命令

就是复制粘贴，因为……

哦，有问题吗？

*就是，Undo 是这样吗……比如它是不是撤销掉*

*上次退出 Insert 模式前，插入的所有内容？*

*还是只是最后一个字符呢？*

啊——问得好！

这位同学问的是：Undo 会撤销

你进入 Insert 模式以后的所有输入吗？

或者只是最后一个字符？

呃，答案实际上更复杂一点儿

【781】「撤销」会，呃

撤销你最新的改动

换言之，如果你进入 Insert 模式

然后键入一些内容，再退回 Normal 模式

然后按下 `u` 撤销

它会撤销你在 Insert 模式下的所有输入

但如果你执行了一些其他的编辑命令

比如按下 `x` 删除一个字符

之后按 `u` 撤销的话

只会撤销上一个编辑命令的改动

这个问题我解释清楚了吗？

*嗯*  好，还有别的问题吗

行。那我就讲复制粘贴了，因为这很常用

`y` 命令代表复制，`p` 命令代表粘贴[*]
*Vim 内的复制粘贴默认不使用操作系统的剪切板

`y` 代表复制，因为……「提取，拉拽」（yank）

这个词就是他们——

Vim 用这个术语指代复制

【800】而且 `y` 也接受一个动作（命令）作为参数

所以比如我键入 `yy`，就会复制当前行

此时若再按下 `p` 粘贴

注意，这里就有一模一样的两行了

因为我刚往下面粘贴了一行

按一下 `u` 撤销它

但如果我执行像 `yw` 这样的命令

它会复制一个单词

然后按一下 `p`

【809】就会在光标位置上粘贴这个词

有办法选择一块文本，复制它吗？

无论之前你用哪个编辑器 # REVIEW

你大概都是这样运用复制粘贴的

所以此时我们要进入 Visual 模式

它们是另外一组彼此相关的模式

都可以从 Normal 模式进入

用它们来选择大段文字

【820】其中一个模式是普通的 Visual 模式

你可以（从 Normal 模式）按下 `v` 进入

一旦进入这个模式，便可以使用大多数

Normal 模式下的指令移动你的光标

它就会选择移动前后之间的内容

所以我可以用，你看，`hjkl` 移动光标

【828】或者我可以用 `w` 跳词

或者别的这样的命令

这样就会选中一段文本

一旦我选中这段文本

就可以对它们进行各式各样的处理

其中常用的有复制这段文本

所以我选中之后，可以按一下 `y` 复制

之后 Vim 会退回普通模式

现在那段文本被存到了粘贴（paste） buffer 里

现在我随便移到一个地方

【839】然后按一下 `p`

就粘贴了刚复制的那段文本

相似于这种选择一串连续文字的 Visual 模式

还有 Visual Line 模式，按下大写 `V` 进入

它可以一次选择一行文字

甚至还有 Visual Block 模式

可以按 `Ctrl`+`v` 进入

【848】它可以选择矩形的文字块儿

这可是你原先的编辑器做不到的[*]
*其实大部分“现代”的都可以，如 VSC / Sublime / Atom

好了，我们有一大堆 Vim 编辑命令要学呢

它有特别多，很无厘头但是非常好玩的命令

比如 `~` 命令可以改变字符大小写

或者是你选中的选区（的所有字符）

我举个例子，比如选中这个「Visual Studio Code」

然后通过选中它之后按下 `~`

反转这玩意儿的大小写

【860】并且还有很多像这样的命令

它们一个比一个深奥难懂[*]
*这简直不讲道理

我们当然不会面面俱到

但是你会在练习中碰到这种东西

这些是 Vim 的编辑命令

其中很多可以和移动命令组合起来

诸位对之前的内容有什么疑问吗？

挺好，接着往下讲

