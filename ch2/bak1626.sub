{17}{126}好，欢迎来到计算机教育缺失的一课
{127}{192}这节是第三节课
{206}{241}今天让我们来聊聊
{242}{269}文本编辑器的那些事
{284}{337}我认为这个话题真的是
{338}{427}这系列课程中很有价值的一课
{435}{471}因为作为一个程序员
{472}{578}你会在这上面花数不清的时间来写程序
{598}{627}所以如果你能花一点点时间
{628}{687}让这件事更有效率
{694}{771}在你的本科生涯
{772}{838}在你未来工作时
{839}{876}将能够省下成百上千小时的时间
{949}{1000}文本编辑器
{1001}{1037}和其他的编辑器
{1038}{1086}例如用来写文章的编辑器
{1087}{1132}有些小小的不一样
{1141}{1215}这是因为写程序和写文章不同
{1231}{1297}当你写程序的时候，你将会花大量时间
{1298}{1343}来阅读你写的东西
{1344}{1409}来移动你的光标
{1410}{1499}来对他们做点小小的修改
{1500}{1557}而不是像写文章的时候
{1558}{1630}从上到下一气呵成
{1631}{1667}因此对于不同用途
{1668}{1699}我们会使用不同的编辑器
{1700}{1724}这是很合理的
{1725}{1784}例如我们用 Word 来写报告
{1785}{1852}用 Vim、Emacs、VS Code
{1854}{1889}以及 Sublime 来编写代码
{1958}{2043}要学习并熟练使用一个文本编辑器
{2044}{2095}第一步就是跟着教程学习
{2096}{2152}这也是来听这节课
{2153}{2152}以及完成之后的课后练习|这也是来听这节课
{2153}{2201}以及完成之后的课后练习
{2204}{2243}能教给你的东西
{2279}{2321}此外，在这节课结束之后
{2322}{2423}请用文本编辑器来进行你的所有编辑工作
{2432}{2492}当你学习一个复杂工具的时候尤其如此
{2502}{2533}那么我们今天学的就是
{2534}{2575}超强编辑器 Vim
{2576}{2620}这个工具在程序员间使用非常广泛
{2625}{2684}当你在学习这样一个复杂的工具的时候
{2685}{2737}在刚开始学习使用它时
{2747}{2777}经常遇到的情况是
{2778}{2837}你的编程效率反而下降了一点
{2838}{2876}但是不要放弃
{2877}{2958}我敢说在这个新的编辑器上
{2960}{3026}花上 20 小时左右
{3027}{3133}就能恢复到你之前的工作效率
{3134}{3188}然后它的益处就慢慢体现出来了
{3189}{3257}学得越久，效率越高
{3282}{3371}这些复杂工具不难入门
{3376}{3482}但精通他们将花费一生的时间
{3483}{3578}因此在整个使用的过程中
{3579}{3677}如果你觉得：呃这样做效率好低啊
{3678}{3773}记得去查一下有没有更好的操作方式
{3774}{3833}答案几乎总是 “是的”
{3864}{3970}因为编辑器是程序员写给程序员用的[*]
{3971}{4034}写这些编辑器的程序员
{4035}{4105}肯定碰到了同样的问题，并解决了它
{4106}{4156}所以你就不用去被它困扰了
{4165}{4257}所以你在学习的时候记得去查
{4258}{4334}你可以用搜索引擎，也可以给我们发邮件
{4335}{4391}以及~~（不存在的）~~来办公室
{4392}{4463}我们将很愿意帮助你找出高效的方案
{4516}{4573}关于学哪个编辑器这个问题
{4574}{4642}在前几次的开课中实际上我们避免了
{4643}{4678}去教某一个特定的编辑器
{4679}{4736}因为我们不想把我们的观点强加于你们身上
{4737}{4815}但是我们着实觉得应该
{4816}{4879}教你们怎样使用某一个工具，并精通它
{4891}{4991}另外许多人对编辑器有很强的主见
{4992}{5072}课程笔记里有更多关于此方面的链接
{5133}{5196}你可以去看看各个编辑器这些年来的热门程度
{5197}{5311}我相信你们都听过 StackOverflow[*]
{5312}{5401}这个网站每年都会向开发者发放调查问卷
{5402}{5473}其中一个问题便是你用哪个编辑器
{5483}{5518}从结果看来
{5519}{5613}最热门的图形界面编辑器是 VS Code
{5614}{5758}而最热门的基于命令行的编辑器是 Vim
{5759}{5819}基于此以及如下几点原因
{5820}{5869}今天我们会教你们如何使用 Vim
{5870}{5914}第一是这门课的所有教授
{5915}{5994}我、John 和 Jose 都主要使用 Vim
{5995}{6040}我们用这个编辑器用了很久了
{6041}{6071}而且用的很开心
{6120}{6211}此外我们觉得这背后有许多很有趣的东西
{6252}{6355}所以就算最终你并没有打算长期使用它
{6356}{6416}我仍然认为学习这些背后的思想很有价值
{6435}{6561}另外许多的工具也觉得 Vim 哲学很棒
{6562}{6647}从而使它们提供了 Vim 模式
{6661}{6780}例如当下最热门的 VS Code
{6781}{6827}支持 Vim 键位绑定
{6828}{6950}而且那个插件已经被下载了数百万次
{6967}{7051}所以这门课程里面的很多工具
{7077}{7175}你会发现它们都支持 Vim 模式
{7176}{7217}包括 Python 的 REPL[*]
{7218}{7276}包括 Jupyter Notebook
{7277}{7355}甚至你的浏览器
{7370}{7457}因此我们今天就会教给你这个好东西
{7493}{7640}但是一个这么强大的工具，这一节课讲不完
{7646}{7793}我们的目标是教给你隐含在其中的核心思想
{7806}{7915}以及一些基本的操作例如打开关闭文件
{7916}{7951}移动你的光标
{7952}{7989}作出一些修改等等
{8001}{8095}我们不期望你听一次就能记下来每一个细节
{8096}{8149}因为这节课会上得挺快的
{8150}{8304}但是在课程笔记和练习里会涵盖他们
{8305}{8383}因此我强烈建议你把所有练习过一遍
{8394}{8459}至少是基础练习
{8508}{8538}有什么疑惑吗？
{8619}{8635}好
{8670}{8736}那隐含在其背后的第一个精妙思想就是
{8737}{8804}Vim 是一个基于模式（Modal）的编辑器
{8813}{8838}这意味着什么呢
{8839}{8889}Modal 这个词源于 Mode
{8890}{8978}这就意味着 Vim 有多个模式
{8991}{9108}这个思想就源于，当你在写程序的时候
{9109}{9184}你会经常做不同的事
{9185}{9229}有时候你在读代码
{9230}{9287}有时候你在给代码做小改动
{9288}{9385}在某处寻找、改正一个小地方
{9402}{9488}有时候你在写一长串的代码
{9489}{9539}例如在从零开始写一个函数
{9540}{9644}因此为了这些不同的工作就有了不同的模式
{9702}{9769}那么我现在想先在黑板上写些东西
{9770}{9820}这样方便我后面讲课
{9831}{10011}当你开始使用 Vim 时它会在 Normal 模式下启动
{10012}{10084}在这个模式下，各种键位组合
{10085}{10126}拥有在这个模式下的特定意义
{10127}{10252}其中就有一些按键组合来切换到其他的模式
{10253}{10319}而切换后这些键位组合的意义也相应改变
{10370}{10537}因此你的大部分时间都会在 Insert 和 Normal 模式下
{10645}{10742}在 Normal 模式下按下 `i` 键就可以进入 Insert 模式
{10743}{10865}而在 Insert 模式下按下 `Esc` 就可以回到 Normal 模式
{10961}{11032}这里我们注意一下我们表示按键的方式
{11063}{11173}这个表示方式将会用在课上、课堂笔记里
{11174}{11234}以及 Vim 给你的提示中
{11236}{11405}当仅仅是代表例如 `i` 键这样一个按键本身时
{11406}{11441}那么就会直接写 `i`
{11442}{11596}但是对于例如 `Ctrl`+`v` 这种按键组合
{11603}{11714}就有可能以这么几种形式来体现
{11726}{11858}第一种是一个“脱字符号”后面跟着控制用字符[*]
{11859}{11901}这是一种写法
{11918}{11983}另一种写法可能是你最熟悉的
{11984}{12118}在课程笔记里我们有时候会写成 `Ctrl-v` 这样
{12119}{12305}而有些地方我们可能会写成 `<c-v>` 这样
{12306}{12382}好这样介绍一下方便后面讲课
{12416}{12478}然后回来
{12479}{12526}Vim 有好几种模式
{12527}{12652}而 Normal 模式是用来移动光标、阅读东西
{12653}{12713}以及在文件间切换的
{12714}{12780}而 Insert 模式是用来输入的
{12796}{12903}因此在这个模式下你的按键大多会直接进入 buffer
{12904}{12948}而在 Normal 模式下则不然
{12949}{13000}它们不会进入 buffer
{13001}{13083}而是用来进行一些浏览和编辑操作
{13188}{13255}另外我们要认识到真实的情况会比这更复杂一点
{13256}{13301}此外还有许多的模式
{13302}{13346}我现在把他们列出来
{13347}{13395}方便我后面的讲课
{13396}{13496}Vim 里还有个替换模式
{13535}{13633}不像插入模式会把字符往后移
{13634}{13669}替换模式会直接覆盖掉文本
{13670}{13759}在选择方面也有着许多的模式
{13916}{13970}有一个叫 Visual 模式
{13971}{14040}还有一个 Visual Line 模式
{14041}{14100}以及一个 Visual Block 模式
{14171}{14238}按下大写 `R` 键进入替换模式
{14239}{14298}按下 `v` 键则进入 Visual 模式
{14299}{14422}按 `Shift`+`v` 进入 Visual Line 模式
{14438}{14506}而按下 `Ctrl`+`v` 进入 Visual Block 模式
{14556}{14627}此外还有一个命令行模式
{14786}{14869}按下冒号键就可以进入
{14997}{15074}好这样写下来我们后面讲课就方便些了
{15329}{15374}我们现在可以来试试这些模式
{15432}{15500}首先从图中我们可以注意到
{15501}{15577}从 Normal 模式切换到其他模式
{15578}{15604}我们要按下某个键
{15605}{15717}而切换回这个用得最久的 Normal 模式
{15718}{15777}我们只需按下 `Esc` 键
{15813}{15917}因为用 Vim 时要频繁按下 Esc 键
{15918}{16020}而这个键在键盘的角落里
{16022}{16097}按起来真的很不方便
{16100}{16179}许多程序员会把键盘上某个键映射成 `Esc`
{16181}{16249}通常这个键是 `Caps Lock`
{16250}{16309}它就在键盘的中间一行上
{16325}{16443}课程笔记里也有一些链接，指导你如何映射按键
{16620}{16672}到现在为止，我们花了很多时间
{16673}{16713}来讨论 Vim 背后的第一个设计哲学
{16714}{16751}那就是编辑模式
{16752}{16793}我们可以先讲一些基础
{16794}{16853}像如何打开这个文本编辑器
{16854}{16907}如何打开文件，保存文件
{16908}{16929}等等的操作
{16944}{17030}所以，这是一个基于命令行的编辑器
{17031}{17087}尽管它有一些图像化变体
{17098}{17185}启动这个程序的方式是键入 `vim`
{17210}{17241}你可能会注意到
{17242}{17292}在我的屏幕左下角
{17300}{17342}你能看到我键入的内容
{17343}{17416}这在这节课的后面会很有用
{17417}{17476}当我在输入 Vim 命令时
{17501}{17536}我会说我正在写什么
{17537}{17566}你们也会在屏幕上相应地看到
{17567}{17612}所以当我按下 `^C`
{17624}{17674}屏幕也会显示 `^C`
{17690}{17803}文本大到都能看见吗？很好
{17891}{17945}所以我们要打开 Vim
{17946}{18010}只需要在命令行中键入 `vim`
{18039}{18096}大多数系统已经预装好了 Vim
{18097}{18120}如果你没有的话
{18121}{18169}也可以用包管理器装一个
{18189}{18226}`vim` 也可以接收参数
{18227}{18282}即当我们想用它直接编辑特定的文件
{18283}{18370}而不是先打开程序再打开文件
{18379}{18470}例如，我在这个目录里有一个文件
{18471}{18533}这个文件事实上是这节课的笔记
{18542}{18613}我可以键入 `vim editors.md [ENTER]`
{18623}{18671}砰的一下，编辑开始
{18714}{18749}在本课中
{18750}{18865}我不是完全在 Exton 默认配置中运行 Vim [*]
{18889}{18956}我已经额外做了一些小配置
{18971}{19052}使它在默认条件下更加美观
{19061}{19126}比如左边有行号
{19127}{19186}再比如底部有更多的状态信息
{19196}{19256}如果你也想要这些设置
{19257}{19307}我在笔记里放了个链接
{19308}{19342}可以让你有一个
{19343}{19373}更稍稍合理的设置
{19478}{19544}当你打开 Vim，你该怎么做？
{19545}{19617}像我之前说的，Vim 以 Normal 模式启动
{19618}{19657}所以如果我直接开始键入
{19658}{19763}比如按下 `x`，它没有被输入到 buffer
{19764}{19813}你可以看到左上方的光标
{19823}{19876}事实上我删掉了一个字符
{19890}{19928}这是因为我在 Normal 模式
{19929}{19962}而不是 Insert 模式
{20011}{20068}Insert 模式基本上是你以前惯用的
{20069}{20110}所有其它的文本编辑器
{20112}{20139}比如某处有一个光标
{20141}{20158}你键入字符
{20159}{20209}它进入 buffer
{20250}{20329}而在 Vim 的 Normal 模式中
{20340}{20396}你可以按下 `i` 进入 Insert 模式
{20397}{20427}所以看，我按下了 `i`
{20434}{20538}之后底部的通知显示 `--INSERT--`
{20561}{20614}左下总会显示你所在的模式
{20615}{20641}但 Normal 模式除外
{20642}{20671}Normal 模式下它是空白的
{20682}{20771}现在是 Insert 模式，如果我按下 `x`
{20778}{20846}它就会插入到文本缓冲区（text buffer）
{20860}{20925}我可以按下 `Backsapce` 或者其它的字母键
{20926}{20987}现在我的编辑器可以表现得
{20988}{21047}和你想的其它编辑器一样
{21067}{21126}现在如果我要结束插入字符
{21127}{21186}如何退回 Normal 模式呢
{21228}{21253}对，没错
{21254}{21279}我按一下 `Esc` 键
{21281}{21334}这个就是我击键显示工具
{21335}{21405}表示 `Esc` 键的图标
{21406}{21447}要意识到这一点
{21545}{21648}Vim 有一个观点，使用鼠标是低效的
{21649}{21703}当你的手正在键盘上
{21704}{21778}再去移到鼠标上其实浪费时间
{21779}{21794}对吧
{21795}{21828}当你编程的时候
{21829}{21858}你就不想浪费这点时间
{21860}{21914}就比如你写什么写到一半沉醉其中
{21930}{21999}取而代之的是，Vim 的所有功能
{22000}{22056}都可以仅通过键盘调用
{22057}{22123}所有你可能习惯了的操作
{22124}{22162}像打开文件什么的操作
{22163}{22253}比如打开文件，保存文件之类
{22254}{22311}我会用键盘实现它们
{22312}{22353}是怎么做到的？
{22354}{22428}这是通过 Vim 的其它模式
{22429}{22460}模式在那边的黑板上，实现的
{22461}{22520}尤其是通过命令行（Command Line）模式
{22556}{22655}在 Normal 模式下，如果你按下 `:` [*]
{22669}{22711}你会发现光标
{22739}{22798}——我想我的显示工具现在挡住了
{22799}{22822}好在它已经没了
{22823}{22908}光标跳转到了底部，左下方
{22909}{22965}它显示了我刚刚按下的 `:`
{22975}{23042}现在我可以输入命令
{23043}{23115}你可以认为它很像命令行 Shell
{23116}{23176}也就是我们之前几天所讲的
{23177}{23246}不过这是 Vim 的命令行 Shell
{23247}{23284}你在这里输入 Vim 命令
{23285}{23315}而不是 Shell 命令
{23333}{23383}这里有很多内置命令
{23384}{23427}可以搞定你惯常做的所有事
{23428}{23499}例如，你可能很想知道一个命令
{23501}{23542}那就是如何退出编辑器
{23543}{23591}你会发现如果在 Normal 模式下
{23592}{23617}我可以按下 `Esc`
{23618}{23669}从命令行模式返回 Normal 模式
{23670}{23713}我按下 `^C`
{23747}{23826}不像很多其它程序，Vim 不会退出
{23840}{23873}那我如何退出 Vim?
{23874}{23964}我可以按下 `:`，进入命令行模式
{23976}{24015}我就可以键入命令 `quit`
{24016}{24088}Q-U-I-T，你会看到
{24101}{24168}——嘿，我得把这个破玩意移到中间去
{24226}{24262}看，显示 `:quit`
{24263}{24311}按一下 `Enter`，Vim 就会退出
{24329}{24370}我可以再打开 Vim
{24371}{24446}事实上这个命令有简写，`:q `
{24471}{24509}效果是一样的
{24543}{24605}这里还有一堆类似的命令
{24622}{24695}其它应当知道的，比较方便的命令有
{24696}{24728}如何保存文件？
{24729}{24808}假设我做些编辑，像 `hello world`
{24846}{24899}按下 `i` 进入 Insert 模式
{24937}{24982}——让我重按一下
{24983}{25031}我按下 `i` 进入 Insert 模式
{25032}{25091}现在，我可以用下箭头
{25211}{25253}——呜哇，好像翻车了
{25254}{25313}Jon，你能搞定它吗？
{25332}{25402}啊，别介意
{25403}{25560}假设我下到这行
{25580}{25647}按下 `i` 进入 Insert 模式
{25648}{25677}输入一些文本，
{25678}{25750}之后按下 `Esc` 回到 Normal 模式
{25751}{25802}我该如何保存这个文件？
{25803}{25847}这个要用别的命令完成
{25848}{25906}按下 `:` 进入命令行模式
{25916}{26041}之后键入 `w` ，按下 `Enter`
{26049}{26083}`w` 代表写（Write）
{26154}{26218}底部会随之出现 `editors.md`
{26219}{26255}啥啥啥的已写入
{26256}{26309}这样就保存文件了
{26310}{26426}如果我键入 `:q` 退出再重新打开文件
{26435}{26492}你会看到修改被保存了
{26586}{26620}还有一些其它的
{26621}{26696}——实际上有非常多的 Vim 命令
{26697}{26729}适用于各种情况
{26768}{26830}我现在只多介绍一点儿
{26864}{26935}一个很有用的命令是 `help`
{26936}{26959}`:help`
{26973}{27045}键入 `:help`，之后输入
{27053}{27125}特定键或特定命令
{27126}{27197}来获得他们的说明
{27213}{27322}比如我想知道 `:w` 的作用
{27323}{27394}我可以键入 `:help :w`，之后就会显示
{27425}{27604}`:w` 或 `:write` 的文档
{27633}{27690}如果我键入 `:q`，会关闭这个 window
{27691}{27740}并且返回之前的状态
{27792}{27897}注意到 `:help :w` 与 `:help w` 不同
{27933}{28090}因为后者的 `w` 代表
{28100}{28181}你在 Normal 模式下按 `w` 键
{28182}{28226}只是这里的 `w` 键
{28227}{28254}没有 `:`
{28255}{28308}如果我查看 `:w` 的帮助
{28309}{28360}这是 `w` 这条「命令」的资料[*]
{28502}{28730}现在你们掌握了一些使用的基础
{28731}{28769}对吧？你可以打开编辑器
{28785}{28841}用它编辑一个特定文件
{28842}{28890}按下 `i` 进入 Insert 模式
{28891}{28956}输入一些文本，按下 `Esc` 返回
{28957}{29020}Normal 模式，键入 `:w` 保存文件
{29021}{29053}`:q` 退出，所以
{29079}{29135}你们已经会了必要的基本原理
{29139}{29244}用于使用 `vim` 编辑文件，尽管效率有些低下
{29255}{29291}目前为止有问题吗？
{29487}{29513}是的后面这位，所以问题是
{29517}{29583}Normal 模式的优越性是什么？
{29588}{29626}我会讲更多细节的
{29627}{29652}再等 5 分钟就好
{29669}{29773}简而言之，Insert 模式仅仅用于输入文本
{29774}{29798}我在 Insert 模式
{29799}{29838}我可以输入文本，但是
{29839}{29902}我在编程时实际上花费很多时间
{29903}{29990}在我的文件中移动，做一些小修改
{29991}{30016}我移到这里
{30017}{30089}比如我可能想把这个 `https` 链接
{30090}{30139}修改为 `http`
{30189}{30250}我可以做一些小修改，比如这
{30251}{30277}在 Normal 模式下
{30278}{30343}之后五分钟我们会看到更多相关内容
{30354}{30377}好问题！
{30378}{30588}还有其它问题吗？好的，那就继续
{30693}{30794}另一个有必要知道的是
{30920}{30947}我认为是一些高阶的关于
{30948}{31052}Vim 的 buffer，window 与 tab 的模型
{31062}{31100}很可能是这种情况，就是
{31101}{31137}无论你之前在用什么程序
{31138}{31197}像 Sublime Text 或者 VS Code 之类的
{31211}{31256}你都可以在其中打开多个文件
{31258}{31271}是的，你可能
{31277}{31312}打开很多选项卡
{31313}{31384}并且有多个编辑器，窗口
{31394}{31475}Vim 也有这些东西的概念
{31484}{31508}但是，它的模型
{31509}{31574}和大多数其它程序有些不同
{31611}{31684}Vim 提供一组打开的 buffer
{31685}{31736}————这是它对打开的文件的描述
{31746}{31792}也就是说，它有一些打开的文件
{31793}{31892}除此之外，你可以有很多 tab
{31901}{31948}tab 里可以有 window
{31959}{32010}这种奇怪的机制使得 Vim
{32011}{32047}相较于你以前用的程序
{32048}{32065}有些许不同
{32073}{32159}就是它的 buffer 与 window
{32160}{32224}不一定是一一对应的关系
{32240}{32284}比如我现在可以举个例子
{32289}{32364}后面我会展示对应的组合键
{32365}{32425}但是现在来说，你可以做的一件事是
{32426}{32455}创建两个不同的 window
{32456}{32538}所以我在上边儿有个 window，下边儿又有一个
{32565}{32633}注意，两个 window 打开了同一个文件
{32634}{32635}所以如果我在这里做一些编辑|注意，两个 window 打开了同一个文件
{32636}{32677}如果我在这里做一些编辑|所以如果我在这里做一些编辑
{32678}{32680}如果我在这里做一些编辑
{32695}{32739}实际上这些变化也会发生在底部的 window 中
{32740}{32813}因为两个 window 打开的是同一个 buffer
{32845}{32988}这就方便你同时去看同文件的不同部分
{32989}{33041}就像这样，当你想看到文件的顶部
{33048}{33092}比如说程序的导入部分[*]
{33093}{33172}而且还可以同时在下面的 window 处理别的
{33208}{33259}因此，要记住下面这点，就是
{33260}{33357}Vim 的想法是 - 有很多 tab
{33390}{33469}每个 tab 都有一定数量的 window
{33470}{33563}然后每个 window 都有对应的 buffer
{33576}{33680}而一个 buffer 可以同时被零或多个 window 打开
{33703}{33732}刚开始学习 Vim 时
{33733}{33767}只有一件事我没整明白
{33768}{33814}所以我想尽早解释一下
{33834}{33981}我们前面提到的 `:q` 命令并不会完全退出 Vim
{33989}{34045}而是只关闭当前 window
{34046}{34115}而后如果没有打开的 window，Vim 才会退出
{34116}{34165}因此，在这里，如果我键入 `:q`
{34172}{34243}它只会关闭顶部的 window
{34244}{34273}因为那是我所在的 window
{34282}{34368}现在，剩余的 window 将变为全屏显示
{34379}{34432}我可以再次键入 `:q` 来关闭它
{34436}{34486}现在，我们在打开的第二个 tab 中
{34487}{34533}如果我最后一次执行 `:q`
{34536}{34573}好的，现在 Vim 退出了
{34640}{34702}如果你不想按太多次 `:q` ...
{34703}{34755}看，这里有三个独立的 window
{34759}{34821}如果我执行 `:qa` ，则退出所有 window
{34839}{34884}这个命令将关闭所有打开的 window
{34988}{35060}好，现在回答你的问题
{35061}{35104}Normal 模式实际上是做什么的
{35113}{35174}这是 Vim 中另一个非常酷的想法
{35175}{35298}我认为这实际上是该程序最有趣的设计
{35345}{35412}就像，诸位都是程序员，诸位喜欢编程一样
{35456}{35523}Vim 的设计理念是 Vim 的 Normal 模式
{35524}{35636}例如 Vim 的接口，本身是一种编程语言
{35659}{35696}让我重复一遍
{35697}{35821}这就是 Vim 有趣的核心哲学：它的接口是种编程语言 [*]
{35846}{35870}那意味着什么？
{35877}{35951}这意味着不同的按键组合具有不同的效果
{35958}{35996}并且一旦你掌握了这些组合的、不同的效果
{35997}{36049}就可以把它们拼到一起
{36060}{36089}就像在编程语言中一样
{36090}{36136}你可以学习不同的功能和内容
{36137}{36202}然后将它们糅合在一起成为一个有趣的程序
{36210}{36311}同样，一旦你了解了 Vim 不同的移动、编辑命令
{36312}{36336}以及与之类似的内容
{36343}{36418}就可以利用 Vim 的接口
{36419}{36452}编写程序去和 Vim 「交谈」
{36489}{36544}而且，一旦形成肌肉记忆
{36553}{36639}你就可以快速编辑文件，思维多快就能写多快
{36647}{36664}至少对我来说
{36665}{36764}换成过去我用的编辑器，我觉得我做不到这一点
{36776}{36812}但 Vim 几乎做到了
{36858}{36950}因此，我们来深入研究一下 Normal 模式是怎么回事
{36961}{37029}你可以试着一起做
{37030}{37081}比如，在 Vim 中随便打开一些文件
{37094}{37163}并跟着我键入一些组合键
{37182}{37236}可能一上来你最想做的事就是
{37237}{37287}在 buffer 中四处移动
{37288}{37339}比如上下左右地移动光标
{37357}{37439}在 Vim 中是用 `hjkl` 键
{37444}{37470}而不是箭头键来操作。
{37479}{37517}尽管默认配置下它们确实能用
{37518}{37544}但尽量避免用
{37545}{37624}因为你不想将手反复移向箭头键
{37625}{37626}这浪费了大量时间，对吧？
{37627}{37669}这想想就很浪费时间，不是吗|这浪费了大量时间，对吧？
{37696}{37735}而 `hjkl` 这几个键刚好就在键盘正中间一行
{37752}{37794}按下 `j` 光标会往下移一行
{37812}{37832}而按 `k` 会上移一行
{37857}{37882}按下 `h` 光标会左移一个字符
{37883}{37917}而 `l` 将光标右移一个字符
{37953}{37972}在刚开始使用时
{37973}{38007}你可能会觉得这种操作方式有点反直觉
{38015}{38071}然而这背后有一些历史原因
{38072}{38093}就是，这样的一个布局
{38094}{38209}实际上在原先 Vi 的开发者使用的键盘上[*]
{38210}{38271}会是一个挺合理的样子[*]
{38287}{38347}但是这个布局很快就会成为一种肌肉记忆
{38358}{38460}那么这就是在 Normal 模式下移动光标的基本方式
{38521}{38550}那么还有什么方式呢
{38556}{38616}看，如果你要这样浏览屏幕上这种文件
{38620}{38651}这个效率简直低得离谱
{38652}{38724}我们不想这样按着按键
{38725}{38760}然后等好长一段时间
{38761}{38796}直到光标走到我们想要的地方
{38805}{38861}因此 Vim 里还有其他的按键组合
{38862}{38897}用来执行不同种类的移动
{38915}{38976}另外这些按键和它们的用途现在并不需要记
{38977}{39050}在课堂笔记中会全部列出来
{39086}{39108}现在要做的就是
{39109}{39165}尽可能的理解 Vim 的界面是一种编程语言
{39166}{39190}这一思想
{39217}{39278}那么另一种移动光标的方式是按下 `w` 键
{39287}{39349}这样做将会使光标往前移一个单词
{39379}{39479}类似的，按下 `b` 键会使光标往后移一个单词
{39519}{39595}那么这样移动起来效率就高一些了
{39619}{39650}此外我们还有一个 `e` 键
{39651}{39699}这个键可以把光标移动到单词末尾
{39716}{39762}让我把这个东西（击键显示工具）挪开
{39784}{39849}例如我在这里按下 `e` 键
{39850}{39904}光标就跑到这个单词末尾去了
{39905}{39925}再按一下就跑到下一个单词末尾去了
{39926}{39938}以此类推
{40016}{40061}你也能以行为单位移动
{40062}{40117}按下 `0` 键可以移动到行首
{40127}{40172}而按下 `$` 可以移动到行末
{40186}{40305}按 `^` 则会移动到行首的第一个非空白字符
{40321}{40410}让我来找一行…
{40490}{40576}那就这行吧
{40577}{40646}例如我按下 `0` 它会跳到行首
{40661}{40705}按下 `$` 跳到了行末
{40719}{40858}而猜猜按下 `^` 会跳到哪呢
{40912}{40984}按下它会跳到行首的第一个非空白字符
{41031}{41076}有点像正则里的那个
{41110}{41149}*应该是那个横杠*
{41150}{41213}对！跳到这个横线！
{41296}{41343}我们再来谈谈其他的移动方式
{41354}{41431}如果要在 buffer 里上翻下翻
{41432}{41509}按下 `Ctrl`+`u` 就可以往上翻
{41538}{41596}而 `Ctrl`+`d` 往下翻
{41621}{41711}比按住 `j` 和 `k` 键快多了
{41718}{41848}那样比按这两个键翻页慢多了
{41923}{41984}除此之外你还可以跨越整个 buffer 浏览
{41997}{42048}按下大写 `G` 可以跳到最底部
{42064}{42102}而键入 `gg` 则可以跳到顶部
{42182}{42247}有些键位是辅助你记忆的
{42248}{42299}因此对于这些键记忆起来会轻松一些
{42300}{42339}例如 `w` 是 word （即 "单词"）
{42340}{42367}而 `b` 是 beginning of word （单词开头）
{42368}{42392}`e` 是 end of word（单词结尾）
{42401}{42436}这些按键设计看上去都挺合理的
{42461}{42537}而 `0`, `^`, `$` 大概是受到正则表达式启发
{42538}{42569}这些键的意义还是能讲得通的
{42584}{42681}除此之外还有一些比较离谱，无厘头的
{42682}{42731}但你看键盘上只有这么多键
{42732}{42752}有啥办法呢（只能也给 `z`,`v` 这种键分配功能）
{42788}{42810}例如
{42811}{42914}（大写）`L` 键把光标移到屏幕最下端一行
{42946}{42982}`L` 代表 Lowest（最低），这说得通
{42985}{43007}`M` 代表中间（Middle）
{43020}{43078}我猜 `H` 是最高（Highest）
{43211}{43291}除此之外还有许多的有趣移动方式
{43292}{43371}虽然我们并不会在课上全部涵盖这些东西
{43389}{43509}但是在你将可以在练习一中逐一尝试[*]
{43565}{43728}除此之外我还想说一个移动方式
{43740}{43783}这个移动方式叫查找
{43784}{43819}也算蛮好用的
{43825}{43853}假设我现在在这行
{43862}{43948}我想跳去第一个啥字符的位置呢…
{43957}{43996}例如我想跳去第一个 o 字符
{44008}{44040}我可以键入 `fo`
{44056}{44179}然后光标就跳到了第一个 o 的位置[*]
{44184}{44211}我还可以键入 `fw`
{44212}{44274}这样光标就跳到了第一个 w 的位置
{44284}{44306}键入 `fc`
{44309}{44333}光标就跳到了第一个 c 的位置
{44384}{44472}我还可以键入大写 `F` 小写 `w`
{44492}{44554}这样就会将光标前向移动到最近的 w
{44574}{44605}大写 `F` 小写 `s`
{44616}{44654}则会跳到光标前最近的 s
{44672}{44718}此外 `f` 这东西还有个变体
{44737}{44766}——`t`，代表「跳转至」
{44775}{44823}比如我可以键入 `to`[*]
{44832}{44905}但是光标不会落在 o 上面
{44906}{44954}而是 o 前面一个字符
{44964}{45100}而大写 `T` 小写 `t` 会往反方向寻找 t 字符
{45101}{45138}但不会落到 t 字符上
{45141}{45168}而是它后面一个字符
{45198}{45256}所以你可能已经对我之前说过的
{45257}{45290}Vim 是一种编程语言
{45291}{45322}这一思想有了一些认识
{45323}{45360}例如你可以把这些命令组合起来
{45373}{45392}`f` 和 `t`
{45393}{45422}分别表示查找（Find）和跳至（To）
{45428}{45480}因此你可以查找特定字符
{45483}{45540}或者跳转到某个字符
{45593}{45655}那么这就是 Vim 的几种移动命令了
{45667}{45710}现在有什么问题吗
{45791}{45805}那么这就是…
{45806}{45834}啊，有问题吗
{45849}{45945}啊，没有。好
{45959}{46020}那么这就是几种 Vim 里的移动命令了
{46021}{46106}你可以借助他们来快速地浏览文件
{46128}{46216}接下来另一类常用命令就是编辑命令了
{46230}{46336}我们之前已经说过一个 `i` 键了
{46337}{46403}按下此键可从 Normal 模式进入 Insert 模式
{46417}{46469}然后你就可以开始写东西了
{46476}{46506}那么我现在把光标往上移
{46511}{46578}然后按下 `i`，就可以输入文字了
{46581}{46606}`Hello world [ENTER]`
{46704}{46747}然后按 `Esc` 回到 Normal 模式
{46748}{46804}我就对 buffer 做了修改
{46826}{46922}除此之外，还有许多用于高效编辑的命令
{46924}{46998}这些在你编程的时候会派上用场
{47017}{47112}其中之一就是我之前还没讲到这里的时候
{47113}{47145}不小心触发的 `o` 键
{47159}{47218}假设我的光标在这里
{47226}{47293}我现在在 Normal 模式按下 `o` 键
{47300}{47389}它就会在我的光标下面给我开（open）新的一行
{47410}{47441}而这就是 `o` 代表的意思
{47442}{47518}然后它就会给我切入 Insert 模式
{47523}{47568}我现在就可以开始输入东西了
{47587}{47635}然后按 `Esc` 回到 Normal 模式
{47658}{47765}类似的还有一个大写 `O` 键
{47766}{47910}它会在光标上方开一行
{47920}{47959}然后让我进入 Insert 模式
{48027}{48085}Vim 里还有一个用来删除的命令
{48090}{48232}我现在把光标放在这个单词上
{48257}{48302}然后按下 `d` 键
{48307}{48340}`d` 代表删除（delete）
{48348}{48387}唔，啥都没发生
{48394}{48498}其实 `d` 键还要配上刚讲的移动命令来食用
{48504}{48602}例如 `hjkl`
{48610}{48685}再如 `w`, `b` 键[*]
{48686}{48706}等等
{48714}{48738}那我现在按下 `d`
{48772}{48784}啊这 ⊙﹏⊙∥
{48800}{48857}我现在按下 `d` 然后按下 `w`
{48858}{48894}就会删除一个单词
{48944}{48968}让我撤销这个操作
{48976}{49032}在 Vim 里撤销，只需按下 `u` 即可
{49058}{49099}注意光标现在在这儿
{49112}{49171}我键入 `dw` 删掉了一个单词
{49191}{49223}然后让我动一动光标
{49231}{49255}再删一个单词
{49275}{49307}例如…
{49323}{49354}啊这玩意好烦，老挡着我
{49363}{49445}例如我光标在一个单词的中间
{49452}{49498}我想从这里一直删到单词结尾
{49510}{49580}猜猜要用什么命令组合？
{49667}{49682}`d` 和什么？
{49716}{49741}对！`de`！
{49757}{49792}它会从这里删到单词结尾
{49880}{49951}另一个常用的编辑命令是 `c`
{49952}{49982}`c` 代表更改（Change）
{50001}{50068}这玩意很像删除
{50080}{50132}但是它删完以后会进入 Insert 模式
{50136}{50213}因为我想把它删掉然后改成其他东西
{50228}{50251}例如我光标在这里
{50252}{50284}按下 `ce`
{50294}{50337}代表从这里更改到单词结尾
{50356}{50438}然后它就会把这段内容删掉
{50443}{50486}注意之后它切进了插入模式
{50487}{50552}现在我无论输入什么都会输进 buffer 内
{50578}{50633}然后按下 `Esc` 回到 Normal 模式
{50698}{50757}因此 `c` 和 `d` 这两个命令很像
{50758}{50816}它们都会接受一个操作范围作为参数
{50837}{50937}然后按照操作范围的方向进行删除或更改
{50975}{51048}此外还有一个规律
{51054}{51134}当你连续按两次某个编辑命令时
{51136}{51195}它将作用于这一整行
{51211}{51253}`c` 键也不例外
{51269}{51335}例如当我按下 `dd` 时会删掉整行
{51350}{51417}按下 `cc` 时也会这样
{51418}{51445}但此外还会进入编辑模式
{51446}{51490}这样我就可以把这行的内容改成其他东西
{51581}{51676}我们再多说几个，呃，编辑命令
{51695}{51761}因为后面我们会了解到这几个东西如何共同作用
{51774}{51828}那么另一个常用的命令就是 `x` 键
{51829}{51896}假设我的光标在某个字符上
{51909}{51929}当我按下 `x` 时
{51948}{51981}它会把那个字符删掉
{52108}{52153}还有一个命令是 `r`
{52161}{52208}如果我现在移到某个特定的字符上
{52209}{52231}然后按下 `r`
{52232}{52283}它会接受另一个字符作为参数
{52284}{52381}然后用所给的字符替换掉光标处的字符
{52484}{52601}呃，我再讲几个编辑命令
{52607}{52656}我认为我刚刚提到过一个
{52682}{52742}就是你可以撤销你在 Vim 里做的编辑
{52752}{52823}在 Normal 模式下按 `u` 就可以做到
{52829}{52886}`u` 代表撤销（Undo），还算好记
{52887}{52981}所以我按很多次 `u`，就会撤销我所有的改动
{53012}{53080}然后，撤销的反面，当然是——重做（Redo）
{53090}{53159}Vim 中，这个命令的组合键是 `Ctrl`+`R`
{53379}{53461}好，那么我要说的另一个编辑命令
{53462}{53494}就是复制粘贴，因为……
{53495}{53529}哦，有问题吗？`
{53534}{53668}*就是，Undo 是这样吗……比如它是不是撤销掉*
{53669}{53731}*上次退出 Insert 模式前，插入的所有内容？*
{53732}{53829}*还是只是最后一个字符呢？*
{53841}{53884}啊——问得好！
{53885}{53935}这位同学问的是：Undo 会撤销
{53936}{54001}你进入 Insert 模式以后的所有输入吗
{54002}{54033}或者只是最后一个字符？
{54042}{54102}呃，答案实际上更复杂一点儿
{54103}{54140}「撤销」会，呃
{54141}{54193}撤销你最新的改动
{54194}{54237}换言之，如果你进入 Insert 模式
{54238}{54290}然后键入一些内容，再退回 Normal 模式
{54295}{54335}然后按下 `u` 撤销
{54336}{54395}它会撤销你在 Insert 模式下的所有输入
{54408}{54473}但如果你执行了一些其他的编辑命令
{54474}{54527}比如按下 `x` 删除一个字符
{54538}{54570}之后按 `u` 撤销的话
{54571}{54653}只会撤销上一个编辑命令的改动
{54717}{54757}这个问题我解释清楚了吗？
{54762}{54826}*嗯*  好，还有别的问题吗
{54887}{55028}行。那我就讲复制粘贴了，因为这很常用
{55038}{55165}`y` 命令代表复制，`p` 命令代表粘贴[*]
{55171}{55222}`y` 代表复制，因为……「提取，拉拽」（yank）
{55223}{55258}这个词就是他们——
{55259}{55337}Vim 用这个术语指代复制
{55357}{55483}而且 `y` 也接受一个动作（命令）作为参数
{55484}{55585}所以比如我键入 `yy`，就会复制当前行
{55586}{55634}此时若再按下 `p` 粘贴
{55643}{55697}注意，这里就有一模一样的两行了
{55698}{55733}因为我刚往下面粘贴了一行
{55746}{55769}按一下 `u` 撤销它
{55796}{55846}但如果我执行像 `yw` 这样的命令
{55847}{55875}它会复制一个单词
{55876}{55902}然后按一下 `p`
{55912}{56004}就会在光标位置上粘贴这个词
{56057}{56140}在谈到复制和粘贴的时候，能选择一块东西并且复制它
{56141}{56217}会是一件非常有用的事情，对吧？
{56218}{56276}比如，无论之前你用哪个编辑器
{56277}{56329}你大概都是这样运用复制粘贴的
{56342}{56417}所以此时我们要进入 Visual 模式
{56425}{56513}它们是另外一组彼此相关的模式
{56514}{56558}都可以从 Normal 模式进入
{56559}{56625}用它们来选择大段文字
{56646}{56710}其中一个模式是普通的 Visual 模式
{56718}{56764}你可以（从 Normal 模式）按下 `v` 进入
{56775}{56845}一旦进入这个模式，便可以使用大多数
{56846}{56924}Normal 模式下的指令移动你的光标
{56937}{56979}它就会选择移动前后之间的内容
{56980}{57050}所以我可以用，你看，`hjkl` 移动光标
{57051}{57103}或者我可以用 `w` 跳词
{57110}{57145}或者别的这样的命令
{57146}{57196}这样就会选中一段文本
{57216}{57269}一旦我选中这段文本
{57270}{57347}就可以对它们进行各式各样的处理
{57353}{57424}其中常用的有复制这段文本
{57437}{57499}所以我选中之后，可以按一下  `y` 复制
{57510}{57569}之后 Vim 会退回普通模式
{57578}{57653}现在那段文本被存到了粘贴（paste） buffer 里
{57654}{57690}现在我随便移到一个地方
{57691}{57715}然后按一下 `p`
{57716}{57778}就粘贴了刚复制的那段文本
{57816}{57987}相似于这种选择一串连续文字的 Visual 模式
{57997}{58103}还有 Visual Line 模式，按下大写 `V` 进入
{58113}{58168}它可以一次选择一行文字
{58178}{58226}甚至还有 Visual Block 模式
{58227}{58275}可以按 `Ctrl`+`v` 进入
{58281}{58341}它可以选择矩形的文字块儿
{58353}{58414}这可是你原先的编辑器做不到的[*]
{58503}{58606}好了，我们有一大堆 Vim 编辑命令要学呢
{58607}{58673}它有特别多，很无厘头但是非常好玩的命令
{58674}{58772}比如 `~` 命令可以改变字符大小写
{58778}{58835}或者是你选中的选区（的所有字符）
{58836}{58919}我举个例子，比如选中这个「Visual Studio Code」
{58920}{58957}然后通过选中它之后按下 `~`
{58958}{59024}反转这玩意儿的大小写
{59036}{59099}并且还有很多像这样的命令
{59100}{59143}它们一个比一个深奥难懂[*]
{59150}{59194}我们当然不会面面俱到
{59195}{59254}但是你会在练习中碰到这种东西
{59278}{59328}这些是 Vim 的编辑命令
{59329}{59411}其中很多可以和移动命令组合起来
{59412}{59472}诸位对之前的内容有什么疑问吗？
{59615}{59665}挺好，接着往下讲
{59670}{59821}另一类与 Normal 模式密切相关的东西
{59822}{59853}或者说命令，就是计数
{59864}{59904}换言之，你可以给命令以数字
{59905}{59969}将一件事重复执行若干次
{60017}{60055}就比如我的光标在这里
{60056}{60132}我想下移，比如，一二三四行
{60159}{60220}一种方法是我可以按 `j` 键四次
{60221}{60248}也就是向下（一行）四遍
{60249}{60308}然后 `kkkk` 向上移动四次
{60351}{60410}但与其反反复复按一个键
{60411}{60436}不如我使用计数（count）
{60446}{60492}所以比如我键入 `4j`
{60504}{60545}就会执行四次 `j`
{60558}{60614}Vim 的接口是种编程语言，对吧
{60630}{60682}如果我键入 `4k`，就会上移四次
{60691}{60800}现在我在这里，按下 `v` 进入 Visual 模式
{60808}{60882}好，现在可以四处移动光标，选中文字块
{60893}{60968}我可以，比如按下 `eee` 选择几个数字
{60977}{61024}但我也可以——我先返回原处
{61038}{61088}再按 `v` 进入 Visual 模式
{61089}{61144}然后键入 `3e` 去选择，像它字面意思所说
{61145}{61204}「向右移到单词结尾」三次，这个范围
{61259}{61339}当然这些也可以和编辑命令相结合
{61350}{61459}假设我想删除七个单词
{61469}{61547}我可以先把光标移到某处
{61548}{61600}然后键入 `7dw` [*]
{61601}{61629}也就是「删除单词」七次
{61696}{61762}它在一些情况下会特别有用
{61763}{61815}比如假设我的光标在屏幕某处
{61816}{61865}而我看向了屏幕另一处
{61866}{61925}或者说我想要我的光标移到那一行
{61938}{62015}请注意我在左侧设好了「相对行号」 [*]
{62022}{62105}也即，光标所在处显示绝对行号
{62112}{62185}而其他处显示相对光标的偏差行数
{62195}{62242}现在来看我的光标在这儿
{62243}{62346}但我想移到下面这个「Microsoft Word」这里
{62347}{62392}所以这是往下 8 行
{62393}{62460}那么我用什么命令组合去搞定这件事呢？
{62468}{62507}想一下最有效率的方式是什么？
{62519}{62540}*eight j*
{62546}{62567}没错！
{62568}{62606}来试一下，`8j`
{62607}{62666}然后我的光标就会移到这一行
{62762}{62965}好的。Vim 的最后一类按键命令叫修饰符
{62966}{63035}到现在为止，我们讲了移动、编辑和计数
{63045}{63089}而最后，我们还有修饰符
{63102}{63209}修饰符会略微变更移动命令的意义
{63226}{63367}有俩特别好用的是 `a` 和 `i` 修饰符
{63368}{63457}`a` 代表周围（around）
{63458}{63500}而 `i` 代表内部（inside）
{63523}{63580}为了见识一下它的用武之处
{63581}{63673}我可以把光标移到，比如这里
{63693}{63770}呃，希望你们都熟悉 Markdown 语法[*]
{63771}{63812}——不熟悉也完全没关系，这不太重要
{63825}{63886}这是一段 Markdown 写成的链接
{63896}{63931}方括号内的是其描述文字
{63932}{63973}圆括号内则为链接地址
{63974}{64028}现在我的光标在这里边儿
{64029}{64110}我想更改这个链接对应的描述文字
{64136}{64235}嗯，一种方法是用 `b` 回到这儿
{64253}{64283}然后执行比如 `2dw`
{64284}{64330}然后 `i` 进入 Insert 模式
{64331}{64396}有许多种方式能达到目的，这是其中之一
{64397}{64441}这样我就能随心所欲地打些别的
{64457}{64501}|按 `u` 撤销，再撤销
{64515}{64552}另一种能搞定的方式是
{64553}{64619}更改两个单词——「`c2w`」
{64629}{64664}然后输入别的文本
{64737}{64810}但这同一个问题的最终方案是
{64811}{64889}运用修饰符命令来向 Vim 表明
{64890}{64986}我想如何和这些成对的东西—
{64987}{65053}—比如圆括号和方括号去交互
{65070}{65125}所以这个最终方案是
{65137}{65223}「在方括号内更改」—`ci[`
{65233}{65304}这样还会在删除括号内的内容之后
{65305}{65364}让我进入 Insert 模式
{65406}{65427}所以你可以看到
{65428}{65466}我们可以怎样去运用这些“组件”
{65468}{65513}就比如提到的「更改」（change）
{65516}{65563}然后与其他移动命令结合
{65565}{65626}我们讲了 **i**nside，它是怎样的一个修饰符
{65634}{65682}然后我们讲了……呃
{65690}{65750}我们没讲括号的事情
{65758}{65845}就是，如果你的光标位于一些不同的，呃
{65846}{65921}不同的成组的东西，比如圆括号、方括号，之上
{65922}{65978}你可以按下移动键——`%`
{65979}{66052}在配对的括号间反复横跳
{66087}{66223}如果我移到这里，然后执行 `di(`
{66245}{66317}就会删除这些括号里边儿的内容
{66352}{66446}那么，这些是 Vim 的修饰符
{66458}{66484}这样我们讲过 `i` 了
{66485}{66520}但是没讲过 `a`
{66521}{66577}如果我敲 `da(` 进去
{66582}{66683}它就会删除括号里的内容，也包括括号
{66693}{66731}所以说 `i` 是内部（inside）
{66732}{66792}`a` 是周围（around或者包含（including）的意思
{66908}{67033}好，所以这基本就是你在 Vim 的接口里
{67034}{67094}能够相互结合的若干类命令
{67107}{67147}那么，现在还有关于这些理念
{67148}{67235}或者接口即编程语言这个纲领的问题吗
{67378}{67517}好，那为了展示这个编辑器的强大
{67518}{67579}我们快速演示一遍
{67606}{67709}这能让我们体会到这个工具有多快
{67710}{67769}甚至和我们思考得一样快
{67796}{67907}好，看这里有一个啥也没输出的
{67908}{67951}坏掉的 fizz_buzz
{67959}{68018}额，但愿你们都听说过 fizz_buzz
{68019}{68078}如果没听说过的话，我简单提一下
{68104}{68203}fizz_buzz 是一种输出 1 到 n 的练习
{68204}{68285}当数字能被 3 整除时，输出 fizz
{68286}{68350}当数字能被 5 整除时，输出 buzz
{68351}{68446}当数字同时被 3 和 5 整除时， 输出 fizzbuzz
{68459}{68512}如果这些条件都没满足，就直接输出数字
{68523}{68566}所以，你的输出看上去应该长这样：
{68567}{68687}`1, 2, fizz, 4, buzz`
{68698}{68832}但是，如果我运行这个程序，它啥也没输出
{68877}{68936}我把程序放在左边，终端放在右边
{68996}{69049}好，现在这里有一堆问题
{69050}{69109}其中一个就是 `main` 函数从来没被调用过
{69110}{69190}现在看好我是怎么修这个锅的
{69219}{69281}现在看好我是怎么修这个锅的
{69290}{69360}看好了，我按键的次数到底能少到什么程度
{69378}{69439}大写 `G` 把光标跳到文件底
{69462}{69512}`o` 在下面新建一行
{69513}{69568}现在我就可以往里输入内容了
{69569}{69610}我现在处在 Insert 模式
{69720}{69787}我已经输入完我想改的了
{69792}{69841}`Esc` 回到 Normal 模式
{69852}{69894}如果我键入 `:w`
{69895}{69944}在命令行模式下执行写入
{69969}{69993}让我回到这儿
{69994}{70058}好，至少现在程序运行时输出东西了
{70078}{70130}这个程序还有另一个问题
{70131}{70186}它是从 0 开始的，而不是 1
{70187}{70222}咱再来修修这个锅
{70241}{70320}移到这个 `range()`……
{70321}{70366}唔，这个 `range()` 函数
{70367}{70423}它不该从 `0` 开始一直到 `limit`
{70424}{70483}它应该从 `1` 开始到 `limit + 1`
{70512}{70584}我还没给你们看在 Vim 中怎么搜索
{70585}{70628}按下 `/`
{70679}{70745}额，我得把这个关掉重启
{70752}{70851}如果你按下 `/` ，它就开始搜索
{70852}{70921}如果我输入 `range`
{70922}{71026}我的光标会从当前位置挪到第一个 `range` 那
{71027}{71086}这样能让你把光标高效地移到想要的地方
{71095}{71165}`ww` 继续挪两个字符
{71175}{71210}`i` 进入 Insert 模式
{71211}{71310}添加 `1, ` 然后按 `Esc` 回到 Normal 模式
{71327}{71374}这是 Vim 里面一个很常见的情况
{71375}{71409}你先待在 Normal 模式里
{71410}{71459}然后把光标挪到某个地方，进入 Insert 模式
{71460}{71527}做一点小改动，然后再用 `Esc` 回到 Normal 模式
{71528}{71564}Normal 模式就像是家一样——
{71565}{71611}这大概就是你呆的时间最长的地方
{71635}{71689}我还想加上一个 +1
{71694}{71741}那就用 `e` 挪到这个词后面
{71742}{71822}摁 `a` 代表追加，输入 `+1` 然后 `Esc` 退出
{71885}{71930}好，我们已经解决了这个问题
{71931}{71966}这程序还有个毛病
{71967}{72085}就是被 3 和 5 整除的时候输出的都是 fizz
{72086}{72118}咱再来解决下这个问题
{72125}{72194}用 `/fizz` 来找出 fizz
{72203}{72262}然后按下 `n` 来找到下一个匹配的结果
{72269}{72392}再用 `ci'` 来改变两个单引号中间的内容
{72393}{72508}它就删除了 fizz 然后进入 Insert 模式
{72513}{72554}然后我就可以随意输入了
{72555}{72614}然后再按下 `Esc` 回到 Normal 模式
{72700}{72788}好极了，我们解决掉了这个问题
{72803}{72869}这程序还有另一个问题
{72873}{72966}当数字是 15 的倍数时
{72967}{73060}它在独立的两行输出 fizz 和 buzz
{73112}{73159}我们再来修一下这个锅
{73207}{73286}先把光标往下移动到这一行
{73287}{73398}我实际上并不担心程序的内容是什么
{73399}{73439}有些程序写的很蠢，但这并不重要
{73440}{73510}只需注意我在 Vim 中按下了哪些键
{73511}{73589}这些按键让我在 Vim 中高效的修改程序
{73616}{73655}现在我的光标在这一行
{73656}{73718}我按下 `$` 来把光标移动到行尾
{73719}{73757}按下 `i` 来进入 Insert 模式
{73767}{73810}然后把这些东西输入进去
{73811}{73857}按 `Esc` 来回到 Normal 模式
{73874}{73942}现在我想在下面的 print 如法炮制
{73977}{74032}请你跟我这样做，`jj.` [*]
{74069}{74207}在 Vim 中，按下 `.` 会重复之前的编辑命令
{74222}{74320}要想完成重复性工作，这是个好东西
{74321}{74379}还不用重复地输入相同内容
{74380}{74480}上次它插入了 `, end=''`
{74481}{74585}所以当我按下 `.` 时，它就会在这一行再来一遍
{74637}{74726}我想，完成这个示例程序的最后一步是
{74736}{74793}我们要修复一下（数值边界问题）
{74805}{74855}使得这个程序可以接受一个命令行参数
{74856}{74915}而不是用写死在程序里的这个 `10`
{74931}{75018}那接下来我按 `gg` 来回到顶上
{75025}{75108}用大写 `O` 在上面新建一行
{75109}{75195}然后我会输入 `import sys` ，回车
{75198}{75246}然后再用 `Esc` 键回到 Normal 模式
{75272}{75334}然后我想把光标挪到 `10` 那个地方
{75335}{75421}那我就 `/10` ，这样我就直接到那去了
{75435}{75547}用 `ci(` 来在括号里面编辑
{75555}{75656}现在我就可以把我想要的输入进去了
{75699}{75862}做完这些，我的程序就能好好的 fizzbuzz 了
{75869}{75944}我想我还有一个地方没改，但这已经不重要了
{75945}{76030}这已经能说明你可以迅速的做出许多改动了
{76064}{76109}那么，关于这个例子
{76110}{76169}还有我们讲的这种思路还有什么问题吗
{76202}{76268}*（同学关于命令行环境的问题）*
{76284}{76385}啊，这个大概会在周二详细地讲
{76397}{76563}我这里把 Vim 放在左边，Shell 放在右边
{76568}{76634}然后外边套了个 Tmux
{76716}{76774}这个问题的一个变体会是
{76775}{76834}比如怎么在 Vim 的 window 之间切换
{76835}{76874}你可以在讲义里找到答案
{76875}{76912}还有关于这些的组合键
{76913}{77013}可以对付打开的多个，相同或者不同的 window
{77028}{77047}还有问题吗？
{77048}{77126}* **c**hange 和 **d**elete 有什么区别*
{77142}{77169}啊，问得好
{77170}{77288}删除（`d` 键）接受一个操作范围并删除
{77291}{77331}但始终保持在 Normal 模式内
{77332}{77387}所以你得以边四处移动，边删除一些内容
{77388}{77456}而更改（`c` 键）和删除很像
{77461}{77528}都接受操作范围，对文件内容做同样之事
{77529}{77563}但是在删除了内容之后
{77564}{77611}会立即把你切到 Insert 模式里
{77612}{77683}所以它省了你额外敲一个字符的时间
{77725}{77804}在这举个例子，如果我想删掉这个 `main`
{77805}{77837}可以用 `dw` 来删掉这个词
{77865}{77943}但是如果我随便再敲个字符，比如 `j`
{77944}{77972}它就会把光标向下移动
{77993}{78021}如果我先撤销
{78022}{78077}我还可以用 `cw` “重新组织语言”
{78078}{78126}它实际上把我拐到 Insert 模式里了
{78127}{78188}然后我就可以随便输入点啥东西
{78196}{78329}`dwi` 和 `cw` 一模一样
{78339}{78376}但是 `cw` 少敲一次键盘
{78387}{78467}我们在讲义里还有个链接，是关于 Vim golf 的
{78468}{78539}大概就是，他们在线上做了个游戏
{78540}{78599}在这个游戏里你会接到一个编辑任务
{78600}{78733}你的目的就是找到最少敲几次键盘能搞定它
{78734}{78774}这小游戏玩着简直上瘾
{78775}{78868}所以我建议你们有空再玩[*]
{78942}{79011}我还看到有人举手问问题？
{79023}{79105}*重复最后一次操作那个的命令是啥键来着？*
{79140}{79187}英文句号，对
{79211}{79279}这是最有用的 Vim 命令之一，这问题好
{79287}{79327}还有别的问题吗
{79425}{79549}好，咱现在大约还剩五分钟
{79550}{79615}我会简短的讲一点东西
{79616}{79666}在讲义里会有相关的细节
{79667}{79712}你们一定看看讲义里这一部分的内容
{79758}{79842}总而言之， Vim 是程序员的文本编辑器
{79843}{79914}正因如此，它也是高度程序化的
{79915}{79998}不仅仅是它的接口是一种程序语言
{79999}{80059}它的众多使用方法也是如此
{80060}{80159}你可以依据偏好，调整它的诸多选项
{80169}{80274}你还可以给它安装很多有用的插件
{80284}{80459}通过硬盘上的 `.vimrc` 文件配置 Vim [*]
{80466}{80552}你会见到很多基于 Shell 的工具
{80553}{80580}都采用这种惯例
{80581}{80660}也即，以纯文本文件作为它的配置文件
{80667}{80708}所以如果我编辑它…
{80709}{80768}现在你电脑上可能没有这个文件
{80774}{80840}但是我已经下载下来了
{80841}{80931}我们给诸位写了一个默认的 vimrc 配置文档
{80932}{80966}并且挂在课程网站上了
{80967}{81002}你可以用那个文档入门
{81003}{81074}如果我运行 `vim ~/.vimrc`
{81098}{81146}我在这能看到一堆注释
{81147}{81195}然后是各种命令
{81196}{81260}譬如一般我们都想开启语法高亮
{81261}{81311}或者开个行数显示
{81312}{81352}如果我们不打开一些东西
{81353}{81423}比如让我删掉显示行数的设置
{81424}{81496}如果我删了这些配置然后重启 Vim
{81497}{81556}你会发现我左边的行号都没了
{81581}{81722}简而言之，你可以配置很多东西
{81731}{81817}我们给了你一个很基础的配置文档
{81818}{81949}试图把 Vim 中默认开启的怪怪的东西关掉
{81950}{82034}但是没把太多的个人设置强加于你
{82046}{82108}当然，我们三个都是 Vim 老鸟了
{82109}{82160}我们也都有重度个人定制版 `.vimrc`
{82169}{82223}如果你们想参考借鉴的话
{82224}{82288}我们也把自己用的配置文档放到了链接里
{82289}{82355}还有成千上万的人们在 GitHub 上
{82356}{82397}分享了他们自己的 `.vimrc`
{82398}{82457}所以你们能从很多地方得到灵感
{82458}{82517}这方面还有很多很酷的博客
{82554}{82637}你还可以用插件去拓展 Vim
{82638}{82681}插件能做各种各样有趣之事
{82689}{82812}比如很多编辑器自带的模糊文件查找
{82813}{82856}所以你可以在一个弹窗里
{82857}{82951}输入文件的，或准确或模糊的名称
{82954}{82995}然后迅速的找到它
{82996}{83114}还有插件能可视化地撤销历次改动
{83115}{83269}文件管理器等等插件
{83270}{83374}所以我们在课程网站上挂了一些我们钟爱的插件
{83379}{83482}所以我强烈建议你熟悉怎样安装插件
{83483}{83515}因为它不会花多少时间
{83516}{83559}并且有些插件真的很酷
{83625}{83780}最后一个话题，我会在下课之前简单提两嘴
{83781}{83845}这个话题是 Vim 模式与其它软件
{83855}{83915}事实证明很多程序员
{83916}{83984}都对 Vim 的接口感到激动不已
{83991}{84091}所以他们在其他工具中做了相似的功能
{84099}{84179}举个例子，我可以配置使用 Vim 的模式
{84180}{84247}去运行 Python 的命令行交互环境（REPL）
{84248}{84278}我可以在这输入内容
{84279}{84313}如果我按下 `Esc` 键
{84314}{84379}就回到交互环境的 Normal 模式了
{84380}{84421}我可以前后移动光标
{84422}{84488}也可以按下 `x` 来删除一些东西
{84489}{84533}或者是用 `cw` 改一个词
{84561}{84605}这些 Vim 的好东西都有
{84627}{84682}不仅是 Python 命令行交互环境
{84683}{84749}我也把我的终端弄成这样
{84750}{84839}我随便输入点东西
{84849}{84900}然后按下 `Esc` 键就到了 Normal 模式
{84901}{84989}光标移到这，我也能进 Visual 模式
{84990}{85091}可以选中一块文本，然后按下 `~` 来修改大小写
{85092}{85249}怎样开启像 bash, zsh, fish 等的 Vim 模式[*]
{85250}{85343}这些也在讲义放了链接
{85344}{85403}还有很多基于 GNU Readline 的软件
{85404}{85463}比如 Jupyter Notebook
{85473}{85526}如果讲义上面没写的话
{85527}{85550}你还可以搜一下
{85551}{85636}因为很多人都喜欢这种功能
{85650}{85722}如果你笃定的想学习这些东西
{85723}{85862}我想，你应该把你的所有工具都打开 Vim 模式
{85863}{85927}首先会让你对这工具有更深的理解
{85928}{85981}其次，当你熟练掌握了 Vim 之后
{85982}{86071}别的工具都会如臂使指
{86166}{86254}我想对 Vim 的简介就到这里了
{86255}{86347}还有一些挺好的材料今天这一讲没讲到
{86348}{86383}但是在讲义里都有
{86384}{86473}最后我极力推荐你们完成今天的练习
{86474}{86598}至少对我个人来说，我认为学习这个编辑器
{86609}{86726}是这系列课程的内容中最让你受益的部分
{86771}{86832}好，今天的课就上到这里了
{86833}{86865}我们明天见
{86889}{86974}顺便提一下，明天的课换成了数据整理
{86975}{87052}现在把周四和周二的课换了一下
{87053}{87102}在我们的课程网站上也能看出来
{87103}{87151}如果有人只上其中一节
{87152}{87175}注意别上错课
