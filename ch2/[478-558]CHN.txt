【478】所以如果我在这里做一些编辑

实际上这些变化也会发生在底部的 window 中

因为两个 window 打开的是同一个 buffer

【482】这就方便你同时去看同文件的不同部分

就像这样，当你想看到文件的顶部

比如说程序的导入部分[*]
*应当是指部分编程语言中的导入模块/头文件

而且还可以同时在下面的 window 处理别的

【488】因此，要记住下面这点，就是

Vim 的想法是 - 有很多 tab

每个 tab 都有一定数量的 window

然后每个 window 都有对应的 buffer

【493】而一个 buffer 可以同时被零或多个 window 打开

刚开始学习 Vim 时

只有一件事我没整明白

所以我想尽早解释一下

【497】我们前面提到的 `:q` 命令并不会完全退出 Vim

而是只关闭当前 window 

而后如果没有打开的 window，Vim 才会退出

【502】因此，在这里，如果我键入 `:q` 

它只会关闭顶部的 window

因为那是我所在的 window

现在，剩余的 window 将变为全屏显示

【506】我可以再次键入 `:q` 来关闭它

现在，我们在打开的第二个 tab 中

如果我最后一次执行 `:q` 

好的，现在 Vim 退出了

如果你不想按太多次 `:q` ...

【510】看，这里有三个独立的 window

如果我执行 `:qa` ，则退出所有 window

这个命令将关闭所有打开的 window

【513】好，现在回答你的问题

Normal 模式实际上是做什么的

这是 Vim 中另一个非常酷的想法

我认为这实际上是该程序最有趣的设计

【518】就像，诸位都是程序员，诸位喜欢编程一样

Vim 的设计理念是 Vim 的 Normal 模式

例如 Vim 的接口，本身是一种编程语言

【522】让我重复一遍

这就是 Vim 有趣的核心哲学：它的接口是种编程语言 [*]
*接口即指用户与它交互的方式、中介物

【526】那意味着什么？

这意味着不同的按键组合具有不同的效果

一旦你掌握了这些组合的、不同的效果

就可以把它们拼到一起

就像在编程语言中一样

你可以学习不同的功能和内容

然后将它们糅合在一起成为一个有趣的程序

【534】同样，一旦你了解了 Vim 不同的移动、编辑命令

以及与之类似的内容

就可以利用 Vim 的接口

编写程序去和 Vim 「交谈」

【538】而且，一旦形成肌肉记忆

你就可以快速编辑文件，思维多快就能写多快

【541】至少对我来说

换成过去我用的编辑器，我觉得我做不到这一点

但 Vim 几乎做到了

【544】因此，我们来深入研究一下 Normal 模式是怎么回事

你可以试着一起做

比如，在 Vim 中随便打开一些文件

并跟着我键入一些组合键

【549】可能一上来你最想做的事就是

在 buffer 中四处移动

比如上下左右地移动光标

【552】在 Vim 中是用 `hjkl` 键

而不是箭头键来操作。

尽管默认配置下它们确实能用

但尽量避免用

因为你不想将手反复移向箭头键

这浪费了大量时间，对吧？
