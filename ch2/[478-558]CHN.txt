【478】因此，如果我在此处进行一些编辑

则这些变化实际上也会在底部的 window 中发生

因为这两个 window 都打开的是同一个 buffer

【482】并且，这使得同时看同一个文件的不同部分很方便

就像这样，当你希望能够查看文件的顶部，就像在导入程序时[*]
* 译者注：应当是指部分编程语言中的导入模块操作

你可以同时在文件的下面，或者其他地方工作

【488】因此，要记住下面这个有用的事

Vim 的想法是 - 有很多 tab

每个 tab 都有一定数量的 window

然后每个 window 都有对应的 buffer

【493】但是，特定 buffer 同时可以在零个或多个窗口中打开

刚开始学习 Vim 时，只有一件事使我感到困惑

所以我想尽早解释一下

【497】我们前面提到的 ':q' 命令并没有完全退出 Vim

而是只关闭了当前 window 

如果之后没有打开的 window 时，Vim 将退出

【502】因此，在这里，如果我执行 ':q' 

它只会关闭顶部的 window，因为那是我所在的那个 window

现在，剩余的 window 将变为全屏显示

【506】我可以再次执行 ':q' 来关闭它

现在，我们在打开的第二个 tab 中

如果我最后一次执行 ':q' 

好的，现在 Vim 退出了

如果您不想太多次按 ':q' ...

【510】那么接下来，这里有三个独立的 window

如果我执行 ':qa' ，则退出所有 window

这个命令将关闭所有打开的 window

【513】好，现在回答你的问题

 normal 模式实际上是做什么的

这是 Vim 中另一个非常酷的想法

我认为这实际上是该程序最有趣的想法

【518】就像，您都是程序员，您喜欢编程一样

Vim 的设计理念是 Vim 的 normal 模式

例如 Vim 的接口，本身是一种编程语言

【522】让我重复一遍

这就像是一种基本有趣的想法：接口是一种编程语言

【526】那意味着什么？

这意味着不同的按键组合具有不同的效果

并且一旦您掌握了不同的按键具有的不同的效果

就可以把它们拼到一起

就像在编程语言中一样

您可以学习不同的功能和内容

然后将它们糅合在一起成为一个有趣的程序

【534】同样，一旦您了解了 Vim 的不同移动和编辑命令

以及与之类似的内容

就可以通过 Vim 的接口编程来与 Vim 交谈

【538】而且，一旦形成肌肉记忆

你就可以快速编辑文件，想多快有多快

【541】至少对我来说

我不认为我能用过去用过的其它编辑器做到这一点

但 Vim 几乎做到了

【544】因此，让我们深入研究 normal 模式怎么运作的

您可以尝试跟着一起做

例​​如，在 Vim 中随便打开一些文件，并跟着我键入一些组合键

【549】可能您最想做的一件事就是，在 buffer 中导航

比如上下左右地移动光标

【552】在 Vim 中是用 hjkl 键

而不是箭头键来操作。

尽管默认情况下它们确实起作用，但请尽量避免使用它们

因为您不需要将手一直移到箭头键的位置

这浪费了大量时间，对吗？

 hjkl 就在你手指的那一行。
