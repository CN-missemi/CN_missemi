【478】因此，如果我在此处进行一些编辑，

则这些变化实际上也会在底部的 window 中发生，

因为这两个 window 都打开的是同一个 buffer。

【482】并且，这对于同时看同一个文件的不同部分是很有用的。

就像这样，所以你希望能够查看文件的顶部，例如在导入程序时[*]，
* 译者注：应当是指部分编程语言中的导入模块操作

同时，你可以在（文件）的下面，在其他地方工作。

【488】因此，要记住下面这个有用的事，

Vim 的想法是 - 有很多 tab，

每个 tab 都有一定数量的 window，

然后每个 window 都有对应的 buffer。

【493】但是，特定缓冲区同时可以在零个或多个窗口中打开。

刚开始学习 Vim 时，只有一件事使我感到困惑，所以我想尽早解释一下。

【497】我们前面提到的「:q」命令并没有完全退出 Vim。

这是「关闭当前 window」，然后，

当没有更多打开的 window 时，Vim 将退出。

【502】因此，在这里，如果我执行「:q」，

我认为它只会关闭顶部的 window，因为那是我所在的那个 window，

现在，剩余的 window 将变为全屏显示。

【506】我可以再次执行「:q」来关闭它。

现在，我们在打开的第二个 tab 中。

如果我最后一次执行「:q」，好的，现在 Vim 退出了。

如果您不想太多次按「:q」...

【510】好的，所以，这里有了三个分割的 window。

如果我执行「:qa」，则退出所有（window），

它将关闭所有打开的 window。

【513】好，现在回答你的问题「normal 模式实际上是做什么的？」。

这是 Vim 中另一个非常酷的想法，我认为这实际上是该程序最有趣的想法。

【518】就像，您都是程序员，您喜欢编程一样。

Vim 的设计哲学是 Vim 的 normal 模式（例如 Vim 的接口本身）是一种编程语言。
# Need Discussion: interface 怎么翻译？接口还是界面

【522】让我重复一遍。这就像是一种基本有趣的想法：接口是一种编程语言。

【526】那意味着什么？

这意味着不同的按键组合具有不同的效果，

并且一旦您学习了（不同的按键具有的）不同的效果，

就可以将它们实际上组合在一起（就像在编程语言中一样），

您可以学习不同的功能和内容，

然后将它们粘合在一起成为一个有趣的程序。

【534】同样，一旦您了解了 Vim 的不同移动和编辑命令以及类似的内容，

就可以通过在 Vim 的接口上进行编程来与 Vim 进行对话。

【538】而且，一旦形成肌肉记忆，你就可以基本上按照你想的速度编辑文件。

【541】至少对我来说，我认为我无法使用过去使用过的其他任何文本编辑器来做到这一点，

但是 Vim 非常接近（做到这一点）。

【544】因此，让我们深入研究 normal 模式的工作原理。

因此，您可以尝试跟着一起做，

例​​如，在 Vim 中随便打开一些文件，并跟着我输入一些组合键。

【549】您可能想做的一件事就是，在 buffer 中导航。

比如向上/向下/向左/向右移动光标。

【552】在 Vim 中执行此操作的方式是使用 hjkl 键，而不是箭头键。

尽管默认情况下它们确实起作用，但请尽量避免使用它们，

因为您不需要将手一直移到箭头键的位置。你浪费了大量时间，对吗？ hjkl 就在本行。
