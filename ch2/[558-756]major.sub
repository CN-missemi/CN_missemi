{37627}{37669}这想想就很浪费时间，不是吗
{37696}{37735}而 `hjkl` 这几个键刚好就在键盘正中间一行
{37752}{37794}按下 `j` 光标会往下移一行
{37812}{37832}而按 `k` 会上移一行
{37857}{37882}按下 `h` 光标会左移一个字符
{37883}{37917}而 `l` 将光标右移一个字符
{37953}{37972}在刚开始使用时
{37973}{38007}你可能会觉得这种操作方式有点反直觉
{38015}{38071}然而这背后有一些历史原因
{38072}{38093}就是，这样的一个布局
{38094}{38209}实际上在原先 Vi 的开发者使用的键盘上[*]
{38210}{38271}会是一个挺合理的样子[*]
{38287}{38347}但是这个布局很快就会成为一种肌肉记忆
{38358}{38460}那么这就是在 Normal 模式下移动光标的基本方式
{38521}{38550}那么还有什么方式呢
{38556}{38616}看，如果你要这样浏览屏幕上这种文件
{38620}{38651}这个效率简直低得离谱
{38652}{38724}我们不想这样按着按键
{38725}{38760}然后等好长一段时间
{38761}{38796}直到光标走到我们想要的地方
{38805}{38861}因此 Vim 里还有其他的按键组合
{38862}{38897}用来执行不同种类的移动
{38915}{38976}另外这些按键和它们的用途现在并不需要记
{38977}{39050}在课堂笔记中会全部列出来
{39086}{39108}现在要做的就是
{39109}{39165}尽可能的理解 Vim 的界面是一种编程语言
{39166}{39190}这一思想
{39217}{39278}那么另一种移动光标的方式是按下 `w` 键
{39287}{39349}这样做将会使光标往前移一个单词
{39379}{39479}类似的，按下 `b` 键会使光标往后移一个单词
{39519}{39595}那么这样移动起来效率就高一些了
{39619}{39650}此外我们还有一个 `e` 键
{39651}{39699}这个键可以把光标移动到单词末尾
{39716}{39762}让我把这个东西（击键显示工具）挪开
{39784}{39849}例如我在这里按下 `e` 键
{39850}{39904}光标就跑到这个单词末尾去了
{39905}{39925}再按一下就跑到下一个单词末尾去了
{39926}{39938}以此类推
{40016}{40061}你也能以行为单位移动
{40062}{40117}按下 `0` 键可以移动到行首
{40127}{40172}而按下 `$` 可以移动到行末
{40186}{40305}按 `^` 则会移动到行首的第一个非空白字符
{40321}{40410}让我来找一行…
{40490}{40576}那就这行吧
{40577}{40646}例如我按下 `0` 它会跳到行首
{40661}{40705}按下 `$` 跳到了行末
{40719}{40858}而猜猜按下 `^` 会跳到哪呢
{40912}{40984}按下它会跳到行首的第一个非空白字符
{41031}{41076}有点像正则里的那个
{41110}{41149}*应该是那个横杠*
{41150}{41213}对！跳到这个横线！
{41296}{41343}我们再来谈谈其他的移动方式
{41354}{41431}如果要在 buffer 里上翻下翻
{41432}{41509}按下 `Ctrl`+`u` 就可以往上翻
{41538}{41596}而 `Ctrl`+`d` 往下翻
{41621}{41711}比按住 `j` 和 `k` 键快多了
{41718}{41848}那样比按这两个键翻页慢多了
{41923}{41984}除此之外你还可以跨越整个 buffer 浏览
{41997}{42048}按下大写 `G` 可以跳到最底部
{42064}{42102}而键入 `gg` 则可以跳到顶部
{42182}{42247}有些键位是辅助你记忆的
{42248}{42299}因此对于这些键记忆起来会轻松一些
{42300}{42339}例如 `w` 是 word （即 "单词"）
{42340}{42367}而 `b` 是 beginning of word （单词开头）
{42368}{42392}`e` 是 end of word（单词结尾）
{42401}{42436}这些按键设计看上去都挺合理的
{42461}{42537}而 `0`, `^`, `$` 大概是受到正则表达式启发
{42538}{42569}这些键的意义还是能讲得通的
{42584}{42681}除此之外还有一些比较离谱，无厘头的
{42682}{42731}但你看键盘上只有这么多键
{42732}{42752}有啥办法呢（只能也给 `z`,`v` 这种键分配功能）
{42788}{42810}例如
{42811}{42914}（大写）`L` 键把光标移到屏幕最下端一行
{42946}{42982}`L` 代表 Lowest（最低），这说得通
{42985}{43007}`M` 代表中间（Middle）
{43020}{43078}我猜 `H` 是最高（Highest）
{43211}{43291}除此之外还有许多的有趣移动方式
{43292}{43371}虽然我们并不会在课上全部涵盖这些东西
{43389}{43509}但是在你将可以在练习一中逐一尝试[*]
{43565}{43728}除此之外我还想说一个移动方式
{43740}{43783}这个移动方式叫查找
{43784}{43819}也算蛮好用的
{43825}{43853}假设我现在在这行
{43862}{43948}我想跳去第一个啥字符的位置呢…
{43957}{43996}例如我想跳去第一个 o 字符
{44008}{44040}我可以键入 `fo` 
{44056}{44179}然后光标就跳到了第一个 o 的位置[*]
{44184}{44211}我还可以键入 `fw` 
{44212}{44274}这样光标就跳到了第一个 w 的位置
{44284}{44306}键入 `fc`
{44309}{44333}光标就跳到了第一个 c 的位置
{44384}{44472}我还可以键入大写 `F` 小写 `w`
{44492}{44554}这样就会将光标前向移动到最近的 w 
{44574}{44605}大写 `F` 小写 `s` 
{44616}{44654}则会跳到光标前最近的 s 
{44672}{44718}此外 `f` 这东西还有个变体
{44737}{44766}——`t`，代表「跳转至」
{44775}{44823}比如我可以键入 `to`[*]
{44832}{44905}但是光标不会落在 o 上面
{44906}{44954}而是 o 前面一个字符
{44964}{45100}而大写 `T` 小写 `t` 会往反方向寻找 t 字符
{45101}{45138}但不会落到 t 字符上
{45141}{45168}而是它后面一个字符
{45198}{45256}所以你可能已经对我之前说过的
{45257}{45290}Vim 是一种编程语言
{45291}{45322}这一思想有了一些认识
{45323}{45360}例如你可以把这些命令组合起来
{45373}{45392}`f` 和 `t` 
{45393}{45422}分别表示查找（Find）和跳至（To）
{45428}{45480}因此你可以查找特定字符
{45483}{45540}或者跳转到某个字符
{45593}{45655}那么这就是 Vim 的几种移动命令了
{45667}{45710}现在有什么问题吗
{45791}{45805}那么这就是…
{45806}{45834}啊，有问题吗
{45849}{45945}啊，没有。好
{45959}{46020}那么这就是几种 Vim 里的移动命令了
{46021}{46106}你可以借助他们来快速地浏览文件
{46128}{46216}接下来另一类常用命令就是编辑命令了
{46230}{46336}我们之前已经说过一个 `i` 键了
{46337}{46403}按下此键可从 Normal 模式进入 Insert 模式
{46417}{46469}然后你就可以开始写东西了
{46476}{46506}那么我现在把光标往上移
{46511}{46578}然后按下 `i`，就可以输入文字了
{46581}{46606}`Hello world [ENTER]`
{46704}{46747}然后按 `Esc` 回到 Normal 模式
{46748}{46804}我就对 buffer 做了修改
{46826}{46922}除此之外，还有许多用于高效编辑的命令
{46924}{46998}这些在你编程的时候会派上用场
{47017}{47112}其中之一就是我之前还没讲到这里的时候
{47113}{47145}不小心触发的 `o` 键
{47159}{47218}假设我的光标在这里
{47226}{47293}我现在在 Normal 模式按下 `o` 键
{47300}{47389}它就会在我的光标下面给我开（open）新的一行
{47410}{47441}而这就是 `o` 代表的意思
{47442}{47518}然后它就会给我切入 Insert 模式
{47523}{47568}我现在就可以开始输入东西了
{47587}{47635}然后按 `Esc` 回到 Normal 模式
{47658}{47765}类似的还有一个大写 `O` 键
{47766}{47910}它会在光标上方开一行
{47920}{47959}然后让我进入 Insert 模式
{48027}{48085}Vim 里还有一个用来删除的命令
{48090}{48232}我现在把光标放在这个单词上
{48257}{48302}然后按下 `d` 键
{48313}{48333}`d` 代表删除（delete）
{48348}{48387}唔，啥都没发生
{48394}{48498}其实 `d` 键还要配上刚讲的移动命令来食用
{48504}{48602}例如 `hjkl` 
{48610}{48685}再如 `w`, `b` 键[*]
{48686}{48706}等等
{48714}{48738}那我现在按下 `d` 
{48772}{48784}啊这 ⊙﹏⊙∥
{48800}{48857}我现在按下 `d` 然后按下 `w`
{48858}{48894}就会删除一个单词
{48944}{48968}让我撤销这个操作
{48976}{49032}在 Vim 里撤销，只需按下 `u` 即可
{49058}{49099}注意光标现在在这儿
{49112}{49171}我键入 `dw` 删掉了一个单词
{49191}{49223}然后让我动一动光标
{49231}{49255}再删一个单词
{49275}{49307}例如… 
{49323}{49354}啊这玩意好烦，老挡着我
{49363}{49445}例如我光标在一个单词的中间
{49452}{49498}我想从这里一直删到单词结尾
{49510}{49580}猜猜要用什么命令组合？ # REVIEW
{49667}{49682}`d` 和什么？
{49716}{49741}对！`de`！
{49757}{49792}它会从这里删到单词结尾
{49880}{49951}另一个常用的编辑命令是 `c` 
{49952}{49982}`c` 代表更改（Change）
{50001}{50068}这玩意很像删除
{50080}{50132}但是它删完以后会进入 Insert 模式
{50136}{50213}因为我想把它删掉然后改成其他东西
{50228}{50251}例如我光标在这里
{50252}{50284}按下 `ce`
{50294}{50337}代表从这里更改到单词结尾
{50356}{50438}然后它就会把这段内容删掉
{50443}{50486}注意之后它切进了插入模式
{50487}{50552}现在我无论输入什么都会输进 buffer 内
{50578}{50633}然后按下 `Esc` 回到 Normal 模式
{50698}{50757}因此 `c` 和 `d` 这两个命令很像
{50758}{50816}它们都会接受一个操作范围作为参数
{50837}{50937}然后按照操作范围的方向进行删除或更改 #REVIEW
{50975}{51094}此外还有一个规律
{51108}{51131}当你连续按两次某个编辑命令时
{51132}{51195}它将作用于这一整行
{51211}{51253}`c` 键也不例外
{51269}{51335}例如但我按下 `dd` 时会整行删掉
{51350}{51417}按下 `cc` 时也会这样
{51418}{51445}但此外还会进入编辑模式
{51446}{51490}这样我就可以把这行的内容改成其他东西
{51581}{51676}我们再多说几个，呃，编辑命令
{51695}{51761}因为后面我们会了解到这几个东西如何共同作用
{51774}{51828}那么另一个常用的命令就是 `x` 键
{51829}{51896}假设我的光标在某个字符上
{51909}{51929}当我按下 `x` 时
{51948}{51981}它会把那个字符删掉
