{52108}{52153}还有一个命令是 `r`
{52161}{52208}如果我现在移到某个特定的字符上
{52209}{52231}然后按下 `r`
{52232}{52283}它会接受另一个字符作为参数
{52284}{52381}然后用所给的字符替换掉光标处的字符
{52484}{52601}呃，我再讲几个编辑命令
{52607}{52656}我认为我刚刚提到过一个
{52682}{52742}就是你可以撤销你在 Vim 里做的编辑
{52752}{52823}在 Normal 模式下按 `u` 就可以做到
{52829}{52886}`u` 代表撤销（Undo），还算好记
{52887}{52981}所以我按很多次 `u`，就会撤销我所有的改动
{53012}{53080}然后，撤销的反面，当然是——重做（Redo）
{53090}{53159}Vim 中，这个命令的组合键是 `Ctrl`+`R`
{53379}{53461}好，那么我要说的另一个编辑命令
{53462}{53494}就是复制粘贴，因为……
{53495}{53529}哦，有问题吗？`
{53534}{53668}*就是，Undo 是这样吗……比如它是不是撤销掉*
{53669}{53731}*上次退出 Insert 模式前，插入的所有内容？*
{53732}{53829}*还是只是最后一个字符呢？*
{53841}{53884}啊——问得好！
{53885}{53935}这位同学问的是：Undo 会撤销
{53936}{54001}你进入 Insert 模式以后的所有输入吗
{54002}{54033}或者只是最后一个字符？
{54042}{54102}呃，答案实际上更复杂一点儿
{54103}{54140}「撤销」会，呃
{54141}{54193}撤销你最新的改动
{54194}{54237}换言之，如果你进入 Insert 模式
{54238}{54290}然后键入一些内容，再退回 Normal 模式
{54295}{54335}然后按下 `u` 撤销
{54336}{54395}它会撤销你在 Insert 模式下的所有输入
{54408}{54473}但如果你执行了一些其他的编辑命令
{54474}{54527}比如按下 `x` 删除一个字符
{54538}{54570}之后按 `u` 撤销的话
{54571}{54653}只会撤销上一个编辑命令的改动
{54717}{54757}这个问题我解释清楚了吗？
{54762}{54826}*嗯*  好，还有别的问题吗
{54887}{55028}行。那我就讲复制粘贴了，因为这很常用
{55038}{55165}`y` 命令代表复制，`p` 命令代表粘贴[*]
{55171}{55222}`y` 代表复制，因为……「提取，拉拽」（yank）
{55223}{55258}这个词就是他们——
{55259}{55337}Vim 用这个术语指代复制
{55357}{55483}而且 `y` 也接受一个动作（命令）作为参数
{55484}{55585}所以比如我键入 `yy`，就会复制当前行
{55586}{55634}此时若再按下 `p` 粘贴
{55643}{55697}注意，这里就有一模一样的两行了
{55698}{55733}因为我刚往下面粘贴了一行
{55746}{55769}按一下 `u` 撤销它
{55796}{55846}但如果我执行像 `yw` 这样的命令
{55847}{55875}它会复制一个单词
{55876}{55902}然后按一下 `p`
{55912}{56004}就会在光标位置上粘贴这个词
{56057}{56140}在谈到复制和粘贴的时候，能选择一块东西并且复制它
{56141}{56217}会是一件非常有用的事情，对吧？
{56218}{56276}比如，无论之前你用哪个编辑器
{56277}{56329}你大概都是这样运用复制粘贴的
{56342}{56417}所以此时我们要进入 Visual 模式
{56425}{56513}它们是另外一组彼此相关的模式
{56514}{56558}都可以从 Normal 模式进入
{56559}{56625}用它们来选择大段文字
{56646}{56710}其中一个模式是普通的 Visual 模式
{56718}{56764}你可以（从 Normal 模式）按下 `v` 进入
{56775}{56845}一旦进入这个模式，便可以使用大多数
{56846}{56924}Normal 模式下的指令移动你的光标
{56937}{56979}它就会选择移动前后之间的内容
{56980}{57050}所以我可以用，你看，`hjkl` 移动光标
{57051}{57103}或者我可以用 `w` 跳词
{57110}{57145}或者别的这样的命令
{57146}{57196}这样就会选中一段文本
{57216}{57269}一旦我选中这段文本
{57270}{57347}就可以对它们进行各式各样的处理
{57353}{57424}其中常用的有复制这段文本
{57437}{57499}所以我选中之后，可以按一下  `y` 复制
{57510}{57569}之后 Vim 会退回普通模式
{57578}{57653}现在那段文本被存到了粘贴（paste） buffer 里
{57654}{57690}现在我随便移到一个地方
{57691}{57715}然后按一下 `p`
{57716}{57778}就粘贴了刚复制的那段文本
{57816}{57987}相似于这种选择一串连续文字的 Visual 模式
{57997}{58103}还有 Visual Line 模式，按下大写 `V` 进入
{58113}{58168}它可以一次选择一行文字
{58178}{58226}甚至还有 Visual Block 模式
{58227}{58275}可以按 `Ctrl`+`v` 进入
{58281}{58341}它可以选择矩形的文字块儿
{58353}{58414}这可是你原先的编辑器做不到的[*]
{58503}{58606}好了，我们有一大堆 Vim 编辑命令要学呢
{58607}{58673}它有特别多，很无厘头但是非常好玩的命令
{58674}{58772}比如 `~` 命令可以改变字符大小写
{58778}{58835}或者是你选中的选区（的所有字符）
{58836}{58919}我举个例子，比如选中这个「Visual Studio Code」
{58920}{58957}然后通过选中它之后按下 `~`
{58958}{59024}反转这玩意儿的大小写
{59036}{59099}并且还有很多像这样的命令
{59100}{59143}它们一个比一个深奥难懂[*]
{59150}{59194}我们当然不会面面俱到
{59195}{59254}但是你会在练习中碰到这种东西
{59278}{59328}这些是 Vim 的编辑命令
{59329}{59411}其中很多可以和移动命令组合起来
{59412}{59472}诸位对之前的内容有什么疑问吗？
{59615}{59665}挺好，接着往下讲
{59670}{59821}另一类与 Normal 模式密切相关的东西
{59822}{59853}或者说命令，就是计数
{59864}{59904}换言之，你可以给命令以数字
{59905}{59969}将一件事重复执行若干次
{60017}{60055}就比如我的光标在这里
{60056}{60132}我想下移，比如，一二三四行
{60159}{60220}一种方法是我可以按 `j` 键四次
{60221}{60248}也就是向下（一行）四遍
{60249}{60308}然后 `kkkk` 向上移动四次
{60351}{60410}但与其反反复复按一个键
{60411}{60436}不如我使用计数（count）
{60446}{60492}所以比如我键入 `4j`
{60504}{60545}就会执行四次 `j`
{60558}{60614}Vim 的接口是种编程语言，对吧
{60630}{60682}如果我键入 `4k`，就会上移四次
{60691}{60800}现在我在这里，按下 `v` 进入 Visual 模式
{60808}{60882}好，现在可以四处移动光标，选中文字块
{60893}{60968}我可以，比如按下 `eee` 选择几个数字
{60977}{61024}但我也可以——我先返回原处
{61038}{61088}再按 `v` 进入 Visual 模式
{61089}{61144}然后键入 `3e` 去选择，像它字面意思所说 
{61145}{61204}「向右移到单词结尾」三次，这个范围
{61259}{61339}当然这些也可以和编辑命令相结合
{61350}{61459}假设我想删除七个单词
{61469}{61547}我可以先把光标移到某处
{61548}{61600}然后键入 `7dw` [*]
{61601}{61629}也就是「删除单词」七次
{61696}{61762}它在一些情况下会特别有用
{61763}{61815}比如假设我的光标在屏幕某处
{61816}{61865}而我看向了屏幕另一处
{61866}{61925}或者说我想要我的光标移到那一行
{61938}{62015}请注意我在左侧设好了「相对行号」 [*]
{62022}{62105}也即，光标所在处显示绝对行号
{62112}{62185}而其他处显示相对光标的偏差行数
{62195}{62242}现在来看我的光标在这儿
{62243}{62346}但我想移到下面这个「Microsoft Word」这里
{62347}{62392}所以这是往下 8 行
{62393}{62460}那么我用什么命令组合去搞定这件事呢？
{62468}{62507}想一下最有效率的方式是什么？
{62519}{62540}*eight j*
{62546}{62567}没错！
{62568}{62606}来试一下，`8j`
{62607}{62666}然后我的光标就会移到这一行
{62762}{62965}好的。Vim 的最后一类按键命令叫修饰符
{62966}{63035}到现在为止，我们讲了移动、编辑和计数
{63045}{63089}而最后，我们还有修饰符
{63102}{63209}修饰符会略微变更移动命令的意义
{63226}{63367}有俩特别好用的是 `a` 和 `i` 修饰符
{63368}{63457}`a` 代表周围（around）
{63458}{63500}而 `i` 代表内部（inside）
{63523}{63580}为了见识一下它的用武之处
{63581}{63673}我可以把光标移到，比如这里
{63693}{63770}呃，希望你们都熟悉 Markdown 语法[*]
{63771}{63812}——不熟悉也完全没关系，这不太重要
{63825}{63886}这是一段 Markdown 写成的链接
{63896}{63931}方括号内的是其描述文字
{63932}{63973}圆括号内则为链接地址
{63974}{64028}现在我的光标在这里边儿
{64029}{64110}我想更改这个链接对应的描述文字
{64136}{64235}嗯，一种方法是用 `b` 回到这儿
{64253}{64283}然后执行比如 `2dw`
{64284}{64330}然后 `i` 进入 Insert 模式
{64331}{64396}有许多种方式能达到目的，这是其中之一
{64397}{64441}这样我就能随心所欲地打些别的
{64457}{64501}|按 `u` 撤销，再撤销
{64515}{64552}另一种能搞定的方式是
{64553}{64619}更改两个单词——「`c2w`」
{64629}{64664}然后输入别的文本
{64737}{64810}但这同一个问题的最终方案是
{64811}{64889}运用修饰符命令来向 Vim 表明
{64890}{64986}我想如何和这些成对的东西—
{64987}{65053}—比如圆括号和方括号去交互
{65070}{65125}所以这个最终方案是
{65137}{65223}「在方括号内更改」—`ci[`
{65233}{65304}这样还会在删除括号内的内容之后
{65305}{65364}让我进入 Insert 模式
{65406}{65427}所以你可以看到
{65428}{65466}我们可以怎样去运用这些“组件”
{65468}{65513}就比如提到的「更改」（change）
{65516}{65563}然后与其他移动命令结合
{65565}{65626}我们讲了 **i**nside，它是怎样的一个修饰符
{65634}{65682}然后我们讲了……呃
{65690}{65750}我们没讲括号的事情
{65758}{65845}就是，如果你的光标位于一些不同的，呃
{65846}{65921}不同的成组的东西，比如圆括号、方括号，之上
{65922}{65978}你可以按下移动键——`%`
{65979}{66052}在配对的括号间反复横跳
{66087}{66223}如果我移到这里，然后执行 `di(`
{66245}{66317}就会删除这些括号里边儿的内容
