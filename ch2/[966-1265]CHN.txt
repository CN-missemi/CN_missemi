【966】 那么，这些是 Vim 的修饰符

这样我们讲过 `i` 了

但是没讲过 `a`

如果我敲 `da(` 进去

它就会删除括号里的内容，也包括括号

所以说 `i` 是内部（inside）

`a` 是周围（around或者包含（including）的意思

【972】 好，所以这基本就是你在 Vim 的接口里

能够相互结合的若干类命令

那么，现在还有关于这些理念

或者接口即编程语言这个纲领的问题吗

好，那为了展示这个编辑器的强大

我们快速演示一遍

这能让我们体会到这个工具有多快

【981】甚至和我们思考得一样快

好，看这里有一个啥也没输出的

坏掉的 fizz_buzz

额，但愿你们都听说过 fizz_buzz

如果没听说过的话，我简单提一下

【987】 fizz_buzz 是一种输出 1 到 n 的练习

当数字能被 3 整除时，输出 fizz

当数字能被 5 整除时，输出 buzz 

当数字同时被 3 和 5 整除时， 输出 fizzbuzz 

如果这些条件都没满足，就直接输出数字

所以，你的输出看上去应该长这样：

`1, 2, fizz, 4, buzz`

【996】 但是，如果我运行这个程序，它啥也没输出

我把程序放在左边，终端放在右边

好，现在这里有一堆问题

其中一个就是 `main` 函数从来没被调用过

那我们就开始修这个大锅

现在看好我是怎么修这个锅的

看好了，我按键的次数到底能少到什么程度

大写 `G` 把光标跳到文件底

【1005】`o` 在下面新建一行

现在我就可以往里输入内容了

也就是说我现在处在 Insert 模式

我已经输入完我想改的了

`Esc` 回到 Normal 模式

如果我键入 `:w`

我们就进入了命令行模式，对吧

让我回到这儿

好，至少现在程序运行时输出东西了

这个程序还有另一个问题

【1013】 它是从 0 开始的，而不是 1

咱再来修修这个锅

移到这个 `range()`……

唔，这个 `range()` 函数

它不该从 `0` 开始一直到 `limit`

它应该从 `1` 开始到 `limit + 1`

我还没给你们看在 Vim 中怎么搜索

按下 `/` 

额，我得把这个关掉重启

如果你按下 `/` ，它就开始搜索

【1023】 如果我输入 `range`

我的光标会从当前位置挪到第一个 `range` 那

这样能让你把光标高效地移到想要的地方

`ww` 继续挪两个字符

`i` 进入 Insert 模式

添加 `1, ` 然后按 `Esc` 回到 Normal 模式

【1030】 这是 Vim 里面一个很常见的情况

你先待在 Normal 模式里

然后把光标挪到某个地方，进入 Insert 模式

做一点小改动，然后再用 `Esc` 回到 Normal 模式

Normal 模式就像是家一样——

这大概就是你呆的时间最长的地方

我还想加上一个 +1

那就用 `e` 挪到这个词后面

摁 `a` 代表追加，输入 `+1` 然后 `Esc` 退出

【1039】 好，我们已经解决了这个问题

这程序还有个毛病

就是被 3 和 5 整除的时候输出的都是 fizz 

咱再来解决下这个问题

用 `/fizz` 来找出 fizz 

然后按下 `n` 来找到下一个匹配的结果

再用 `ci'` 来改变两个单引号中间的内容

它就删除了 fizz 然后进入 Insert 模式 

然后我就可以随意输入了

【1049】 然后再按下 `Esc` 回到 Normal 模式

好极了，我们解决掉了这个问题

这程序还有另一个问题

当数字是 15 的倍数时

它在独立的两行输出 fizz 和 buzz 

【1053】 我们再来修一下这个锅

先把光标往下移动到这一行

我实际上并不担心程序的内容是什么

有些程序写的很蠢，但这并不重要

只需注意我在 Vim 中按下了哪些键

【1060】 这些按键让我在 Vim 中高效的修改程序

现在我的光标在这一行

我按下 `$` 来把光标移动到行尾

按下 `i` 来进入 Insert 模式

然后把这些东西输入进去

按 `Esc` 来回到 Normal 模式

【1066】 现在我想在下面的 print 如法炮制

请你跟我这样做，`jj.` [*]
*我就跟你这样做

在 Vim 中，按下 `.` 会复现之前的编辑命令

要想完成重复性工作，这是个好办法

【1072】还免于重复地输入相同的内容

上次它插入了 `, end=''`

所以当我按下 `.` 时，它就会在这一行再来一遍

【1076】 我想这个程序的最终模型就是

我们把这些问题全给解决了

并且还应该引入一个命令行参数

而不是用写死在程序里的这个 10

【1082】 那接下来我按 gg 来回到顶上

用大写 O 在上面新建一行

然后我会输入 `import sys` ，回车

然后再用 esc 键回到 Normal mode 

然后我想把光标挪到 10 那个地方

那我就 `/10` ，这样我就直接到那去了

【1089】 用 `ci(` 来在括号里面编辑

现在我就可以把我想要的输入进去了

做完这些，我的程序就能好好的 fizzbuzz 了

我想我还有一个地方没改，但这已经不重要了

这已经能说明你可以迅速的做出许多改动了

【1097】 那么，关于这个例子

还有我们讲的这种思路还有什么问题吗

我不懂怎么分清哪个是 Vim 的窗口 #REVIEW

这个大概会在周二详细地讲

我会把 Vim 放在左边， shell 放在右边

然后外边的是  #REVIEW

关于这个问题，你可能还想问些别的

【1104】 比如怎么在不同的 Vim 窗口之间切换

你可以在这一讲的讲义里找到答案

还有关于这些的组合键

可以解决打开了多个或者是相同的窗口

还有问题吗？

change 和 delete 有什么区别

【1110】 啊，这是个好问题

delete 作为一种能删除内容的操作

可以让你在 Normal mode 里就能完成这些事

所以你在文件里移动光标就好

而 change 和 delete 很像

都能对文件内容干出同样的事

但是 change 在删除了内容之后

【1117】 会立即把你切到 Insert mode 里 

所以它省了你额外敲一个字符的时间

在这举个例子，如果我想删掉这个 `main` 

可以用 `dw` 来删掉这个词

但是如果我随便再敲个字符，比如 `j` 

它就会把光标向下移动

如果不这么做，我还可以用 `cw` 重新组织语言

【1123】 实际上它又把我拐到 Insert mode 里了

然后我就可以随便输入点啥东西

 `dwi` 和 `cw` 差不多东西

 但是 `cw` 少敲一次键盘

我们在讲义里还有个链接，是关于 Vim golf 的

总体来讲，你们可以在线开始这个游戏

在这个游戏里你会接到一个编辑任务

你的目的就是找到最少敲几次键盘能达成任务

【1134】 这小游戏很容易让人着迷

所以我建议在你们空闲时间玩 #REVIEW

我还看到有人问问题

#￥%……&*（ #REVIEW

对，是一段

这是最有用的 Vim 命令之一，这问题好

还有别的问题吗

好，咱现在大约还剩五分钟

【1141】 我会简短的讲一点东西

在讲义里会有相关的细节

你们得好好看看讲义里这一部分的内容

总而言之， Vim 是一种程序员的文本编辑器

当然它也是高度程序化的

不仅仅是它的接口是一种程序语言

它的使用方法也是如此

【1151】 你可以调整它的诸多选项使你效率最大化

你还可以给它安装很多有用的插件

Vim 是通过硬盘上一个叫 `vimrc` 的文件配置的

【1156】 很多基于 shell 的工具都默认集成了这个文档

通常会有一个配置文档来教你这工具怎么运行

所以如果我编辑它

可能在你电脑上没有这个文档

但是我已经下载下来了

我们为你们写了一个默认的 vimrc 配置文档

并且挂在课程网站上了

你可以用那个文档入门

如果我运行 `vim ~/.vimrc` 

我在这能看到一堆内容

【1166】 然后是一些特定的命令

比如默认开启语法高亮

或者是我们想要的行数

如果我们不想把它打开

删掉控制行数显示的东西就好了

【1171】 如果我删了这些东西然后重新加载 Vim 

你会发现我左边的那些行数都没了

简而言之，你可以配置很多东西

我们给了你一个很基础的配置文档

文档试图把 Vim 中默认开启的怪怪的东西关掉

但是我们没有给你修改太多选项

【1181】 当然，我们三个老师一些选项可能用的很多

因此我们高度定制了 `vimrc` 

如果你们想用的话

我们也把自己用的配置文档放到了链接里

就像成千上万的人们在 GitHub 上分享他们自己的 `vimrc` 

所以你们能从很多地方得到灵感

【1189】 关于这个话题还有很多很酷的博客

你还可以用插件去拓展 Vim 

【1192】 插件能帮你做各种各样有意思的事

比如很多编辑器自带的模糊文件查找

所以你可以在一个弹窗里输入文件准确或大致的名称

然后迅速的找到它

【1200】 还有可视化的撤销操作、文件管理器等等插件

所以我们在课程网站上挂了一些我们钟爱的插件

所以我强烈建议你熟悉怎样安装插件

因为它只会占用你几秒钟

并且有些插件真的很酷

最后一个话题，我会在课程介绍之前简单提两嘴

【1210】 这个话题是 Vim 模式和其它的一些程序

事实证明很多程序员，包括我们

都对 Vim 的接口感到激动不已

所以他们开发了有相似功能的别的一些工具

举个例子，我可以用 Vim 的模式运行 Python 

然后我就可以在这输入内容

如果我按下 esc 键，我就在 Python 命令行的 Normal mode 里了 #REVIEW Python啥玩意没整明白

【1219】 我可以前后移动光标

也可以按下 x 来删除一些东西

或者是用 cw 改一个词

这些 Vim 的优点都能实现

不仅仅是 Python 命令行，我也可以把我的终端弄成这样

【1225】 我随便输入点东西，然后按下 esc 键就到了 Normal mode 

我把光标移动到这

就像进入了终端的 visual mode 一样

可以选中一块文本，然后按下 ~ 来修改内容

【1230】 所以我们把链接放到了 #REVIEW

你怎样开启像 Z shell, fish[*] 等的 Vim 模式
* Fish Is fiSh-sHell(其实是 the friendly interactive shell)

或者是像 Jupiter Notebook 一样

还有很多程序可以开启 Vim 模式

如果别的地方没有，你还可以搜一下

因为很多人都喜欢这些功能

【1239】 如果你笃定的想学习这些东西

我想应该把你用的每个工具都打开类 Vim 的模式 

至少一个，会让你对这工具有更深的理解 #REVIEW

一旦你熟练掌握了 Vim ，别的工具都会如臂使指

我想对 Vim 的简介就到这里了

【1248】 还有一些挺好的材料今天这一讲没讲到

但是在讲义里都有

最后我极力推荐你们完成今天的练习

至少对我个人来说

我认为学习这个编辑器比今天教的东西都管用

【1258】 好，今天的课就上到这里了

我们明天见

顺便提一下，明天的课换成了数据整理

现在把周四和周二的课换了一下

在我们的课程网站上也能看出来

【1266】 你们别上错课了
