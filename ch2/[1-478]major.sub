{17}{126}好，欢迎来到计算机教育缺失的一课
{127}{192}这节是第三节课
{206}{241}今天让我们来聊聊
{242}{269}文本编辑器的那些事
{284}{337}我认为这个话题真的是
{338}{427}这系列课程中很有价值的一课
{435}{471}因为作为一个程序员
{472}{578}你会在这上面花数不清的时间来写程序
{598}{627}所以如果你能花一点点时间
{628}{687}让这件事更有效率
{694}{771}在你的本科生涯
{772}{838}在你未来工作时
{839}{876}将能够省下成百上千小时的时间
{949}{1000}文本编辑器
{1001}{1037}和其他的编辑器
{1038}{1086}例如用来写文章的编辑器
{1087}{1132}有些小小的不一样
{1141}{1215}这是因为写程序和写文章不同
{1231}{1297}当你写程序的时候，你将会花大量时间
{1298}{1343}来阅读你写的东西
{1344}{1409}来移动你的光标
{1410}{1499}来对他们做点小小的修改
{1500}{1557}而不是像写文章的时候
{1558}{1630}从上到下一气呵成
{1631}{1667}因此对于不同用途
{1668}{1699}我们会使用不同的编辑器
{1700}{1724}这是很合理的
{1725}{1784}例如我们用 Word 来写报告
{1785}{1852}用 Vim、Emacs、VS Code
{1854}{1889}以及 Sublime 来编写代码
{1958}{2043}要学习并熟练使用一个文本编辑器
{2044}{2095}第一步就是跟着教程学习
{2096}{2167}这也是来听这节课
{2169}{2201}以及完成之后的课后练习
{2204}{2243}能教给你的东西
{2279}{2321}此外，在这节课结束之后
{2322}{2423}请用文本编辑器来进行你的所有编辑工作
{2432}{2492}当你在学习一个复杂工具的时候也是这个方法
{2502}{2533}那么我们今天学的就是
{2534}{2553}超强编辑器 Vim
{2554}{2613}这个工具在程序员间使用非常广泛
{2625}{2684}当你在学习这样一个复杂的工具的时候
{2685}{2737}在刚开始学习使用它时
{2747}{2777}经常遇到的情况是
{2778}{2837}你的编程效率反而下降了一点
{2838}{2876}但是不要放弃
{2877}{2958}我敢说在这个新的编辑器上
{2960}{3026}花上 20 小时左右
{3027}{3133}就能恢复到你之前的工作效率
{3134}{3188}然后它的益处就慢慢体现出来了
{3189}{3257}学得越久，效率越高
{3282}{3371}这些复杂工具不难入门
{3376}{3482}但精通他们将花费一生的时间
{3483}{3578}因此在整个使用的过程中
{3579}{3633}如果你觉得：呃这样做效率好低啊
{3634}{3773}记得去查一下有没有更好的操作方式
{3774}{3833}答案几乎总是 “是的”
{3864}{3970}因为编辑器是程序员写给程序员用的[*]
{3971}{4034}写这些编辑器的程序员
{4035}{4105}肯定碰到了同样的问题，并解决了它
{4106}{4156}所以你就不用去被它困扰了
{4165}{4257}所以你在学习的时候记得去查
{4258}{4334}你可以用搜索引擎，也可以给我们发邮件
{4335}{4391}以及~~（不存在的）~~来办公室
{4392}{4463}我们将很愿意帮助你找出高效的方案
{4516}{4573}关于学哪个编辑器这个问题
{4574}{4642}在前几次的开课中实际上我们避免了
{4643}{4678}去教某一个特定的编辑器
{4679}{4736}因为我们不想把我们的观点强加于你们身上
{4737}{4815}但是我们着实觉得应该
{4816}{4879}教你们怎样使用某一个工具，并精通它
{4891}{4991}另外许多人对编辑器有很强的主见 
{4992}{5072}课程笔记里有更多关于此方面的链接
{5133}{5196}你可以去看看各个编辑器这些年来的热门程度
{5197}{5311}我相信你们都听过 StackOverflow[*]
{5312}{5401}这个网站每年都会向开发者发放调查问卷
{5402}{5473}其中一个问题便是你用哪个编辑器
{5483}{5518}从结果看来
{5519}{5613}最热门的图形界面编辑器是 VS Code
{5614}{5758}而最热门的基于命令行的编辑器是 Vim
{5759}{5819}基于此以及如下几点原因
{5820}{5869}今天我们会教你们如何使用 Vim
{5870}{5952}第一点原因是这个课的所有的教授都使用 Vim 
{5953}{5994}而且 Vim 是我、John 和 Jose 的主力编辑器
{5995}{6040}我们用这个编辑器用了很久了
{6041}{6071}而且用的很开心
{6120}{6211}此外我们觉得这背后有许多很有趣的东西
{6252}{6355}所以就算最终你并没有打算长期使用它
{6356}{6416}我仍然认为学习这些背后的思想很有价值
{6435}{6561}另外许多的工具也觉得 Vim 哲学很棒
{6562}{6647}从而使它们提供了 Vim 模式
{6661}{6780}例如当下最热门的 VS Code 
{6781}{6827}支持 Vim 键位绑定
{6828}{6950}而且那个插件已经被下载了数百万次
{6967}{7051}所以这门课程里面的很多工具
{7077}{7175}你会发现它们都支持 Vim 模式
{7176}{7217}包括 Python 的 REPL[*]
{7218}{7276}包括 Jupyter Notebook 
{7277}{7355}甚至你的浏览器
{7370}{7457}因此我们今天就会教给你这个好东西
{7493}{7640}但是一个这么强大的工具，这一节课讲不完
{7646}{7793}我们的目标是教给你隐含在其中的核心思想
{7806}{7915}以及一些基本的操作例如打开关闭文件
{7916}{7951}移动你的光标
{7952}{7989}作出一些修改等等
{8001}{8095}我们不期望你听一次就能记下来每一个细节
{8096}{8149}因为这节课会上得挺快的
{8150}{8304}但是在课程笔记和练习里会涵盖他们
{8305}{8383}因此我强烈建议你把所有练习过一遍
{8394}{8459}至少是基础练习
{8508}{8538}有什么疑惑吗？
{8619}{8635}好
{8670}{8736}那隐含在其背后的第一个精妙思想就是
{8737}{8804}Vim 是一个基于模式（Modal）的编辑器
{8813}{8838}这意味着什么呢
{8839}{8889}Modal 这个词源于 Mode
{8890}{8978}这就意味着 Vim 有多个模式
{8991}{9108}这个思想就源于，当你在写程序的时候
{9109}{9184}你会经常做不同的事
{9185}{9229}有时候你在读代码 
{9230}{9287}有时候你在给代码做小改动
{9288}{9385}在某处寻找、改正一个小地方
{9402}{9488}有时候你在写一长串的代码
{9489}{9539}例如在从零开始写一个函数
{9540}{9644}因此为了这些不同的工作就有了不同的模式
{9702}{9769}那么我现在想先在黑板上写些东西
{9770}{9820}这样方便我后面讲课
{9831}{10011}当你开始使用 Vim 时它会在 Normal 模式下启动
{10012}{10084}在这个模式下，各种键位组合
{10085}{10126}拥有在这个模式下的特定意义
{10127}{10252}其中就有一些按键组合来切换到其他的模式
{10253}{10310}而切换后这些键位组合的意义也相应改变
{10370}{10537}因此你的大部分时间都会在 Insert 和 Normal 模式下
{10645}{10742}在 Normal 模式下按下 `I` 键就可以进入 Insert 模式
{10743}{10865}而在 Insert 模式下按下 `Esc` 就可以回到 Normal 模式
{10961}{11032}这里我们注意一下我们表示按键的方式
{11063}{11173}这个表示方式将会用在课上、课堂笔记里
{11174}{11234}以及 Vim 给你的提示中
{11240}{11310}当仅仅是代表例如 `I` 键这样一个按键本身时
{11319}{11441}那么就会直接写 `I`
{11442}{11596}但是对于例如 `Ctrl`+`V` 这种按键组合
{11603}{11714}就有可能以这么几种形式来体现
{11726}{11858}第一种是一个“脱字符号”后面跟着控制用字符[*]
{11859}{11901}这是一种写法
{11918}{11983}另一种写法可能是你最熟悉的
{11984}{12118}在课程笔记里我们有时候会写成 `Ctrl-V` 这样
{12119}{12305}而有些地方我们可能会写成 `<C-V>` 这样 
{12306}{12382}好这样介绍一下方便后面讲课
{12416}{12478}然后回来
{12479}{12526}Vim 有好几种模式
{12527}{12652}而 Normal 模式是用来移动光标、阅读东西
{12653}{12713}以及在文件间切换的
{12714}{12780}而 Insert 模式是用来输入的
{12796}{12903}因此在这个模式下你的按键大多会直接进入 buffer 
{12904}{12948}而在 Normal 模式下则不然
{12949}{13000}它们不会进入 buffer 
{13001}{13083}而是用来进行一些浏览和编辑操作
{13188}{13255}另外我们要认识到真实的情况会比这更复杂一点
{13256}{13301}此外还有许多的模式
{13302}{13346}我现在把他们列出来
{13347}{13395}方便我后面的讲课
{13396}{13496}Vim 里还有个替换模式
{13535}{13633}不像插入模式会把字符往后移
{13634}{13669}替换模式会直接覆盖掉文本
{13670}{13759}在选择方面也有着许多的模式
{13916}{13970}有一个叫 Visual 模式
{13971}{14040}还有一个 Visual Line 模式 
{14041}{14100}以及一个 Visual Block 模式
{14171}{14238}替换模式的进入方法是按下 `R` 键
{14239}{14298}进入 Visual 模式则是按下 `V` 键
{14299}{14422}按 `Shift`+`V` 进入 Visual Line 模式
{14438}{14506}而按下 `Ctrl`+`V` 进入 Visual Block 模式
{14556}{14627}此外还有一个命令行模式
{14786}{14869}按下冒号键就可以进入
{14997}{15074}好这样写下来我们后面讲课就方便些了
{15329}{15374}我们现在可以来试试这些模式
{15432}{15500}首先从图中我们可以注意到
{15501}{15577}从 Normal 模式切换到其他模式
{15578}{15604}我们要按下某个键
{15605}{15717}而切换回这个用得最久的 Normal 模式
{15718}{15777}我们只需按下 `Esc` 键
{15813}{15917}因为用 Vim 时要频繁按下 Esc 键
{15918}{16020}而这个键在键盘的角落里
{16023}{16061}按起来真的很不方便
{16063}{16172}许多程序员会把键盘上某个键映射成 `Esc`
{16173}{16249}通常这个键是 `Caps Lock`
{16250}{16309}它就在键盘的中间一行上
{16325}{16443}课程笔记里也有一些链接，指导你如何映射按键
{16620}{16672}到现在为止，我们花了很多时间
{16673}{16713}来讨论 Vim 背后的第一个设计哲学
{16714}{16751}那就是编辑模式
{16752}{16793}我们可以先讲一些基础
{16794}{16853}像如何打开这个文本编辑器
{16854}{16907}如何打开文件，保存文件
{16908}{16929}等等的操作
{16944}{17030}所以，这是一个基于命令行的编辑器
{17031}{17087}尽管它有一些图像化变体
{17098}{17185}启动这个程序的方式是键入 `vim`
{17210}{17241}你可能会注意到
{17242}{17292}在我的屏幕左下角
{17300}{17342}你能看到我键入的内容
{17343}{17416}这在这节课的后面会很有用
{17417}{17476}当我在输入 Vim 命令时
{17501}{17536}我会说我正在写什么
{17537}{17566}你们也会在屏幕上相应地看到
{17567}{17612}所以当我按下 `^C`
{17624}{17674}屏幕也会显示 `^C`
{17690}{17803}文本大到都能看见吗？很好
{17891}{17945}所以我们要打开 Vim
{17946}{18010}只需要在命令行中键入 `vim`
{18039}{18096}大多数系统已经预装好了 Vim
{18097}{18120}如果你没有的话
{18121}{18169}也可以用包管理器装一个
{18189}{18226}`vim` 也可以接收参数
{18227}{18282}即当我们想用它直接编辑特定的文件
{18283}{18370}而不是先打开程序再打开文件
{18379}{18470}例如，我在这个目录里有一个文件
{18471}{18533}这个文件事实上是这节课的笔记
{18542}{18613}我可以键入 `vim editors.md [ENTER]`
{18623}{18671}砰的一下，编辑开始
{18714}{18749}在本课中
{18750}{18865}我不是完全在 Exton 默认配置中运行 Vim [*]
{18889}{18956}我已经额外做了一些小配置
{18971}{19052}使它在默认条件下更加美观
{19061}{19126}比如左边有行号
{19127}{19186}再比如底部有更多的状态信息
{19196}{19256}如果你也想要这些设置
{19257}{19307}我在笔记里放了个链接
{19308}{19342}可以让你有一个
{19343}{19373}更稍稍合理的设置
{19478}{19544}当你打开 Vim，你该怎么做？
{19545}{19617}像我之前说的，Vim 以 Normal 模式启动
{19618}{19657}所以如果我直接开始键入
{19658}{19763}比如按下 `x`，它没有被输入到 buffer
{19764}{19813}你可以看到左上方的光标
{19823}{19876}事实上我删掉了一个字符
{19890}{19928}这是因为我在 Normal 模式
{19929}{19962}而不是 Insert 模式
{20011}{20068}Insert 模式基本上是你以前惯用的
{20069}{20110}所有其它的文本编辑器
{20112}{20139}比如某处有一个光标
{20141}{20158}你键入字符
{20159}{20209}它进入 buffer
{20250}{20329}而在 Vim 的 Normal 模式中
{20340}{20396}你可以按下 `i` 进入 Insert 模式
{20397}{20427}所以看，我按下了 `i`
{20434}{20538}之后底部的通知显示 `--INSERT--`
{20561}{20614}左下总会显示你所在的模式
{20615}{20641}但 Normal 模式除外
{20642}{20671}Normal 模式下它是空白的
{20682}{20771}现在是 Insert 模式，如果我按下 `x`
{20778}{20846}它就会插入到文本缓冲区（text buffer）
{20860}{20925}我可以按下 `Backsapce` 或者其它的字母键
{20926}{20987}现在我的编辑器可以表现得
{20988}{21047}和你想的其它编辑器一样
{21067}{21126}现在如果我要结束插入字符
{21127}{21186}如何退回 Normal 模式呢
{21228}{21253}对，没错
{21254}{21279}我按一下 `Esc` 键
{21281}{21334}这个就是我击键显示工具
{21335}{21405}表示 `Esc` 键的图标
{21406}{21447}要意识到这一点
{21545}{21648}Vim 有一个观点，使用鼠标是低效的
{21649}{21703}当你的手正在键盘上
{21704}{21778}再去移到鼠标上其实浪费时间
{21779}{21794}对吧
{21795}{21828}当你编程的时候
{21829}{21858}你就不想浪费这点时间
{21860}{21914}就比如你写什么写到一半沉醉其中
{21930}{21999}取而代之的是，Vim 的所有功能
{22000}{22056}都可以仅通过键盘调用
{22057}{22123}所有你可能习惯了的操作
{22124}{22162}像打开文件什么的操作
{22163}{22253}比如打开文件，保存文件之类
{22254}{22311}我会用键盘实现它们
{22312}{22353}是怎么做到的？
{22354}{22428}这是通过 Vim 的其它模式
{22429}{22460}模式在那边的黑板上，实现的
{22461}{22520}尤其是通过命令行（Command Line）模式
{22556}{22655}在 Normal 模式下，如果你按下 `:` [*]
{22669}{22711}你会发现光标
{22739}{22798}——我想我的显示工具现在挡住了
{22799}{22822}好在它已经没了
{22823}{22908}光标跳转到了底部，左下方
{22909}{22965}它显示了我刚刚按下的 `:`
{22975}{23042}现在我可以输入命令
{23043}{23115}你可以认为它很像命令行 Shell
{23116}{23176}也就是我们之前几天所讲的
{23177}{23246}不过这是 Vim 的命令行 Shell
{23247}{23284}你在这里输入 Vim 命令
{23285}{23315}而不是 Shell 命令
{23333}{23383}这里有很多内置命令
{23384}{23427}可以搞定你惯常做的所有事
{23428}{23499}例如，你可能很想知道一个命令
{23501}{23542}那就是如何退出编辑器
{23543}{23591}你会发现如果在 Normal 模式下
{23592}{23617}我可以按下 `Esc`
{23618}{23669}从命令行模式返回 Normal 模式
{23670}{23713}我按下 `^C`
{23747}{23826}不像很多其它程序，Vim 不会退出
{23840}{23873}那我如何退出 Vim?
{23874}{23964}我可以按下 `:`，进入命令行模式
{23976}{24015}我就可以键入命令 `quit`
{24016}{24088}Q-U-I-T，你会看到
{24101}{24168}——嘿，我得把这个破玩意移到中间去
{24226}{24262}看，显示 `:quit`
{24263}{24311}按一下 `Enter`，Vim 就会退出
{24329}{24370}我可以再打开 Vim
{24371}{24446}事实上这个命令有简写，`:q `
{24471}{24509}效果是一样的
{24543}{24605}这里还有一堆类似的命令
{24622}{24695}其它应当知道的，比较方便的命令有
{24696}{24728}如何保存文件？
{24729}{24808}假设我做些编辑，像 `hello world`
{24846}{24899}按下 `i` 进入 Insert 模式
{24937}{24982}——让我重按一下
{24983}{25031}我按下 `i` 进入 Insert 模式
{25032}{25091}现在，我可以用下箭头
{25211}{25253}——呜哇，好像翻车了
{25254}{25313}Jon，你能搞定它吗？
{25332}{25402}啊，别介意
{25403}{25560}假设我下到这行
{25580}{25647}按下 `i` 进入 Insert 模式
{25648}{25677}输入一些文本，
{25678}{25750}之后按下 `Esc` 回到 Normal 模式
{25751}{25802}我该如何保存这个文件？
{25803}{25847}这个要用别的命令完成
{25848}{25906}按下 `:` 进入命令行模式
{25916}{26041}之后键入 `w` ，按下 `Enter`
{26049}{26083}`w` 代表写（Write）
{26154}{26218}底部会随之出现 `editors.md`
{26219}{26255}啥啥啥的已写入
{26256}{26309}这样就保存文件了
{26310}{26426}如果我键入 `:q` 退出再重新打开文件
{26435}{26492}你会看到修改被保存了
{26586}{26620}还有一些其它的
{26621}{26696}——实际上有非常多的 Vim 命令
{26697}{26729}适用于各种情况
{26768}{26830}我现在只多介绍一点儿
{26864}{26935}一个很有用的命令是 `help`
{26936}{26959}`:help`
{26973}{27045}键入 `:help`，之后输入
{27053}{27125}特定键或特定命令
{27126}{27197}来获得他们的说明
{27213}{27322}比如我想知道 `:w` 的作用
{27323}{27394}我可以键入 `:help :w`，之后就会显示
{27425}{27604}`:w` 或 `:write` 的文档
{27633}{27690}如果我键入 `:q`，会关闭这个 window
{27691}{27740}并且返回之前的状态
{27792}{27897}注意到 `:help :w` 与 `:help w` 不同
{27933}{28090}因为后者的 `w` 代表
{28100}{28181}你在 Normal 模式下按 `w` 键 
{28182}{28226}只是这里的 `w` 键 
{28227}{28254}没有 `:`
{28255}{28308}如果我查看 `:w` 的帮助
{28309}{28360}这是 `w` 这条「命令」的资料[*]
{28502}{28730}现在你们掌握了一些使用的基础
{28731}{28769}对吧？你可以打开编辑器
{28785}{28841}用它编辑一个特定文件
{28842}{28890}按下 `i` 进入 Insert 模式
{28891}{28956}输入一些文本，按下 `Esc` 返回
{28957}{29020}Normal 模式，键入 `:w` 保存文件
{29021}{29053}`:q` 退出，所以
{29079}{29135}你们已经会了必要的基本原理
{29139}{29244}用于使用 `vim` 编辑文件，尽管效率有些低下
{29255}{29291}目前为止有问题吗？
{29487}{29513}是的后面这位，所以问题是
{29517}{29583}Normal 模式的优越性是什么？
{29588}{29626}我会讲更多细节的
{29627}{29652}再等 5 分钟就好
{29669}{29773}简而言之，Insert 模式仅仅用于输入文本
{29774}{29798}我在 Insert 模式
{29799}{29838}我可以输入文本，但是
{29839}{29902}我在编程时实际上花费很多时间
{29903}{29990}在我的文件中移动，做一些小修改
{29991}{30016}我移到这里
{30017}{30089}比如我可能想把这个 `https` 链接
{30090}{30139}修改为 `http`
{30189}{30250}我可以做一些小修改，比如这
{30251}{30277}在 Normal 模式下
{30278}{30343}之后五分钟我们会看到更多相关内容
{30354}{30377}好问题！
{30378}{30588}还有其它问题吗？好的，那就继续
{30693}{30794}另一个有必要知道的是
{30920}{30947}我认为是一些高阶的关于
{30948}{31052}Vim 的 buffer，window 与 tab 的模型
{31062}{31100}很可能是这种情况，就是
{31101}{31137}无论你之前在用什么程序
{31138}{31197}像 Sublime Text 或者 VS Code 之类的
{31211}{31256}你都可以在其中打开多个文件
{31258}{31271}是的，你可能
{31277}{31312}打开很多选项卡
{31313}{31384}并且有多个编辑器，窗口
{31394}{31475}Vim 也有这些东西的概念
{31484}{31508}但是，它的模型
{31509}{31574}和大多数其它程序有些不同
{31611}{31684}Vim 提供一组打开的 buffer
{31685}{31736}————这是它对打开的文件的描述
{31746}{31792}也就是说，它有一些打开的文件
{31793}{31892}除此之外，你可以有很多 tab
{31901}{31948}tab 里可以有 window
{31959}{32010}这种奇怪的机制使得 Vim
{32011}{32047}相较于你以前用的程序
{32048}{32065}有些许不同
{32073}{32159}就是它的 buffer 与 window
{32160}{32224}不一定是一一对应的关系 
{32240}{32284}比如我现在可以举个例子
{32289}{32364}后面我会展示对应的组合键
{32365}{32425}但是现在来说，你可以做的一件事是
{32426}{32455}创建两个不同的 window
{32456}{32538}所以我在上边儿有个 window，下边儿又有一个
{32565}{32635}注意，两个 window 打开了同一个文件
{32636}{32680}如果我在这里做一些编辑
